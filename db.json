{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/css/noscript.styl","path":"css/noscript.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/logo-algolia-nebula-blue-full.svg","path":"images/logo-algolia-nebula-blue-full.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/comments.js","path":"js/comments.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/config.js","path":"js/config.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/comments-buttons.js","path":"js/comments-buttons.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/schedule.js","path":"js/schedule.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/pjax.js","path":"js/pjax.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/fancybox.js","path":"js/third-party/fancybox.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/pace.js","path":"js/third-party/pace.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/addtoany.js","path":"js/third-party/addtoany.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/quicklink.js","path":"js/third-party/quicklink.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/baidu-analytics.js","path":"js/third-party/analytics/baidu-analytics.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/google-analytics.js","path":"js/third-party/analytics/google-analytics.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/growingio.js","path":"js/third-party/analytics/growingio.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/matomo.js","path":"js/third-party/analytics/matomo.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/changyan.js","path":"js/third-party/comments/changyan.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/gitalk.js","path":"js/third-party/comments/gitalk.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqusjs.js","path":"js/third-party/comments/disqusjs.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/isso.js","path":"js/third-party/comments/isso.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/livere.js","path":"js/third-party/comments/livere.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/utterances.js","path":"js/third-party/comments/utterances.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/katex.js","path":"js/third-party/math/katex.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqus.js","path":"js/third-party/comments/disqus.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/chatra.js","path":"js/third-party/chat/chatra.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/mathjax.js","path":"js/third-party/math/mathjax.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/tidio.js","path":"js/third-party/chat/tidio.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/algolia-search.js","path":"js/third-party/search/algolia-search.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/local-search.js","path":"js/third-party/search/local-search.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/firestore.js","path":"js/third-party/statistics/firestore.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/lean-analytics.js","path":"js/third-party/statistics/lean-analytics.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/mermaid.js","path":"js/third-party/tags/mermaid.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/pdf.js","path":"js/third-party/tags/pdf.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/wavedrom.js","path":"js/third-party/tags/wavedrom.js","modified":0,"renderable":1},{"_id":"source/uploads/avatar.png","path":"uploads/avatar.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/_posts/Play-Windows-Classic-Games-on-macOS.md","hash":"040e46f61f4578ce74e1410931bf9990b7df8aa9","modified":1706279612382},{"_id":"source/_posts/git-log-to-markdown.md","hash":"4a3854bebd8b92e07bfea9b6450e0605f96f4ee0","modified":1700572681227},{"_id":"source/about/index.md","hash":"d3621b50bd1b70d729efb5dd75224976bbc12e62","modified":1706285485101},{"_id":"source/_posts/.DS_Store","hash":"c5c73f96d4ec2609d6a203ea73cc46972a644a24","modified":1706106488478},{"_id":"source/_posts/gitbook-basics.md","hash":"800a78a4e350f4e9e2ae494a3ffd9cd67f751d36","modified":1616468135257},{"_id":"source/_posts/hap-email-account-ssl-setup.md","hash":"04c9bf97eb8b3b4e116b8ec1324e58f1d11e764a","modified":1584977926305},{"_id":"source/_posts/hap-enable-new-language.md","hash":"8d1ad98e991c14483d3c51bc86ed42000d9ec280","modified":1584977895295},{"_id":"source/_posts/hap-i18n-irequest.md","hash":"2b49dc4aa4ff31d5f41516a36d939d4f2e18c365","modified":1584977885608},{"_id":"source/_posts/hexo-install-theme.md","hash":"f3b3b51920b87ba0da87279fc38234e98ca92bfc","modified":1703597583859},{"_id":"source/_posts/hexo-quickstart.md","hash":"85491b6943c8701db1926120a47a473a1092ec27","modified":1616468159518},{"_id":"source/_posts/hzero-service-match.md","hash":"7b8a1a9113d127b6eca5f3d3788a1f433f44c554","modified":1747491174515},{"_id":"source/_posts/install-k8s-using-kubeadm.md","hash":"d05bdce9724f9e392cfdafe812a0a06f3938ca05","modified":1584977866321},{"_id":"source/_posts/iterm2-omz-style-guide.md","hash":"52765b8e4530196a73896602fdbf1eb16803702e","modified":1584977751003},{"_id":"source/_posts/k8s-apps-admin.md","hash":"6b2842f50a57b23d3bff98dba82ae67a02b0aab5","modified":1591805190459},{"_id":"source/_posts/manage-kubeconfig.md","hash":"51b9d2ff40ff22e48a415199901cdd562659e947","modified":1585377402233},{"_id":"source/_posts/mirrors-collection.md","hash":"c248ceaa13b0291659242b1bb8bcf9854035067f","modified":1704287617015},{"_id":"source/_posts/node-gyp-rebuild-failed-on-catalina.md","hash":"cc32737cefeda0c968bbae9a420b72c02a67f458","modified":1584977840205},{"_id":"source/_posts/personal-notes-001.md","hash":"5a9f578db8fec1b7492344493a97ff6367063590","modified":1652365172918},{"_id":"source/_posts/personal-notes-002.md","hash":"c151de381a416f47284e45033716160ab1fa3404","modified":1703598603992},{"_id":"source/_posts/read-property-file-in-bash.md","hash":"d6ddec1eac210289c2880e885746538a9f6a9c62","modified":1706108171353},{"_id":"source/_posts/run-local-k8s-using-k3d.md","hash":"daf153bcfce9d2a5c5e345b39aacbdea7e2c35af","modified":1616654594697},{"_id":"source/_posts/run-local-k8s-using-kind.md","hash":"c05f2dc89cc48fda53328f7833799525324715bb","modified":1616597039234},{"_id":"source/_posts/self-signed-cert-for-domain.md","hash":"a322758a206f09bcd61e0d54423f97a36a4979b7","modified":1589834737398},{"_id":"source/_posts/memories-part-1.md","hash":"1b10278642fa8fe1a8e277a86fa9d645333cf920","modified":1729519851286},{"_id":"source/categories/index.md","hash":"9e9129480a2459bec8883d25c55f2ec57f628872","modified":1615388432528},{"_id":"source/tags/index.md","hash":"dc0a8c345e13058f83bc2aec04154900366dd5c5","modified":1615388418770},{"_id":"source/.DS_Store","hash":"7c1c45b412638d1225c75236cab46be9ad423aeb","modified":1729094733509},{"_id":"source/_posts/win11-install-key-steps.md","hash":"46401c5d533ff65209d83ed5d47bf26b3d2c8de9","modified":1747492560085},{"_id":"source/uploads/avatar.png","hash":"098f2d69de6a11ccc98845f715a28f693d72d651","modified":1703590309480},{"_id":"source/_posts/git-log-to-markdown/changelog-v1.0.3.sh","hash":"40d2cb5457a442e5858e5913451155ed864a0aea","modified":1615273589321},{"_id":"source/_posts/hap-enable-new-language/image-20181009103555564.png","hash":"11d126e2fa8b691b7589d7bd7662736a67735ffa","modified":1539052555000},{"_id":"source/_posts/read-property-file-in-bash/properties_pattern_02.png","hash":"50749def4b6932bcf64abfbd736d8f35344cd270","modified":1704643753243},{"_id":"source/_posts/read-property-file-in-bash/properties_pattern_01.png","hash":"77063c07c7f789a2869edd1e78fb8cbd6c3d0b36","modified":1704643706132},{"_id":"source/_posts/win11-install-key-steps/2025-05-17-21-19-21-image.png","hash":"c9c8cce9287e600f76f32ae05b1b29bf77a91b59","modified":1747487961984},{"_id":"source/_posts/win11-install-key-steps/2025-05-17-21-22-18-image.png","hash":"ccb0dde0a660a81deb947582773cad4f12f18de5","modified":1747488138257},{"_id":"source/_posts/win11-install-key-steps/2025-05-17-21-22-57-image.png","hash":"452bf339ca8127bd7a7b46b8ccbf09fe1eab2127","modified":1747488177525},{"_id":"source/_posts/win11-install-key-steps/2025-05-17-21-25-38-image.png","hash":"60f038df57a8d5941b366674cef92567349ef77c","modified":1747488338773},{"_id":"source/_posts/win11-install-key-steps/2025-05-17-21-23-55-image.png","hash":"22770740188a360bf0099170eb8e2423ef2f8bfe","modified":1747488235324},{"_id":"source/_posts/win11-install-key-steps/2025-05-17-21-27-15-image.png","hash":"59008af3dd5e7cd34a6a1ef9d1e01e192e4f3852","modified":1747488435139},{"_id":"source/_posts/win11-install-key-steps/2025-05-17-21-30-08-image.png","hash":"2a3e88a41e52beed8c36c56bfc8c133dcc6eeacc","modified":1747488608172},{"_id":"source/_posts/win11-install-key-steps/2025-05-17-21-33-07-image.png","hash":"683f866ccd5d6989bb61b7cc05fd6d74b562c26d","modified":1747488787409},{"_id":"source/_posts/Play-Windows-Classic-Games-on-macOS/regedit.png","hash":"58632c783eea39641dfca5439ab01900adeed9c9","modified":1616140820001},{"_id":"source/_posts/Play-Windows-Classic-Games-on-macOS/winecfg.png","hash":"88afb936665f95a4d93495d76ca3ead63b1cae98","modified":1616139792302},{"_id":"source/_posts/git-log-to-markdown/sample.png","hash":"5d4b61700adcc79e5e7a92dcbb6d2eff5391b1f6","modified":1615274890563},{"_id":"source/_posts/hap-email-account-ssl-setup/image-20181017162319708.png","hash":"f5e2a53122794a0ea56e416d75abf3b854dc27de","modified":1539764599000},{"_id":"source/_posts/install-k8s-using-kubeadm/demo.png","hash":"da1caf1fd04258ad94441f25aed55ae4adde8a69","modified":1517907506000},{"_id":"source/_posts/install-k8s-using-kubeadm/rc.png","hash":"4889b9c5fd0eeff6703c54047ca04ce8d79230e3","modified":1518073791000},{"_id":"source/_posts/run-local-k8s-using-k3d/localhost-8080.png","hash":"b9f785736963416feeb63a77b6430bc153f7ab0b","modified":1616654352936},{"_id":"source/_posts/win11-install-key-steps/2025-05-17-21-03-19-image.png","hash":"3d30c16c9706a9ce6747a1bd61fb2bd8c581c2a8","modified":1747486999284},{"_id":"source/_posts/win11-install-key-steps/2025-05-17-20-23-44-image.png","hash":"da614bcf3af93745abfd10906c3afe7ea4339d4f","modified":1747484624562},{"_id":"source/_posts/win11-install-key-steps/2025-05-17-21-08-24-image.png","hash":"19b4233a1318ff4779dcc9dcd4b09d4debf27381","modified":1747487304901},{"_id":"source/_posts/win11-install-key-steps/2025-05-17-21-10-39-image.png","hash":"bd71df20749168c5d8eddf855bc55548cf1975b0","modified":1747487439595},{"_id":"source/_posts/win11-install-key-steps/2025-05-17-21-11-37-image.png","hash":"8348f1e76e215beeb014aa9bf2bb0f6daedb7bad","modified":1747487497941},{"_id":"source/_posts/win11-install-key-steps/2025-05-17-21-12-35-image.png","hash":"04472f92ed069e15d8e92ba692e5fbfcbb7d0aac","modified":1747487555184},{"_id":"source/_posts/win11-install-key-steps/2025-05-17-21-17-04-image.png","hash":"7795770308b37434e5507da0b784cc514d911f99","modified":1747487824629},{"_id":"source/_posts/win11-install-key-steps/2025-05-17-21-31-57-image.png","hash":"2e520c5e179c821928510cec849eea8810a13958","modified":1747488717491},{"_id":"source/_posts/win11-install-key-steps/2025-05-17-21-28-06-image.png","hash":"d8b54a84ace217c7d2b7a6e259521358126c35c8","modified":1747488486761},{"_id":"source/_posts/install-k8s-using-kubeadm/dashboard-login.png","hash":"8433b767bc7258db87150a4fd8276f77af5d9922","modified":1518162050000},{"_id":"source/_posts/manage-kubeconfig/kubeconfig-structure.png","hash":"b1bebed82cd5408b2760acea402099f4763e807d","modified":1585373429916},{"_id":"source/_posts/win11-install-key-steps/2025-05-17-20-59-07-image.png","hash":"dd31c02f4b4caa94f87461ca97d6e9ff104d71c4","modified":1747486747855},{"_id":"source/_posts/win11-install-key-steps/2025-05-17-21-15-22-image.png","hash":"17d38e7bdd91cbfcb9dbf6492b11e34f00bae4a9","modified":1747487722843},{"_id":"source/_posts/win11-install-key-steps/2025-05-17-22-02-52-image.png","hash":"79cf924660ba94d7faedacfed000591a1980a4aa","modified":1747490572389},{"_id":"source/_posts/win11-install-key-steps/2025-05-17-21-51-10-image.png","hash":"eb9c3c1cf22dcb58c7085b6b236eb2c04c173166","modified":1747489870849},{"_id":"source/_posts/win11-install-key-steps/2025-05-17-21-59-59-image.png","hash":"d677ccdfe4365714bb4a0f632bc3a45497d9491a","modified":1747490399081},{"_id":"source/_posts/win11-install-key-steps/2025-05-17-22-02-06-image.png","hash":"6ea76d925fc1901e5efe3d27eeb0b302a3040379","modified":1747490526739},{"_id":"source/_posts/win11-install-key-steps/2025-05-17-22-01-32-image.png","hash":"ece8c7476f96620f210da67cb8b135f962df7899","modified":1747490492869},{"_id":"source/_posts/install-k8s-using-kubeadm/dashboard-home.png","hash":"9c3a57eb1056fec73947f8eca3704dc86efaab38","modified":1518162272000},{"_id":"source/_posts/hzero-service-match/2025-05-15-22-36-39-image.png","hash":"04ca165b21d025c33f3e0b2fa8dd7c0931571296","modified":1747319799235},{"_id":"source/_posts/win11-install-key-steps/2025-05-17-22-09-46-image.png","hash":"1fe8f846a06c9c48cd9e42c1bfd6815eb8e6995e","modified":1747490986687},{"_id":"source/_posts/win11-install-key-steps/2025-05-17-22-04-18-image.png","hash":"f5421051b0abded75a270978b6a441e1797a7ca9","modified":1747490658579},{"_id":"source/_posts/iterm2-omz-style-guide/image-20200322200414320.png","hash":"969551250018e4a4c813ac10fdf13c2822b1f4da","modified":1584878654322},{"_id":"source/_posts/Play-Windows-Classic-Games-on-macOS/d2.png","hash":"d108b2074cc3783d3ad54fdd5fa54a3ab134b542","modified":1706105866863},{"_id":"source/_posts/iterm2-omz-style-guide/image-20200322231555092.png","hash":"96116b7cc9fab0139e9543beeec6f7ef28413556","modified":1584890155092},{"_id":"source/_posts/install-k8s-using-kubeadm/rc.key","hash":"74e5bd883bafbc826a92cd687ff5bdfe77d2c6cf","modified":1518074754000},{"_id":"source/_posts/hexo-quickstart/image-20210311114700121.png","hash":"7dcd405c81fe70e0175d6a29c81d7bb3e2352aa7","modified":1615434420123},{"_id":"node_modules/hexo-theme-next/_vendors.yml","hash":"4f6046ceb1470be9ff334ede20b73871c951d845","modified":1703548176657},{"_id":"node_modules/hexo-theme-next/package.json","hash":"4b48877b223ec717e708540a2df03d64983c02ab","modified":1703548176568},{"_id":"node_modules/hexo-theme-next/_config.yml","hash":"dc190e9f1cdaf83d8c46ccaf2fae914944b8de1d","modified":1703548176657},{"_id":"node_modules/hexo-theme-next/LICENSE.md","hash":"68fc9a03d50fd4b5ea97092b05967d1819dea2c4","modified":1703548176571},{"_id":"node_modules/hexo-theme-next/README.md","hash":"d6820f46d03a93bd6dc8b10f49f58aec82ad2b06","modified":1703548176573},{"_id":"node_modules/hexo-theme-next/layout/index.njk","hash":"dd63e488ae8cc144335a5958acedf6a16edd7a92","modified":1703548176592},{"_id":"node_modules/hexo-theme-next/layout/_layout.njk","hash":"fc0a45112f2dcfc2642404e8934ea32a793c3bd7","modified":1703548176574},{"_id":"node_modules/hexo-theme-next/layout/category.njk","hash":"c68b7343d0f8145010f93351908cc36ef6212ec1","modified":1703548176582},{"_id":"node_modules/hexo-theme-next/layout/archive.njk","hash":"d759f4d2cf5ddc6875ea250113a00662c1caf6d1","modified":1703548176577},{"_id":"node_modules/hexo-theme-next/layout/page.njk","hash":"b0660b2af0ac7d3fda14ca4d9f2c9e79ef06c6f9","modified":1703548176597},{"_id":"node_modules/hexo-theme-next/docs/AUTHORS.md","hash":"a648823121563c34a177ae91f5a774b5e29f01a0","modified":1703548176569},{"_id":"node_modules/hexo-theme-next/layout/post.njk","hash":"0bfce9f133f501a9a4837257e3b862b3bbca15be","modified":1703548176602},{"_id":"node_modules/hexo-theme-next/docs/LICENSE.txt","hash":"f5b14f791b7cfa1d16da981d929152e088a5d1b8","modified":1703548176655},{"_id":"node_modules/hexo-theme-next/layout/tag.njk","hash":"9e16ba20c28a7f2c6bc75aa427f48122301a30aa","modified":1703548176604},{"_id":"node_modules/hexo-theme-next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1703548176568},{"_id":"node_modules/hexo-theme-next/languages/README.md","hash":"b2567e32805dda79601157351a07e5ca9fe01315","modified":1703548176573},{"_id":"node_modules/hexo-theme-next/languages/ar.yml","hash":"7d0f39e8684284a04bb9808521c87fecda8bd131","modified":1703548176658},{"_id":"node_modules/hexo-theme-next/languages/bn.yml","hash":"564bed75da6e05b11dce6164508f97a15e2fb6c2","modified":1703548176658},{"_id":"node_modules/hexo-theme-next/languages/de.yml","hash":"79b37df731c29665dee6cd7c90d278e1edfb6e24","modified":1703548176658},{"_id":"node_modules/hexo-theme-next/languages/eo.yml","hash":"e34bb33ae827bf2f0727088599a73bc64bdad1b0","modified":1703548176660},{"_id":"node_modules/hexo-theme-next/languages/en.yml","hash":"ba0fd79a2b1d8db01a034180556061745965ff05","modified":1703548176659},{"_id":"node_modules/hexo-theme-next/languages/es.yml","hash":"dffc63ef42e1266b88e0acf08994fd17a9908d53","modified":1703548176660},{"_id":"node_modules/hexo-theme-next/languages/fa.yml","hash":"f3ffc444599f4ac92d62e9ed00a1490ebc277d70","modified":1703548176661},{"_id":"node_modules/hexo-theme-next/languages/fr.yml","hash":"8ac44e58f71a38b7697a2f7f98a6971ed818cb5b","modified":1703548176661},{"_id":"node_modules/hexo-theme-next/languages/id.yml","hash":"929df147f4f17d638b07de5fe52ca13e2549ab1c","modified":1703548176662},{"_id":"node_modules/hexo-theme-next/languages/ja.yml","hash":"543222bfc516aab6c33e8534f807972ecb8943a9","modified":1703548176663},{"_id":"node_modules/hexo-theme-next/languages/it.yml","hash":"16d716ecfd748def2f6486ef5a82d0ab7ceb4890","modified":1703548176663},{"_id":"node_modules/hexo-theme-next/languages/nl.yml","hash":"3cb3687696635ec71b4ca40c5fc43b56acc8843e","modified":1703548176663},{"_id":"node_modules/hexo-theme-next/languages/ko.yml","hash":"d345a303310c8a5f4836c3683f3580f861ebd1b4","modified":1703548176663},{"_id":"node_modules/hexo-theme-next/languages/pt-BR.yml","hash":"76b8576ce228d540a16b1f0af5af2cce20923194","modified":1703548176663},{"_id":"node_modules/hexo-theme-next/languages/pt.yml","hash":"70de366e10ea584ba039d40d6b35ac97f93454ad","modified":1703548176664},{"_id":"node_modules/hexo-theme-next/languages/ru.yml","hash":"c6d8de0ff7d8148d09993257cfd3b7aca755696c","modified":1703548176666},{"_id":"node_modules/hexo-theme-next/languages/th.yml","hash":"6829e998b39f8f143e20b276bb1f62d95a29de58","modified":1703548176666},{"_id":"node_modules/hexo-theme-next/languages/tk.yml","hash":"511726054873f6f8d7ce0d2e803f6731de0ddbe7","modified":1703548176669},{"_id":"node_modules/hexo-theme-next/languages/tr.yml","hash":"a57e4ed089b893a95f5e1ecff17ce625165f4d46","modified":1703548176669},{"_id":"node_modules/hexo-theme-next/languages/uk.yml","hash":"ff537047b4b4c3ca9a7b64fa7f428a9942751eeb","modified":1703548176669},{"_id":"node_modules/hexo-theme-next/languages/vi.yml","hash":"7ebcba5e1128784195e4681dffc9d34c4e873fec","modified":1703548176669},{"_id":"node_modules/hexo-theme-next/languages/si.yml","hash":"2d712eedf3f60d04d36c3108cf5a12e2a52e875c","modified":1703548176666},{"_id":"node_modules/hexo-theme-next/languages/zh-TW.yml","hash":"4695c87d6b81b3a23d16ad6513d9eaa925f8d8ad","modified":1703548176670},{"_id":"node_modules/hexo-theme-next/languages/zh-CN.yml","hash":"741d7efe0262c9cdc2c648014b55599665d90f6b","modified":1703548176669},{"_id":"node_modules/hexo-theme-next/languages/zh-HK.yml","hash":"88ea50eeb9097ab4a87a44981a102d8594feb064","modified":1703548176670},{"_id":"node_modules/hexo-theme-next/layout/_macro/post.njk","hash":"65e9112fb7eb26d2880db624554a99aca028140b","modified":1703548176602},{"_id":"node_modules/hexo-theme-next/layout/_macro/post-collapse.njk","hash":"abda600685ee972e1f6b7a2dcc56f13e2daa6263","modified":1703548176599},{"_id":"node_modules/hexo-theme-next/layout/_scripts/index.njk","hash":"6668878a0f9a1166c6a879755f54a08d942da870","modified":1703548176590},{"_id":"node_modules/hexo-theme-next/layout/_macro/sidebar.njk","hash":"547c62ab14d9e05d2d9116db9048a677fbe1fb6d","modified":1703548176603},{"_id":"node_modules/hexo-theme-next/layout/_third-party/pace.njk","hash":"d7ad5714079f7f65446f880baf14722435ca9061","modified":1703548176596},{"_id":"node_modules/hexo-theme-next/layout/_third-party/fancybox.njk","hash":"844559f46e2ff1c8be234d5763703106e2072a7b","modified":1703548176587},{"_id":"node_modules/hexo-theme-next/layout/_scripts/vendors.njk","hash":"be80b9fe415a9a09d74c28e230995fd292dfc123","modified":1703548176605},{"_id":"node_modules/hexo-theme-next/scripts/events/index.js","hash":"bd9ea82376cd87df611ea3ae077875c7c595a3df","modified":1703548176554},{"_id":"node_modules/hexo-theme-next/scripts/filters/locals.js","hash":"9eb5310664759931287dd28ea39165dfb67f12ed","modified":1703548176556},{"_id":"node_modules/hexo-theme-next/scripts/filters/default-injects.js","hash":"872f01cb10e422a648ea505436532e776e92926b","modified":1703548176551},{"_id":"node_modules/hexo-theme-next/scripts/filters/minify.js","hash":"447db39d17775b2bd18d8af9c9d65b7b8449f751","modified":1703548176558},{"_id":"node_modules/hexo-theme-next/scripts/filters/post.js","hash":"fdc8a0af90035e89c3fcb754a0eb189b8951a2bc","modified":1703548176561},{"_id":"node_modules/hexo-theme-next/scripts/tags/button.js","hash":"c6ad2ed544fbb25ecb5d820c36e76302504271b7","modified":1703548176548},{"_id":"node_modules/hexo-theme-next/scripts/tags/center-quote.js","hash":"92c19d796bdb3320df9caea59bf52df7a95d9da9","modified":1703548176548},{"_id":"node_modules/hexo-theme-next/scripts/tags/caniuse.js","hash":"935a311142a409c1896b3ae3f01fe7a9e2db1134","modified":1703548176548},{"_id":"node_modules/hexo-theme-next/scripts/tags/group-pictures.js","hash":"9ed799c329abf830f623689d7e136991256a24ca","modified":1703548176554},{"_id":"node_modules/hexo-theme-next/scripts/tags/label.js","hash":"8a73348186113bae0a51ea2f891c1bb882fab05a","modified":1703548176556},{"_id":"node_modules/hexo-theme-next/scripts/tags/index.js","hash":"1f6aba7820f1fb58b61969485148db21846e1aa9","modified":1703548176554},{"_id":"node_modules/hexo-theme-next/scripts/tags/link-grid.js","hash":"18a483c2d5afd701f6080ffdddf2d1321370336c","modified":1703548176556},{"_id":"node_modules/hexo-theme-next/scripts/tags/mermaid.js","hash":"4fb01ca650fa8b256b8d48f50dc1b18350bd3d6d","modified":1703548176557},{"_id":"node_modules/hexo-theme-next/scripts/tags/note.js","hash":"7b94ddb46b7d4b0fe815f2fbe4bd375f07f55363","modified":1703548176560},{"_id":"node_modules/hexo-theme-next/scripts/tags/pdf.js","hash":"344636b6fd7e27e8831c1e194039afc0d61931cd","modified":1703548176561},{"_id":"node_modules/hexo-theme-next/scripts/tags/tabs.js","hash":"0eabe51da40b4b13e16419c8fe02452d9a4fef73","modified":1703548176562},{"_id":"node_modules/hexo-theme-next/scripts/tags/video.js","hash":"2ee926448583be8f95af1f2884ae2c9c4830151d","modified":1703548176567},{"_id":"node_modules/hexo-theme-next/scripts/tags/wavedrom.js","hash":"b44dfeeb58b41945d469141787f3dbce4b117d08","modified":1703548176567},{"_id":"node_modules/hexo-theme-next/scripts/helpers/font.js","hash":"3394185a7f0393c16ce52c8028f90da3e9239c55","modified":1703548176553},{"_id":"node_modules/hexo-theme-next/scripts/helpers/engine.js","hash":"d292b78485e8e8055712b0ed6de7cf559c5fbdcd","modified":1703548176552},{"_id":"node_modules/hexo-theme-next/scripts/helpers/navigation.js","hash":"78107021101553c3d23e89290f7530b60cf4aa86","modified":1703548176559},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-config.js","hash":"ead37e9167b682f1fa34b5401c3050e18c7ee4a3","modified":1703548176560},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-url.js","hash":"6281d47c1de98eb38f3aa0f6df29bbb19d412173","modified":1703548176560},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-paginator.js","hash":"e86c764b546e4fbb87970cabc4135a56f9ef9fe1","modified":1703548176560},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-vendors.js","hash":"957241c28796ff352de7f4cffba7bb289b043586","modified":1703548176560},{"_id":"node_modules/hexo-theme-next/layout/_third-party/quicklink.njk","hash":"0efed71ed530447718c4ea5bbd5fc8695b0b0d5f","modified":1703548176602},{"_id":"node_modules/hexo-theme-next/layout/_third-party/index.njk","hash":"dfd7cdd6ba89f8c3deabc27726c7a350cadafd11","modified":1703548176591},{"_id":"node_modules/hexo-theme-next/layout/_third-party/addtoany.njk","hash":"ef64c6bfb8540cd874701236b9be47db2496e98e","modified":1703548176575},{"_id":"node_modules/hexo-theme-next/source/css/_colors.styl","hash":"3c6798c10cc220d83481cb3f3782e78558cee789","modified":1703548176611},{"_id":"node_modules/hexo-theme-next/source/css/_mixins.styl","hash":"83647a6207333b9609ba90b0946b3fa9548e6381","modified":1703548176617},{"_id":"node_modules/hexo-theme-next/source/css/main.styl","hash":"921a58577f411cf4eb5cfd66db0a241f8f88578c","modified":1703548176647},{"_id":"node_modules/hexo-theme-next/source/css/noscript.styl","hash":"dadc81256afb127b77eac6763d5ee0ec9c77f0a3","modified":1703548176649},{"_id":"node_modules/hexo-theme-next/layout/_partials/comments.njk","hash":"d0c470b0f6690aa217e9ada848c5e2e73fb27c6f","modified":1703548176586},{"_id":"node_modules/hexo-theme-next/layout/_partials/footer.njk","hash":"fbf8232cacf0df87e88e74860be66c9f86018302","modified":1703548176587},{"_id":"node_modules/hexo-theme-next/layout/_partials/languages.njk","hash":"e43f22198cccb5f6e306b1ce0d28d12a4fb891f8","modified":1703548176592},{"_id":"node_modules/hexo-theme-next/layout/_partials/pagination.njk","hash":"bc719473ed5948ab6859449d60b8d36cfc1542b4","modified":1703548176598},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"12a6631617695504d5cf2a94b57d87bd331bef6f","modified":1703548176570},{"_id":"node_modules/hexo-theme-next/layout/_partials/widgets.njk","hash":"e7f988ecddb2159313699a00827a45eca5622bd4","modified":1703548176606},{"_id":"node_modules/hexo-theme-next/docs/ru/README.md","hash":"29c89a41b371f893e56c87ea61adabc444ec58cc","modified":1703548176571},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/README.md","hash":"12a3e96581964a22b474cc739675d52ef93ff932","modified":1703548176572},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/CONTRIBUTING.md","hash":"a089f7a8368ab0b7d7b9b7ec0ac3767a453435df","modified":1703548176570},{"_id":"node_modules/hexo-theme-next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1703548176607},{"_id":"node_modules/hexo-theme-next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1703548176607},{"_id":"node_modules/hexo-theme-next/source/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1703548176544},{"_id":"node_modules/hexo-theme-next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1703548176607},{"_id":"node_modules/hexo-theme-next/source/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1703548176550},{"_id":"node_modules/hexo-theme-next/source/js/bookmark.js","hash":"0f563ffbf05fad30e854e413ab17ff7164ab5a53","modified":1703548176547},{"_id":"node_modules/hexo-theme-next/source/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1703548176551},{"_id":"node_modules/hexo-theme-next/source/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1703548176655},{"_id":"node_modules/hexo-theme-next/source/js/motion.js","hash":"770d63c26f22705311028a36b52e999cc8a2da82","modified":1703548176558},{"_id":"node_modules/hexo-theme-next/source/images/logo.svg","hash":"099e11ab995a2c8981427a85476d082609848c77","modified":1703548176655},{"_id":"node_modules/hexo-theme-next/source/js/next-boot.js","hash":"745bd828205da7e5fbd3f860cc3697097630f5f3","modified":1703548176559},{"_id":"node_modules/hexo-theme-next/source/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":1703548176550},{"_id":"node_modules/hexo-theme-next/source/js/pjax.js","hash":"b03ba78c6916ad2f390d55bc1bc18fafb64b0ebf","modified":1703548176561},{"_id":"node_modules/hexo-theme-next/source/js/schedule.js","hash":"a1333258726caf84f368a8f8454639c7dc1626bb","modified":1703548176562},{"_id":"node_modules/hexo-theme-next/layout/_third-party/chat/chatra.njk","hash":"d7263fca16d0278ccf1f6aa1c6df6902a6344a09","modified":1703548176585},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/disqus.njk","hash":"9375b19a89b7fa9474e558d085af5448d4c5c50c","modified":1703548176587},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/changyan.njk","hash":"d1c950f8fbdf85e7a3eae5463767a89e858e8220","modified":1703548176584},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/gitalk.njk","hash":"b63b7e2ede0d3e66e732fa1a06bda9b19e1e85d4","modified":1703548176587},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/disqusjs.njk","hash":"0749cb6902baecdfd01f779a2a2513f6d2f6a823","modified":1703548176587},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/isso.njk","hash":"64cc3bdaf644fd32c0d0a247f29f5b6904da9af3","modified":1703548176592},{"_id":"node_modules/hexo-theme-next/layout/_third-party/chat/tidio.njk","hash":"02aab857c27fc103216029be991688b12a73a525","modified":1703548176604},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/livere.njk","hash":"3b13b09fba84ec6000886890a6710736a2b8fafe","modified":1703548176592},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/baidu-analytics.njk","hash":"6215309aee028dcb734452beec448c5afb6c63fc","modified":1703548176578},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/cloudflare.njk","hash":"a5b8297c2c383124dd6a56e256ecc0c0dcf489be","modified":1703548176586},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/growingio.njk","hash":"8afaa772c390bd9d53a5cff9645ac3168334eb98","modified":1703548176588},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/google-analytics.njk","hash":"d89066ff53879693f023e540d59c86137172c529","modified":1703548176588},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/utterances.njk","hash":"5a94032bc3512a10ad4328fc19ec07b819a1d687","modified":1703548176605},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/matomo.njk","hash":"4e89648a8ec8194c5823064cbca39c938a799006","modified":1703548176593},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/index.njk","hash":"f900306497b133e8b098bd9f4b96b93d1d96c185","modified":1703548176591},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/plausible.njk","hash":"ef9f2bb7110507f1c4336800af9157d5fa9765bd","modified":1703548176599},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/index.njk","hash":"abf37fc55aa86702118e8fdf5bf2d389dd589aa0","modified":1703548176591},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/mathjax.njk","hash":"3677017fd4572b158311f5f5d870590ab25184e0","modified":1703548176593},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/katex.njk","hash":"1ebf658690468ea197bdd0416eb7cfa4bd0b083a","modified":1703548176592},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/microsoft-clarity.njk","hash":"9dc00fcb0a05899f048eace9f9160b78956655d5","modified":1703548176596},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/umami.njk","hash":"3343750682fbd8535e50f8129be3003ad26015b4","modified":1703548176604},{"_id":"node_modules/hexo-theme-next/layout/_third-party/search/algolia-search.njk","hash":"24ed76e0c72a25ac152820c750a05826a706b6f4","modified":1703548176577},{"_id":"node_modules/hexo-theme-next/layout/_third-party/search/localsearch.njk","hash":"e45ea3542cdc9ed7ec8447b5e6f35df4c5e82758","modified":1703548176593},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/config.js","hash":"9ec51eb61f7fee612ffc5252f489003a0fa301fc","modified":1703548176551},{"_id":"node_modules/hexo-theme-next/layout/_third-party/tags/wavedrom.njk","hash":"02202bf563fb5eedde2ccad4d6c5b9109d30a703","modified":1703548176605},{"_id":"node_modules/hexo-theme-next/layout/_third-party/tags/pdf.njk","hash":"2c81984cc4f5123103460442f6e046f5b6c97127","modified":1703548176598},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/firestore.njk","hash":"d32ebe94560fa95824478ebbff531bffc47b194d","modified":1703548176587},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/highlight.js","hash":"6aec7b2c38c50989a23bfaa0d560e75c7f553e12","modified":1703548176554},{"_id":"node_modules/hexo-theme-next/layout/_third-party/tags/mermaid.njk","hash":"099e031f52fb8e47b3af5b2684737efc9e643ee7","modified":1703548176595},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/busuanzi-counter.njk","hash":"a4bc501da0f22f7e420f0ca47e83988ce90b1368","modified":1703548176580},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/navigation.js","hash":"dd3562686d95a50375e6fd32e717ccb0d99c1e3d","modified":1703548176559},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/injects.js","hash":"d987709267a1bc6e5014411e9983d7c49c102c16","modified":1703548176555},{"_id":"node_modules/hexo-theme-next/source/js/utils.js","hash":"d775148c2bf20c028622af5609a788167352bf1e","modified":1703548176565},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/utils.js","hash":"6853e5433e3eaa19ea43fa20b08d956ba4cec4ac","modified":1703548176562},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/vendors.js","hash":"464db1e7182e5b9cdbd32e8b5368d5e683b1d9c7","modified":1703548176566},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/common.js","hash":"19a402a225c31edffc50f202a14e0d582d3db23e","modified":1703548176550},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/index.njk","hash":"568ddf7955d11d93fb5e842b403a7ac8b1b7fdb1","modified":1703548176591},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/changyan.js","hash":"5798cfc8f63665031dd3e01debed051628cec319","modified":1703548176549},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/default-config.js","hash":"93ee5f9109dad885dc38c49bcee630c10f9dce6e","modified":1703548176551},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/disqus.js","hash":"7f71d6b271ba65ff333d5682e7575711d368c0d2","modified":1703548176551},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/gitalk.js","hash":"7bb7dafdd7f6bca8464b54e17e552ce7f1714195","modified":1703548176553},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/livere.js","hash":"5a07d8bb52bc1d51a624ca8db54be144566c306b","modified":1703548176556},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/isso.js","hash":"ff8b5b5145220a17d0ecd9508ba9bd2d3b2da47d","modified":1703548176555},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/lean-analytics.njk","hash":"2446e748cdc102c78492216319ac02148db7daf6","modified":1703548176592},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/utterances.js","hash":"d3bded697bc32dace689d2a6dfb6eb7514169d15","modified":1703548176566},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/disqusjs.js","hash":"a600a98e7436edeb31e291abca359885567df3c9","modified":1703548176552},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Pisces.styl","hash":"48f4f277946a168d0db1ea02804e85c22ca2c7db","modified":1703548176651},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Mist.styl","hash":"a1418c9dc8c0f1a0ad4ded0f4627c45bf0db1a10","modified":1703548176648},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Gemini.styl","hash":"96e0a7c2a65ce68215e17e369085b2ea2f1334f2","modified":1703548176628},{"_id":"node_modules/hexo-theme-next/layout/_partials/head/head-unique.njk","hash":"8da52a144060db1a0a088ccb2e6cc8376d1fce70","modified":1703548176589},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Muse.styl","hash":"e3be898f5ebcf435a26542653a9297ff2c71aeb0","modified":1703548176648},{"_id":"node_modules/hexo-theme-next/layout/_partials/head/head.njk","hash":"5388b157bba4a40b9312f4a45c6678974ccf0837","modified":1703548176589},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/page-header.njk","hash":"7ed4f102a1825195cff8d7995bf9219f323a9034","modified":1703548176597},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/categories.njk","hash":"17156d99941f28a225951ffdcfa9a115e20dc2d2","modified":1703548176580},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/schedule.njk","hash":"0f4bc8e257da60f77c0c1738607b2bde55810684","modified":1703548176603},{"_id":"node_modules/hexo-theme-next/source/css/_variables/base.styl","hash":"c4fc4e862d09221265ab1466085f057be2ad2e4d","modified":1703548176620},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/tags.njk","hash":"a18d1598e36cc72f2b0b24c3cc3c5990dfaa3254","modified":1703548176604},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/breadcrumb.njk","hash":"89825e75cc45e9709fa6ba89883669eedaff6f46","modified":1703548176580},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/brand.njk","hash":"dd9c4c03e99dfde0dfb8edefcb2c933f2f560efc","modified":1703548176579},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/index.njk","hash":"650de421a8ce4cf685428ffbe0087ff84cbd1356","modified":1703548176590},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/menu-item.njk","hash":"41a8b0cc16f60fa085cb719d07216d86b6bc4bf8","modified":1703548176595},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-followme.njk","hash":"c1e33b4889f75acc490af3c8bde0ec56c518ff41","modified":1703548176600},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/menu.njk","hash":"ee6fc2f111572d3eeab0a2fecbb2d6b3e37ab26b","modified":1703548176595},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-copyright.njk","hash":"bfff923526d6800218f08dba6ce0bbf5c17755fd","modified":1703548176600},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-related.njk","hash":"e0986db00a0201dd3c60570f964829c84ba5bc68","modified":1703548176601},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-share.njk","hash":"16696990e4ce65fc8db18c4635082a5d5d06ff07","modified":1703548176602},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-meta.njk","hash":"9fa47e4fb342811da590ee4adc91cf81118c0a39","modified":1703548176601},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-reward.njk","hash":"e8b8a7c41e9ec612d0c0c73419529d55d1c16256","modified":1703548176601},{"_id":"node_modules/hexo-theme-next/layout/_partials/sidebar/site-overview.njk","hash":"bc5708e38b6070dff0cab6bf9480971017ce4dda","modified":1703548176603},{"_id":"node_modules/hexo-theme-next/layout/_partials/search/index.njk","hash":"8f6f256ab3b351ffc80f1f3f1d9834e9a7cfac31","modified":1703548176590},{"_id":"node_modules/hexo-theme-next/layout/_partials/search/algolia-search.njk","hash":"efb2b6f19df02ba5ae623a1f274fff52aed21e6f","modified":1703548176575},{"_id":"node_modules/hexo-theme-next/source/js/schemes/muse.js","hash":"ba7ba2c129d1f240c6a22cec3e53f3f22af64b6b","modified":1703548176559},{"_id":"node_modules/hexo-theme-next/source/js/third-party/fancybox.js","hash":"819f382c561fe5ec23c67cc5fabd63dd1cc22dc1","modified":1703548176553},{"_id":"node_modules/hexo-theme-next/layout/_partials/search/localsearch.njk","hash":"661f7acae43f0be694266323320f977d84119abe","modified":1703548176592},{"_id":"node_modules/hexo-theme-next/source/js/third-party/pace.js","hash":"0ef04218b93561ba4d0ff420d556c3d90a756d32","modified":1703548176561},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/sub-menu.njk","hash":"06480d8ec5f0b87eafd47f082f07968d7282dd5c","modified":1703548176604},{"_id":"node_modules/hexo-theme-next/source/js/third-party/quicklink.js","hash":"eed02e6fced8e5a653077205d4d4d7834ca71472","modified":1703548176561},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_menu.styl","hash":"fb550935d374e0bdf1097fce187337dc05cad3e1","modified":1703548176617},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_layout.styl","hash":"fa4fd8f76464e214fb7318f325b13c2b62f4b478","modified":1703548176615},{"_id":"node_modules/hexo-theme-next/source/js/third-party/addtoany.js","hash":"5276c8f78ee562a8965216dc67d762e59cb4a9f2","modified":1703548176545},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_header.styl","hash":"dafc6d23c80d6fe3e55a7711e94210d2479b629a","modified":1703548176612},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_posts-expand.styl","hash":"485d23ccb42c0d0c8ead7ea8930dd3e06d79a285","modified":1703548176618},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_menu.styl","hash":"82cda756f5b7092df2eee6641b9786df71623bdb","modified":1703548176617},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_header.styl","hash":"3fbfab591f280e2e7f3b0265901c93bc4bd137ed","modified":1703548176613},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_layout.styl","hash":"6569a6640f79d247a8235b3914772c0e2f99ead2","modified":1703548176617},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Gemini/index.styl","hash":"9dfe853c901bdc52fc950bacdf15484dbb9bf140","modified":1703548176646},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/index.styl","hash":"ab16a3dcdc0393b9b582ef59dcc13db9320e917c","modified":1703548176646},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1703548176618},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_sidebar.styl","hash":"547c0b5cd5e7ea10d21863d13a6b16579a49396c","modified":1703548176618},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_header.styl","hash":"ac2dc0ce9c775a83ef7132ae957b54539366ac9c","modified":1703548176614},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1703548176646},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_menu.styl","hash":"72dc825c50357402c342d62ab60fc0c478ab6bc1","modified":1703548176617},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_sidebar.styl","hash":"91dbf3ca5c3a613d4e30618c120da535bf2d0336","modified":1703548176618},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_layout.styl","hash":"26a0cba1eee5de45a45a5e14e17707f905390512","modified":1703548176617},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/index.styl","hash":"8000075b227749a7495eaf417cac6ccfbe441580","modified":1703548176646},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"778ed2ad5643b93970c95626b325defeb586733f","modified":1703548176618},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/base.styl","hash":"d0a7c99095f490b0d2ed6b1be43d435960798cec","modified":1703548176620},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/index.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1703548176640},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/pagination.styl","hash":"f4228c759db4a650c8d38745c2edd1dc83c45687","modified":1703548176650},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/comments.styl","hash":"e4fecc889ba3317a64e9abba5842c79dff9b7827","modified":1703548176625},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tables.styl","hash":"e840b23d33023e6d45e018f6e84b683dd56efd8d","modified":1703548176654},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1703548176547},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1703548176649},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/toggles.styl","hash":"782ee1fc5e669d3ddbfeb82b73ad7fe561f1a4fb","modified":1703548176655},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/google-analytics.js","hash":"def07bcc7c17d8a0caad177fb1dd2f3a5e5b3536","modified":1703548176554},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":1703548176554},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/index.styl","hash":"8e34df131830d4fa3725e4590a672ba1cf1903e5","modified":1703548176637},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/matomo.js","hash":"c6a25b26a1443caa70b47fd3dfa282271574deb5","modified":1703548176557},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/mobile.styl","hash":"1dbf2c339adcd27026c3a2ded32ee91ce08cea26","modified":1703548176648},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/index.styl","hash":"2298e521253b3bf376a2412271bc2a7d305051f3","modified":1703548176629},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/back-to-top.styl","hash":"7664491542046df9a3887cf40a06e00c0b4086a9","modified":1703548176619},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/reading-progress.styl","hash":"90a86045a33c1bae49fc2f6fa1e1b53170c7f77b","modified":1703548176652},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/buttons.styl","hash":"a042571d85ff7265f799004239a45f36b716b8a6","modified":1703548176624},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1703548176554},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqusjs.js","hash":"1e826dea3f684c0515f362dc1352447a1f0eae71","modified":1703548176552},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":1703548176555},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/changyan.js","hash":"260d1a77d6a3bb33a579d3e4cca1997003e799b5","modified":1703548176549},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":1703548176556},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":1703548176566},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":1703548176555},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqus.js","hash":"da361917d65e5dca8362f8cdeb6c8cc0e8316cec","modified":1703548176552},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/mathjax.js","hash":"5c749b9c1c3bb738122d0516211ecff6496d4907","modified":1703548176557},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":1703548176550},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/algolia-search.js","hash":"fdb7b7cef1a147d897e7f7cd8903b58368ec2062","modified":1703548176546},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1703548176562},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/local-search.js","hash":"4536cb6d0a9bbaaa86fab3fa0101f6a3a3ec5a76","modified":1703548176556},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/firestore.js","hash":"6e0682bb42170d61b13b786295f45f9c785f8b73","modified":1703548176553},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/lean-analytics.js","hash":"835cbf54c49ef1327f47df70ff2636ad36b6f57d","modified":1703548176556},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1703548176561},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/mermaid.js","hash":"6bf821310342c5b87a631873e7650a475a0765f1","modified":1703548176557},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/wavedrom.js","hash":"40dcd10df6edf124088c329346e0cc0bdac74ef1","modified":1703548176568},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"f634f94828620e88c3f5a8db56f7944f6ba232b0","modified":1703548176626},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/highlight/fold.styl","hash":"42a0b65491ad85438596b3fe0b7f23973e4cef34","modified":1703548176628},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"d6418fd2bbfba7b73ddf11ec62db9637fdf5d8af","modified":1703548176621},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/highlight/index.styl","hash":"138f78147bc6bd6005f329ada34dc79b7625542d","modified":1703548176640},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"393ff96234e4196b569d4b11496774eb78e147de","modified":1703548176629},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/label.styl","hash":"debee14539272fbe3835a7d3853af2230baa3501","modified":1703548176646},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/index.styl","hash":"22cd37bd5df9972d5074710896aba4424ad5161c","modified":1703548176645},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/link-grid.styl","hash":"7f8a7345e6537a62cd9e9a94c8f7065b541d9b04","modified":1703548176647},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/mermaid.styl","hash":"48d35dba575a7c9e8845b16652e76b7d4a4646de","modified":1703548176648},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b6654a1d7cf82577d8263faffee8af3ad4a5c0e8","modified":1703548176651},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/note.styl","hash":"98d4c20aff0f0fcfe1824017fb06ab21ef0d218e","modified":1703548176650},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/tabs.styl","hash":"33dd6ad015dde65fd46f34961655442e8e82b52e","modified":1703548176654},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/wavedrom.styl","hash":"af113411ad9cca7674177be36af8dd399680834d","modified":1703548176655},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/bookmark.styl","hash":"e74f4bb47a101b014ee2a1783c87f3b87323f9a0","modified":1703548176623},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/github-banner.styl","hash":"38c64c2d04e46848382bfa246a0e9c508294767b","modified":1703548176629},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/footer/index.styl","hash":"4e967702cf4c637132346bc74ec8854426f1a68c","modified":1703548176635},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/site-nav.styl","hash":"bf3ad8b4268f763a1e26377681644887694bc009","modified":1703548176654},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/menu.styl","hash":"bbbc40b03cb299d2a6a568f329b2ce98e1cdc430","modified":1703548176647},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/index.styl","hash":"6e0d0796ef7fbbb62ffdfb448753a850de82c74f","modified":1703548176635},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/site-meta.styl","hash":"a851e9d5aefcd027c95eeb323860b6da70f202d1","modified":1703548176654},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/index.styl","hash":"da5e88f8debd5ac8d7af5c6ba6240df66104955f","modified":1703548176640},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"5b38ac4a0f1ade0e681aff0e3366c481d9cf3dcd","modified":1703548176653},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/related-posts.styl","hash":"b05908f04ef95f2d91e6eba89b12411c378d050f","modified":1703548176652},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"0847400d8579b0a2dd1bf662c78954c10adf2680","modified":1703548176653},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"c6a27beb3f741211a14576026f3b4cfc44cc6407","modified":1703548176653},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"46eece42510c2c89bb9209afb0262ad76a4b0b36","modified":1703548176653},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"c2e354a565c8c1b32bd0ceacc972b17982758b67","modified":1703548176654},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"24752d145c6fb8f5344dca9c7b9640839c02e009","modified":1703548176654},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/breadcrumb.styl","hash":"8afdc311c6b8db121758371f95cf1c5e77354f42","modified":1703548176624},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"9a7c71560fbdc936ad4e736fe15063ea3e8a644b","modified":1703548176654},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/site-state.styl","hash":"26dd0adfcb1db6df29c6090c8d7e9b5a43583fb0","modified":1703548176654},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/tag-cloud.styl","hash":"1a81d1a71fcf0699629ce6e72dfd0a15f3a2dd0a","modified":1703548176655},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/categories.styl","hash":"b6e2eb1550a7845cb2adf86081a4ab6c7bde1e68","modified":1703548176625},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/schedule.styl","hash":"6b816c2511242ee503fb5f34cd3e4dcdafc06b85","modified":1703548176653},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/index.styl","hash":"098d4bd034e986fcf7e443eac4fc2193935461b7","modified":1703548176630},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/index.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1703548176629},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-body.styl","hash":"56d5b7ff73f466c9ae54f7204ae899281295d749","modified":1703548176651},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-followme.styl","hash":"1ecfd64507954810b07a9d21fb5305b5378feda0","modified":1703548176651},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-gallery.styl","hash":"aa366d37389760c8595529b850f461569577a1c5","modified":1703548176652},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-collapse.styl","hash":"7369928305330c73ae0b3f063a681a8384d8fde4","modified":1703548176651},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-nav.styl","hash":"9ac6f477177264c26a46e8333b8456720a0444dc","modified":1703548176652},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-footer.styl","hash":"11497388f124bfbb4001495a67d3629a9f618405","modified":1703548176651},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-header.styl","hash":"1191f1bfa5c43e54be8e5b3cc0d802984e161747","modified":1703548176652},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-widgets.styl","hash":"ebfba158a0a4af3d1dabcacbc58986664de52140","modified":1703548176652},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/disqusjs.styl","hash":"877a537d5b95beb048142e4fdee6f17e6ef9c7bb","modified":1703548176628},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-reward.styl","hash":"04cf4a69537fc14d3b8904f965d283356853847f","modified":1703548176652},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/gitalk.styl","hash":"8f094c4ac17e2ab45569b12d157747f9c7333c12","modified":1703548176629},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/search.styl","hash":"e72799ce3f9b79753e365b2f8c8ef6c310668d4a","modified":1703548176653},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/index.styl","hash":"54d12e2c5d9982f7b9e5b23be5133954a8514e9d","modified":1703548176630},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/utterances.styl","hash":"56d90ae0559caa55b75f3c300ff2711f9ed65fc4","modified":1703548176655},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/math.styl","hash":"9d995eb4871a6c273d9d51558676a1fdabf69e72","modified":1703548176647},{"_id":"source/_posts/win11-install-key-steps/2025-05-17-22-11-25-image.png","hash":"86896e73417f02879981bfdc56045588ead73989","modified":1747491085392},{"_id":"public/search.xml","hash":"430c00d116270973f7108aeb5cf90fc11aca4848","modified":1747492567989},{"_id":"public/about/index.html","hash":"95b1583fcc47f6a16437ac87c93bb1e5937222bd","modified":1747491272497},{"_id":"public/categories/index.html","hash":"4791ff9b5d7f8672a2d9a12dcfec666328129bde","modified":1747491272497},{"_id":"public/tags/index.html","hash":"05a658dcdad26a1f22371b306a030b8907ccc585","modified":1747491272497},{"_id":"public/2025/05/17/win11-install-key-steps/index.html","hash":"4bf0502178ef75b947ed1252b463f788420a2a64","modified":1747492567989},{"_id":"public/2025/05/15/hzero-service-match/index.html","hash":"533cb6adc2c58bf7edc23d99e8ff37cb924b04ad","modified":1747491272497},{"_id":"public/2024/10/21/memories-part-1/index.html","hash":"a604c9c5fff989b2735d935fd2c87930d2e848ee","modified":1747491272497},{"_id":"public/2023/12/26/hexo-install-theme/index.html","hash":"e249e64c0fd86d3c6f0f2992825f8fbe56c5502f","modified":1747491272497},{"_id":"public/2023/12/20/read-property-file-in-bash/index.html","hash":"290aac1b7271ebdc12f864064c7db0b955023997","modified":1747491272497},{"_id":"public/2023/11/21/mirrors-collection/index.html","hash":"60a9c25db9276a961a033afe1a29b1aa33c7f9eb","modified":1747491272497},{"_id":"public/2023/01/11/personal-notes-002/index.html","hash":"707b4c4581b7a6a4f43b73a5cbba5860bfdfdb56","modified":1747491272497},{"_id":"public/2022/05/12/personal-notes-001/index.html","hash":"8c1bc5028ccec0e1d61f808dd9c4e14bf9e8fecc","modified":1747491272497},{"_id":"public/2021/03/25/run-local-k8s-using-k3d/index.html","hash":"9851b9045e22be8489f407f3c8f1f4749be85eeb","modified":1747491272497},{"_id":"public/2021/03/24/run-local-k8s-using-kind/index.html","hash":"1af8dc932f4fb2e9e152f50533a1e8fc65df2994","modified":1747491272497},{"_id":"public/2021/03/19/Play-Windows-Classic-Games-on-macOS/index.html","hash":"161f27594b1c16dfe42d76b19d4ac19066e4ec6e","modified":1747491272497},{"_id":"public/2021/03/11/hexo-quickstart/index.html","hash":"1e458aeeef28d5f3b91f6b43bff1ca313d4fdf62","modified":1747491272497},{"_id":"public/2020/12/30/git-log-to-markdown/index.html","hash":"c47ff49e008121cf01dc79c9ede4018ef6482237","modified":1747491272497},{"_id":"public/2020/08/07/gitbook-basics/index.html","hash":"5dc5a59bffaaadb47d19a322007b5116f09d6fcd","modified":1747491272497},{"_id":"public/2020/05/19/k8s-apps-admin/index.html","hash":"5ede32b46aa9abdacedc8edd03693c1318aaef24","modified":1747491272497},{"_id":"public/2020/05/19/self-signed-cert-for-domain/index.html","hash":"e358f248ba48a4f96a45aea0d2b0ef66ccff587b","modified":1747491272497},{"_id":"public/2020/03/28/manage-kubeconfig/index.html","hash":"242a41e4d902e0002d3953a43fcbfdcd56ed31c3","modified":1747491272497},{"_id":"public/2020/03/22/iterm2-omz-style-guide/index.html","hash":"6f07407f1c89af6eb9fc1c5389dc23e4375726ab","modified":1747491272497},{"_id":"public/2020/02/27/node-gyp-rebuild-failed-on-catalina/index.html","hash":"2359cfff462eb230d4d66443145c079c8bf5a670","modified":1747491272497},{"_id":"public/2018/10/17/hap-email-account-ssl-setup/index.html","hash":"3252c3780a7537b532640069b50042e13c5d13bd","modified":1747491272497},{"_id":"public/2018/10/15/hap-i18n-irequest/index.html","hash":"f58c7a9bd0d31c7c4c17e9ceff9d0d16c06cf687","modified":1747491272497},{"_id":"public/2018/10/09/hap-enable-new-language/index.html","hash":"2d31f887d6ff871bdc70b4d9a9a529b06c7f15ba","modified":1747491272497},{"_id":"public/2018/10/02/install-k8s-using-kubeadm/index.html","hash":"86859839cededbdeca449f3574a98c6cc8fcb86d","modified":1747491272497},{"_id":"public/archives/index.html","hash":"1548f89e0e9102522343ad04198de203d7dfb87b","modified":1747491272497},{"_id":"public/archives/page/2/index.html","hash":"48759ddf5972aa4df285dfd24ac218398122dd8d","modified":1747491272497},{"_id":"public/archives/page/3/index.html","hash":"47956df76e09e85568a82baf79d344f4073a8455","modified":1747491272497},{"_id":"public/archives/2018/index.html","hash":"22a41d53706bfc54aca26c852f15917f64bb9a00","modified":1747491272497},{"_id":"public/archives/2018/10/index.html","hash":"0b2fa186590534650f165972535bdd0079c12353","modified":1747491272497},{"_id":"public/archives/2020/index.html","hash":"47fea62682a2e437d24087871182f2e9bf42dd08","modified":1747491272497},{"_id":"public/archives/2020/02/index.html","hash":"ada4d145ac6615474001cfa8c5a7fa71430c580c","modified":1747491272497},{"_id":"public/archives/2020/03/index.html","hash":"2e83133672facbb44dbd507a23c96a52a2d2705c","modified":1747491272497},{"_id":"public/archives/2020/05/index.html","hash":"1ca0023f62526bdf3da21e5fbc971960744c694e","modified":1747491272497},{"_id":"public/archives/2020/08/index.html","hash":"ef2bd8a7bf53ed929feb9e3262abb0c0f58d25b4","modified":1747491272497},{"_id":"public/archives/2020/12/index.html","hash":"4791463509ab479694496dfce3f761f481f65d42","modified":1747491272497},{"_id":"public/archives/2021/index.html","hash":"50cf4e5736a9463049d3e92dcc5b21a1c01e1c52","modified":1747491272497},{"_id":"public/archives/2021/03/index.html","hash":"8f2ab303e285e41d10350a722b9e6c9763508ee3","modified":1747491272497},{"_id":"public/archives/2022/index.html","hash":"ccf58e14ae24810c5513243f143d8b7743ac9799","modified":1747491272497},{"_id":"public/archives/2022/05/index.html","hash":"281e0a3bc30387e7ad8ea336623a31c074401ca4","modified":1747491272497},{"_id":"public/archives/2023/index.html","hash":"a6d0bd768556276446733458674f1f75fdd00108","modified":1747491272497},{"_id":"public/archives/2023/01/index.html","hash":"a5aa4f91c739e6f076530eb4af033c8f618cc144","modified":1747491272497},{"_id":"public/archives/2023/11/index.html","hash":"b0b41125049b84ca8acdce94991361970c006f80","modified":1747491272497},{"_id":"public/archives/2023/12/index.html","hash":"a5a4ce13f562169eb17af0ba0f0a2333bf0acaf9","modified":1747491272497},{"_id":"public/archives/2024/index.html","hash":"b6b1f85e57dab93b3571d6634c942fa67c66ea70","modified":1747491272497},{"_id":"public/archives/2024/10/index.html","hash":"fba088945bb7bd403e8bc690d9b4449a9913d95a","modified":1747491272497},{"_id":"public/archives/2025/index.html","hash":"dd93bfbb54e3f61f033bfef113ac3bac08d8fe31","modified":1747491272497},{"_id":"public/archives/2025/05/index.html","hash":"1037337254ec35c27f4d7acc237b062b372fd246","modified":1747491272497},{"_id":"public/categories/Classic-Games/index.html","hash":"b41450ea2bcc92de462820d9a2112b689739a90e","modified":1747491272497},{"_id":"public/categories/git/index.html","hash":"bad53673fed550a91e91464568e2b198ff6ce4e7","modified":1747491272497},{"_id":"public/categories/tools/index.html","hash":"6c7a2a852e08d469f14456092a86bedc7a16a797","modified":1747491272497},{"_id":"public/categories/HAP/index.html","hash":"9036d8102817de69021108015ad7016740254824","modified":1747491272497},{"_id":"public/categories/blog/index.html","hash":"8707cc58d36f65f31b8bfb23340684b99eadf00a","modified":1747491272497},{"_id":"public/categories/DevOps/index.html","hash":"bd8b141d8d26bed354eef2680879b1a645e3b562","modified":1747491272497},{"_id":"public/categories/HZERO/index.html","hash":"1a2666f5fa634f05fa70383bf02a66f6c93ae77c","modified":1747491272497},{"_id":"public/categories/macOS/index.html","hash":"46abab8b23c5eaa67b1ebd3d460c8be5df19b0d2","modified":1747491272497},{"_id":"public/categories/技术无关/index.html","hash":"05a52a790f713ae216c7c12781ee6fa0a055642e","modified":1747491272497},{"_id":"public/categories/个人日记/index.html","hash":"25badd7f5cfa41a172fda5ce67a8d9513202661f","modified":1747491272497},{"_id":"public/categories/Linux/index.html","hash":"56f267c243ec628f03617f7e736aa22281cf907c","modified":1747491272497},{"_id":"public/categories/k8s/index.html","hash":"3c936775bc55b2533bb3898d5734e3aa2c49af14","modified":1747491272497},{"_id":"public/categories/个人日记/技术无关/index.html","hash":"a9c2bb381ac1c24b8ec97db2199f25c0671b4c7e","modified":1747491272497},{"_id":"public/categories/k8s/Kubernetes/index.html","hash":"a71dede4dc74912e4746f1bea8f013a4d3a8bc79","modified":1747491272497},{"_id":"public/index.html","hash":"e5cd530a4752ba9cd0e1b443ae6c1f513962f844","modified":1747492567989},{"_id":"public/page/2/index.html","hash":"43c117b1d7e2b9919dbd829c6cb3449cea18ef53","modified":1747491272497},{"_id":"public/page/3/index.html","hash":"4be1c03826abe8ba213a6393dbdcfb0cf62676c1","modified":1747491272497},{"_id":"public/tags/wine/index.html","hash":"eae98b5e2f659f5f842045a92ccc1351f746efbb","modified":1747491272497},{"_id":"public/tags/macOS/index.html","hash":"be2fae492637ff93cf3401143a4d89ee0bf03288","modified":1747491272497},{"_id":"public/tags/Diablo-II/index.html","hash":"b228ba1291e949742cfa71201f44443a9137eef2","modified":1747491272497},{"_id":"public/tags/git/index.html","hash":"729cf87f42a44b307ab43f449b7efdb996cea1f1","modified":1747491272497},{"_id":"public/tags/小技巧/index.html","hash":"a47609f07b6663fc6a7b6b2ec58b7d7d82802fc4","modified":1747491272497},{"_id":"public/tags/gitbook/index.html","hash":"deac485cf5e55f06faba5b0c26d75db4016b9a50","modified":1747491272497},{"_id":"public/tags/i18n/index.html","hash":"446bcc0a5a4c31dbe291a0e9f55f9aea9621ae02","modified":1747491272497},{"_id":"public/tags/email/index.html","hash":"16ed95c2173de1215fcd6e8e4ae58dc2ab029cbf","modified":1747491272497},{"_id":"public/tags/SSL/index.html","hash":"15c4e2b821b2eead89205e9797548140db4aa4f3","modified":1747491272497},{"_id":"public/tags/iRequest/index.html","hash":"aa237ad50fa7743f1067ad49dae83c96988d2ca8","modified":1747491272497},{"_id":"public/tags/locale/index.html","hash":"d08b6a8cd1a1c0b4862ebc75276c1305c5834b10","modified":1747491272497},{"_id":"public/tags/hexo/index.html","hash":"0eb0ecd32f87b2ce8dc2b6e10006c2e2412a8668","modified":1747491272497},{"_id":"public/tags/nodejs/index.html","hash":"84b3e829f3fe52550b86c1d2a07966cad120776b","modified":1747491272497},{"_id":"public/tags/Kubernetes/index.html","hash":"13acdc681a06da48dd35fe2bfa844b52b9683e34","modified":1747491272497},{"_id":"public/tags/kubeadm/index.html","hash":"ff23b6ec4538e645acd561384e529bdd8a6cc776","modified":1747491272497},{"_id":"public/tags/iterm2/index.html","hash":"2dc4e72feb7062664648af0d9ededcd8b4e39a9c","modified":1747491272497},{"_id":"public/tags/on-my-zsh/index.html","hash":"0d49ca6c6dfef39b540b90fa1a1122bcc893e96e","modified":1747491272497},{"_id":"public/tags/k8s/index.html","hash":"7f1b12fbc7598c234fc07195a938b0f9d075d869","modified":1747491272497},{"_id":"public/tags/kubernetes/index.html","hash":"684753694db1bef7040fb8b9afa34ab2f9b33995","modified":1747491272497},{"_id":"public/tags/deployment/index.html","hash":"7eced911026aafde89a4b60437ed2d08936d9751","modified":1747491272497},{"_id":"public/tags/admin/index.html","hash":"c529f9ab7fbb625d384959460372f15b732855a2","modified":1747491272497},{"_id":"public/tags/K8S/index.html","hash":"e41ecba65d66c67f64ec030e518ce998d6d6229d","modified":1747491272497},{"_id":"public/tags/kubeconfig/index.html","hash":"b1a05e8cbdac9170250348b9e1c50f806b2f5f1a","modified":1747491272497},{"_id":"public/tags/kubectl-config/index.html","hash":"d7d7bb812a4013aaf161f7f51d912cf6204be0a2","modified":1747491272497},{"_id":"public/tags/国内源/index.html","hash":"137a0594203c477bd8b4ecd6b5bb9414939d40e9","modified":1747491272497},{"_id":"public/tags/镜像源/index.html","hash":"cd5b81d95b8e0bda63479269fd9b6580776a694a","modified":1747491272497},{"_id":"public/tags/macOS-Catalina/index.html","hash":"bec1161f1fd62519032db8ac8b6afeb963b4eee6","modified":1747491272497},{"_id":"public/tags/node-gyp-rebuild/index.html","hash":"6c66cc916711e65c234de34dc9276a814ab5ad03","modified":1747491272497},{"_id":"public/tags/No-Xcode-or-CLT-version-detected/index.html","hash":"d905bb45aa0508879f7f66f53a16413550ecf6c9","modified":1747491272497},{"_id":"public/tags/吐槽/index.html","hash":"d4ed064fa1e1a7872e457060d8ca89094275461f","modified":1747491272497},{"_id":"public/tags/Bash/index.html","hash":"a169855eb06ee2064be387155251d6580be91adc","modified":1747491272497},{"_id":"public/tags/Shell/index.html","hash":"a800ac9017b00a457a942708ce139f3aec82170b","modified":1747491272497},{"_id":"public/tags/k3d/index.html","hash":"0287c74a0decdc57fb3ce9b52a857f66d419fc08","modified":1747491272497},{"_id":"public/tags/k3s/index.html","hash":"24a8adffacf6181ca544ba30661d8db39cc501b1","modified":1747491272497},{"_id":"public/tags/docker/index.html","hash":"3041ddc44f1de7afeda2846bfbb2cb0614c91c50","modified":1747491272497},{"_id":"public/tags/kind/index.html","hash":"4428c721157f5d32339aa4f3a4b0e2caaa2ca943","modified":1747491272497},{"_id":"public/tags/self-signed-certificate/index.html","hash":"864d811811b15f0eca28700d399f40563586d0b4","modified":1747491272497},{"_id":"public/tags/自签名证书/index.html","hash":"9ede9de6cf2e81a4e5554b2d6d57d9337625af24","modified":1747491272497},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1747491272497},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1747491272497},{"_id":"public/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1747491272497},{"_id":"public/images/logo.svg","hash":"099e11ab995a2c8981427a85476d082609848c77","modified":1747491272497},{"_id":"public/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1747491272497},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1747491272497},{"_id":"public/uploads/avatar.png","hash":"098f2d69de6a11ccc98845f715a28f693d72d651","modified":1747491272497},{"_id":"public/2020/12/30/git-log-to-markdown/changelog-v1.0.3.sh","hash":"40d2cb5457a442e5858e5913451155ed864a0aea","modified":1747491272497},{"_id":"public/2018/10/09/hap-enable-new-language/image-20181009103555564.png","hash":"11d126e2fa8b691b7589d7bd7662736a67735ffa","modified":1747491272497},{"_id":"public/2023/12/20/read-property-file-in-bash/properties_pattern_02.png","hash":"50749def4b6932bcf64abfbd736d8f35344cd270","modified":1747491272497},{"_id":"public/2023/12/20/read-property-file-in-bash/properties_pattern_01.png","hash":"77063c07c7f789a2869edd1e78fb8cbd6c3d0b36","modified":1747491272497},{"_id":"public/2025/05/17/win11-install-key-steps/2025-05-17-21-22-18-image.png","hash":"ccb0dde0a660a81deb947582773cad4f12f18de5","modified":1747491272497},{"_id":"public/2025/05/17/win11-install-key-steps/2025-05-17-21-19-21-image.png","hash":"c9c8cce9287e600f76f32ae05b1b29bf77a91b59","modified":1747491272497},{"_id":"public/2025/05/17/win11-install-key-steps/2025-05-17-21-25-38-image.png","hash":"60f038df57a8d5941b366674cef92567349ef77c","modified":1747491272497},{"_id":"public/2025/05/17/win11-install-key-steps/2025-05-17-21-23-55-image.png","hash":"22770740188a360bf0099170eb8e2423ef2f8bfe","modified":1747491272497},{"_id":"public/2025/05/17/win11-install-key-steps/2025-05-17-21-22-57-image.png","hash":"452bf339ca8127bd7a7b46b8ccbf09fe1eab2127","modified":1747491272497},{"_id":"public/2025/05/17/win11-install-key-steps/2025-05-17-21-27-15-image.png","hash":"59008af3dd5e7cd34a6a1ef9d1e01e192e4f3852","modified":1747491272497},{"_id":"public/2025/05/17/win11-install-key-steps/2025-05-17-21-30-08-image.png","hash":"2a3e88a41e52beed8c36c56bfc8c133dcc6eeacc","modified":1747491272497},{"_id":"public/2025/05/17/win11-install-key-steps/2025-05-17-21-33-07-image.png","hash":"683f866ccd5d6989bb61b7cc05fd6d74b562c26d","modified":1747491272497},{"_id":"public/2020/12/30/git-log-to-markdown/sample.png","hash":"5d4b61700adcc79e5e7a92dcbb6d2eff5391b1f6","modified":1747491272497},{"_id":"public/2021/03/19/Play-Windows-Classic-Games-on-macOS/regedit.png","hash":"58632c783eea39641dfca5439ab01900adeed9c9","modified":1747491272497},{"_id":"public/2021/03/19/Play-Windows-Classic-Games-on-macOS/winecfg.png","hash":"88afb936665f95a4d93495d76ca3ead63b1cae98","modified":1747491272497},{"_id":"public/2018/10/17/hap-email-account-ssl-setup/image-20181017162319708.png","hash":"f5e2a53122794a0ea56e416d75abf3b854dc27de","modified":1747491272497},{"_id":"public/2018/10/02/install-k8s-using-kubeadm/demo.png","hash":"da1caf1fd04258ad94441f25aed55ae4adde8a69","modified":1747491272497},{"_id":"public/2018/10/02/install-k8s-using-kubeadm/rc.png","hash":"4889b9c5fd0eeff6703c54047ca04ce8d79230e3","modified":1747491272497},{"_id":"public/2021/03/25/run-local-k8s-using-k3d/localhost-8080.png","hash":"b9f785736963416feeb63a77b6430bc153f7ab0b","modified":1747491272497},{"_id":"public/2025/05/17/win11-install-key-steps/2025-05-17-20-23-44-image.png","hash":"da614bcf3af93745abfd10906c3afe7ea4339d4f","modified":1747491272497},{"_id":"public/2025/05/17/win11-install-key-steps/2025-05-17-21-10-39-image.png","hash":"bd71df20749168c5d8eddf855bc55548cf1975b0","modified":1747491272497},{"_id":"public/2025/05/17/win11-install-key-steps/2025-05-17-21-08-24-image.png","hash":"19b4233a1318ff4779dcc9dcd4b09d4debf27381","modified":1747491272497},{"_id":"public/2025/05/17/win11-install-key-steps/2025-05-17-21-03-19-image.png","hash":"3d30c16c9706a9ce6747a1bd61fb2bd8c581c2a8","modified":1747491272497},{"_id":"public/2025/05/17/win11-install-key-steps/2025-05-17-21-11-37-image.png","hash":"8348f1e76e215beeb014aa9bf2bb0f6daedb7bad","modified":1747491272497},{"_id":"public/2025/05/17/win11-install-key-steps/2025-05-17-21-12-35-image.png","hash":"04472f92ed069e15d8e92ba692e5fbfcbb7d0aac","modified":1747491272497},{"_id":"public/2025/05/17/win11-install-key-steps/2025-05-17-21-17-04-image.png","hash":"7795770308b37434e5507da0b784cc514d911f99","modified":1747491272497},{"_id":"public/2025/05/17/win11-install-key-steps/2025-05-17-21-28-06-image.png","hash":"d8b54a84ace217c7d2b7a6e259521358126c35c8","modified":1747491272497},{"_id":"public/2025/05/17/win11-install-key-steps/2025-05-17-21-31-57-image.png","hash":"2e520c5e179c821928510cec849eea8810a13958","modified":1747491272497},{"_id":"public/css/main.css","hash":"f125b1cdc3a86e99d69ecaba5add2f095f3a7560","modified":1747491272497},{"_id":"public/css/noscript.css","hash":"4cd5301e478e0e0d4b176740ec314087ec5cb707","modified":1747491272497},{"_id":"public/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1747491272497},{"_id":"public/js/bookmark.js","hash":"0f563ffbf05fad30e854e413ab17ff7164ab5a53","modified":1747491272497},{"_id":"public/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1747491272497},{"_id":"public/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":1747491272497},{"_id":"public/js/motion.js","hash":"770d63c26f22705311028a36b52e999cc8a2da82","modified":1747491272497},{"_id":"public/js/next-boot.js","hash":"745bd828205da7e5fbd3f860cc3697097630f5f3","modified":1747491272497},{"_id":"public/js/schedule.js","hash":"a1333258726caf84f368a8f8454639c7dc1626bb","modified":1747491272497},{"_id":"public/js/utils.js","hash":"d775148c2bf20c028622af5609a788167352bf1e","modified":1747491272497},{"_id":"public/js/pjax.js","hash":"b03ba78c6916ad2f390d55bc1bc18fafb64b0ebf","modified":1747491272497},{"_id":"public/js/schemes/muse.js","hash":"ba7ba2c129d1f240c6a22cec3e53f3f22af64b6b","modified":1747491272497},{"_id":"public/js/third-party/fancybox.js","hash":"819f382c561fe5ec23c67cc5fabd63dd1cc22dc1","modified":1747491272497},{"_id":"public/js/third-party/pace.js","hash":"0ef04218b93561ba4d0ff420d556c3d90a756d32","modified":1747491272497},{"_id":"public/js/third-party/addtoany.js","hash":"5276c8f78ee562a8965216dc67d762e59cb4a9f2","modified":1747491272497},{"_id":"public/js/third-party/quicklink.js","hash":"eed02e6fced8e5a653077205d4d4d7834ca71472","modified":1747491272497},{"_id":"public/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1747491272497},{"_id":"public/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":1747491272497},{"_id":"public/js/third-party/analytics/matomo.js","hash":"c6a25b26a1443caa70b47fd3dfa282271574deb5","modified":1747491272497},{"_id":"public/js/third-party/analytics/google-analytics.js","hash":"def07bcc7c17d8a0caad177fb1dd2f3a5e5b3536","modified":1747491272497},{"_id":"public/js/third-party/comments/changyan.js","hash":"260d1a77d6a3bb33a579d3e4cca1997003e799b5","modified":1747491272497},{"_id":"public/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1747491272497},{"_id":"public/js/third-party/comments/disqusjs.js","hash":"1e826dea3f684c0515f362dc1352447a1f0eae71","modified":1747491272497},{"_id":"public/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":1747491272497},{"_id":"public/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":1747491272497},{"_id":"public/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":1747491272497},{"_id":"public/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":1747491272497},{"_id":"public/js/third-party/comments/disqus.js","hash":"da361917d65e5dca8362f8cdeb6c8cc0e8316cec","modified":1747491272497},{"_id":"public/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":1747491272497},{"_id":"public/js/third-party/math/mathjax.js","hash":"5c749b9c1c3bb738122d0516211ecff6496d4907","modified":1747491272497},{"_id":"public/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1747491272497},{"_id":"public/js/third-party/search/local-search.js","hash":"4536cb6d0a9bbaaa86fab3fa0101f6a3a3ec5a76","modified":1747491272497},{"_id":"public/js/third-party/statistics/firestore.js","hash":"6e0682bb42170d61b13b786295f45f9c785f8b73","modified":1747491272497},{"_id":"public/js/third-party/search/algolia-search.js","hash":"fdb7b7cef1a147d897e7f7cd8903b58368ec2062","modified":1747491272497},{"_id":"public/js/third-party/statistics/lean-analytics.js","hash":"835cbf54c49ef1327f47df70ff2636ad36b6f57d","modified":1747491272497},{"_id":"public/js/third-party/tags/mermaid.js","hash":"6bf821310342c5b87a631873e7650a475a0765f1","modified":1747491272497},{"_id":"public/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1747491272497},{"_id":"public/js/third-party/tags/wavedrom.js","hash":"40dcd10df6edf124088c329346e0cc0bdac74ef1","modified":1747491272497},{"_id":"public/2018/10/02/install-k8s-using-kubeadm/dashboard-login.png","hash":"8433b767bc7258db87150a4fd8276f77af5d9922","modified":1747491272497},{"_id":"public/2020/03/28/manage-kubeconfig/kubeconfig-structure.png","hash":"b1bebed82cd5408b2760acea402099f4763e807d","modified":1747491272497},{"_id":"public/2025/05/17/win11-install-key-steps/2025-05-17-20-59-07-image.png","hash":"dd31c02f4b4caa94f87461ca97d6e9ff104d71c4","modified":1747491272497},{"_id":"public/2025/05/17/win11-install-key-steps/2025-05-17-21-15-22-image.png","hash":"17d38e7bdd91cbfcb9dbf6492b11e34f00bae4a9","modified":1747491272497},{"_id":"public/2025/05/17/win11-install-key-steps/2025-05-17-21-51-10-image.png","hash":"eb9c3c1cf22dcb58c7085b6b236eb2c04c173166","modified":1747491272497},{"_id":"public/2025/05/17/win11-install-key-steps/2025-05-17-21-59-59-image.png","hash":"d677ccdfe4365714bb4a0f632bc3a45497d9491a","modified":1747491272497},{"_id":"public/2025/05/17/win11-install-key-steps/2025-05-17-22-01-32-image.png","hash":"ece8c7476f96620f210da67cb8b135f962df7899","modified":1747491272497},{"_id":"public/2025/05/17/win11-install-key-steps/2025-05-17-22-02-52-image.png","hash":"79cf924660ba94d7faedacfed000591a1980a4aa","modified":1747491272497},{"_id":"public/2025/05/17/win11-install-key-steps/2025-05-17-22-02-06-image.png","hash":"6ea76d925fc1901e5efe3d27eeb0b302a3040379","modified":1747491272497},{"_id":"public/2018/10/02/install-k8s-using-kubeadm/dashboard-home.png","hash":"9c3a57eb1056fec73947f8eca3704dc86efaab38","modified":1747491272497},{"_id":"public/2025/05/15/hzero-service-match/2025-05-15-22-36-39-image.png","hash":"04ca165b21d025c33f3e0b2fa8dd7c0931571296","modified":1747491272497},{"_id":"public/2025/05/17/win11-install-key-steps/2025-05-17-22-04-18-image.png","hash":"f5421051b0abded75a270978b6a441e1797a7ca9","modified":1747491272497},{"_id":"public/2025/05/17/win11-install-key-steps/2025-05-17-22-09-46-image.png","hash":"1fe8f846a06c9c48cd9e42c1bfd6815eb8e6995e","modified":1747491272497},{"_id":"public/2020/03/22/iterm2-omz-style-guide/image-20200322200414320.png","hash":"969551250018e4a4c813ac10fdf13c2822b1f4da","modified":1747491272497},{"_id":"public/2021/03/19/Play-Windows-Classic-Games-on-macOS/d2.png","hash":"d108b2074cc3783d3ad54fdd5fa54a3ab134b542","modified":1747491272497},{"_id":"public/2020/03/22/iterm2-omz-style-guide/image-20200322231555092.png","hash":"96116b7cc9fab0139e9543beeec6f7ef28413556","modified":1747491272497},{"_id":"public/2018/10/02/install-k8s-using-kubeadm/rc.key","hash":"74e5bd883bafbc826a92cd687ff5bdfe77d2c6cf","modified":1747491272497},{"_id":"public/2021/03/11/hexo-quickstart/image-20210311114700121.png","hash":"7dcd405c81fe70e0175d6a29c81d7bb3e2352aa7","modified":1747491272497},{"_id":"public/2025/05/17/win11-install-key-steps/2025-05-17-22-11-25-image.png","hash":"86896e73417f02879981bfdc56045588ead73989","modified":1747491272497}],"Category":[{"name":"Classic Games","_id":"cmasb6npi00047sos3ur9dxrt"},{"name":"git","_id":"cmasb6npm000a7sos1ya3gcu8"},{"name":"tools","_id":"cmasb6npo000f7sos3o3c322t"},{"name":"HAP","_id":"cmasb6npp000k7soshoyffu0e"},{"name":"blog","_id":"cmasb6npv00127sos41yw8tlv"},{"name":"DevOps","_id":"cmasb6npx001a7sosh1tra16q"},{"name":"HZERO","_id":"cmasb6npy001h7soshe3sfxs7"},{"name":"macOS","_id":"cmasb6nq0001n7sos6ecq45kv"},{"name":"技术无关","_id":"cmasb6nq200217sos00i02kde"},{"name":"个人日记","_id":"cmasb6nq200267soscerz62ws"},{"name":"Linux","_id":"cmasb6nq3002b7sosa0wjapeb"},{"name":"k8s","_id":"cmasb6nq3002e7sos67i1a4pw"},{"name":"技术无关","parent":"cmasb6nq200267soscerz62ws","_id":"cmasb6nq4002l7soshcbuegq4"},{"name":"Kubernetes","parent":"cmasb6nq3002e7sos67i1a4pw","_id":"cmasb6nq4002p7sos8g440avf"}],"Data":[],"Page":[{"title":"关于我","date":"2024-01-26T14:41:45.000Z","_content":"\n## 个人介绍\n\n欢迎访问我的个人博客！\n\n我是 [eliu (刘洪玉)](https://github.com/eliu)，是一名软件开发工程师，目前就职于华为技术有限公司。业余时间我喜欢研究脚本语言和一些可以提高日常开发和运维效率的工具。\n\n我曾经在上海汉得做过近10年的 Oracle E-Business Suite 软件实施顾问，后随公司的战略转型到 J2EE 方向。\n\n## 我的作品\n\n| 项目名称          | 简要描述                                                   | 项目主页                                               | 年份 |\n| ----------------- | ---------------------------------------------------------- | ------------------------------------------------------ | ---- |\n| git-log-markdown  | 一键生成 markdown 格式的 git 变更日志                      | https://github.com/eliu/git-log-markdown               | 2023 |\n| devbox            | 基于 VirtualBox 和 Vagrant 在本地搭建统一的 Linux 开发环境 | https://github.com/eliu/devbox                         | 2021 |\n| kt-connect-rbac   | 为 K8S 调试工具 kt-connect 生成本地调试的 K8S 角色         | https://github.com/eliu/kt-connect-rbac                | 2020 |\n| Glove             | HAP 应用开发平台的安装部署工具                             | [https://gitlab.com/gloves](https://gitlab.com/gloves) | 2018 |\n| kubeadm-vagrant   | 基于 VirtualBox 和 Vagrant 在本地启动 K8S 集群             | https://github.com/eliu/kubeadm-vagrant                | 2018 |\n| openshift-vagrant | 基于 VirtualBox 和 Vagrant 在本地启动 OpenShift 集群       | https://github.com/eliu/openshift-vagrant              | 2017 |\n| plsql-utils       | EBS 及 Oracle 数据库常用运维脚本集合                       | https://github.com/eliu/plsql-utils                    | 2016 |\n\n## 联系我\n\n很抱歉我没有丰富的社交账号，如果你想和我取得联系，可以给我发电子邮件，以下任意一个邮件地址都可以联系到我。\n\n- eliuhy@163.com\n- eridroid@gmail.com\n\n\n\n","source":"about/index.md","raw":"---\ntitle: 关于我\ndate: 2024-01-26 22:41:45\n---\n\n## 个人介绍\n\n欢迎访问我的个人博客！\n\n我是 [eliu (刘洪玉)](https://github.com/eliu)，是一名软件开发工程师，目前就职于华为技术有限公司。业余时间我喜欢研究脚本语言和一些可以提高日常开发和运维效率的工具。\n\n我曾经在上海汉得做过近10年的 Oracle E-Business Suite 软件实施顾问，后随公司的战略转型到 J2EE 方向。\n\n## 我的作品\n\n| 项目名称          | 简要描述                                                   | 项目主页                                               | 年份 |\n| ----------------- | ---------------------------------------------------------- | ------------------------------------------------------ | ---- |\n| git-log-markdown  | 一键生成 markdown 格式的 git 变更日志                      | https://github.com/eliu/git-log-markdown               | 2023 |\n| devbox            | 基于 VirtualBox 和 Vagrant 在本地搭建统一的 Linux 开发环境 | https://github.com/eliu/devbox                         | 2021 |\n| kt-connect-rbac   | 为 K8S 调试工具 kt-connect 生成本地调试的 K8S 角色         | https://github.com/eliu/kt-connect-rbac                | 2020 |\n| Glove             | HAP 应用开发平台的安装部署工具                             | [https://gitlab.com/gloves](https://gitlab.com/gloves) | 2018 |\n| kubeadm-vagrant   | 基于 VirtualBox 和 Vagrant 在本地启动 K8S 集群             | https://github.com/eliu/kubeadm-vagrant                | 2018 |\n| openshift-vagrant | 基于 VirtualBox 和 Vagrant 在本地启动 OpenShift 集群       | https://github.com/eliu/openshift-vagrant              | 2017 |\n| plsql-utils       | EBS 及 Oracle 数据库常用运维脚本集合                       | https://github.com/eliu/plsql-utils                    | 2016 |\n\n## 联系我\n\n很抱歉我没有丰富的社交账号，如果你想和我取得联系，可以给我发电子邮件，以下任意一个邮件地址都可以联系到我。\n\n- eliuhy@163.com\n- eridroid@gmail.com\n\n\n\n","updated":"2024-01-26T16:11:25.101Z","path":"about/index.html","comments":1,"layout":"page","_id":"cmasb6npc00007sosbd9ldki3","content":"<h2 id=\"个人介绍\"><a href=\"#个人介绍\" class=\"headerlink\" title=\"个人介绍\"></a>个人介绍</h2><p>欢迎访问我的个人博客！</p>\n<p>我是 <a href=\"https://github.com/eliu\">eliu (刘洪玉)</a>，是一名软件开发工程师，目前就职于华为技术有限公司。业余时间我喜欢研究脚本语言和一些可以提高日常开发和运维效率的工具。</p>\n<p>我曾经在上海汉得做过近10年的 Oracle E-Business Suite 软件实施顾问，后随公司的战略转型到 J2EE 方向。</p>\n<h2 id=\"我的作品\"><a href=\"#我的作品\" class=\"headerlink\" title=\"我的作品\"></a>我的作品</h2><table>\n<thead>\n<tr>\n<th>项目名称</th>\n<th>简要描述</th>\n<th>项目主页</th>\n<th>年份</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>git-log-markdown</td>\n<td>一键生成 markdown 格式的 git 变更日志</td>\n<td><a href=\"https://github.com/eliu/git-log-markdown\">https://github.com/eliu/git-log-markdown</a></td>\n<td>2023</td>\n</tr>\n<tr>\n<td>devbox</td>\n<td>基于 VirtualBox 和 Vagrant 在本地搭建统一的 Linux 开发环境</td>\n<td><a href=\"https://github.com/eliu/devbox\">https://github.com/eliu/devbox</a></td>\n<td>2021</td>\n</tr>\n<tr>\n<td>kt-connect-rbac</td>\n<td>为 K8S 调试工具 kt-connect 生成本地调试的 K8S 角色</td>\n<td><a href=\"https://github.com/eliu/kt-connect-rbac\">https://github.com/eliu/kt-connect-rbac</a></td>\n<td>2020</td>\n</tr>\n<tr>\n<td>Glove</td>\n<td>HAP 应用开发平台的安装部署工具</td>\n<td><a href=\"https://gitlab.com/gloves\">https://gitlab.com/gloves</a></td>\n<td>2018</td>\n</tr>\n<tr>\n<td>kubeadm-vagrant</td>\n<td>基于 VirtualBox 和 Vagrant 在本地启动 K8S 集群</td>\n<td><a href=\"https://github.com/eliu/kubeadm-vagrant\">https://github.com/eliu/kubeadm-vagrant</a></td>\n<td>2018</td>\n</tr>\n<tr>\n<td>openshift-vagrant</td>\n<td>基于 VirtualBox 和 Vagrant 在本地启动 OpenShift 集群</td>\n<td><a href=\"https://github.com/eliu/openshift-vagrant\">https://github.com/eliu/openshift-vagrant</a></td>\n<td>2017</td>\n</tr>\n<tr>\n<td>plsql-utils</td>\n<td>EBS 及 Oracle 数据库常用运维脚本集合</td>\n<td><a href=\"https://github.com/eliu/plsql-utils\">https://github.com/eliu/plsql-utils</a></td>\n<td>2016</td>\n</tr>\n</tbody></table>\n<h2 id=\"联系我\"><a href=\"#联系我\" class=\"headerlink\" title=\"联系我\"></a>联系我</h2><p>很抱歉我没有丰富的社交账号，如果你想和我取得联系，可以给我发电子邮件，以下任意一个邮件地址都可以联系到我。</p>\n<ul>\n<li><a href=\"mailto:&#x65;&#x6c;&#x69;&#x75;&#x68;&#121;&#x40;&#x31;&#x36;&#x33;&#46;&#x63;&#111;&#109;\">&#x65;&#x6c;&#x69;&#x75;&#x68;&#121;&#x40;&#x31;&#x36;&#x33;&#46;&#x63;&#111;&#109;</a></li>\n<li><a href=\"mailto:&#x65;&#114;&#x69;&#100;&#114;&#111;&#105;&#x64;&#x40;&#103;&#109;&#97;&#x69;&#x6c;&#46;&#99;&#111;&#x6d;\">&#x65;&#114;&#x69;&#100;&#114;&#111;&#105;&#x64;&#x40;&#103;&#109;&#97;&#x69;&#x6c;&#46;&#99;&#111;&#x6d;</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"个人介绍\"><a href=\"#个人介绍\" class=\"headerlink\" title=\"个人介绍\"></a>个人介绍</h2><p>欢迎访问我的个人博客！</p>\n<p>我是 <a href=\"https://github.com/eliu\">eliu (刘洪玉)</a>，是一名软件开发工程师，目前就职于华为技术有限公司。业余时间我喜欢研究脚本语言和一些可以提高日常开发和运维效率的工具。</p>\n<p>我曾经在上海汉得做过近10年的 Oracle E-Business Suite 软件实施顾问，后随公司的战略转型到 J2EE 方向。</p>\n<h2 id=\"我的作品\"><a href=\"#我的作品\" class=\"headerlink\" title=\"我的作品\"></a>我的作品</h2><table>\n<thead>\n<tr>\n<th>项目名称</th>\n<th>简要描述</th>\n<th>项目主页</th>\n<th>年份</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>git-log-markdown</td>\n<td>一键生成 markdown 格式的 git 变更日志</td>\n<td><a href=\"https://github.com/eliu/git-log-markdown\">https://github.com/eliu/git-log-markdown</a></td>\n<td>2023</td>\n</tr>\n<tr>\n<td>devbox</td>\n<td>基于 VirtualBox 和 Vagrant 在本地搭建统一的 Linux 开发环境</td>\n<td><a href=\"https://github.com/eliu/devbox\">https://github.com/eliu/devbox</a></td>\n<td>2021</td>\n</tr>\n<tr>\n<td>kt-connect-rbac</td>\n<td>为 K8S 调试工具 kt-connect 生成本地调试的 K8S 角色</td>\n<td><a href=\"https://github.com/eliu/kt-connect-rbac\">https://github.com/eliu/kt-connect-rbac</a></td>\n<td>2020</td>\n</tr>\n<tr>\n<td>Glove</td>\n<td>HAP 应用开发平台的安装部署工具</td>\n<td><a href=\"https://gitlab.com/gloves\">https://gitlab.com/gloves</a></td>\n<td>2018</td>\n</tr>\n<tr>\n<td>kubeadm-vagrant</td>\n<td>基于 VirtualBox 和 Vagrant 在本地启动 K8S 集群</td>\n<td><a href=\"https://github.com/eliu/kubeadm-vagrant\">https://github.com/eliu/kubeadm-vagrant</a></td>\n<td>2018</td>\n</tr>\n<tr>\n<td>openshift-vagrant</td>\n<td>基于 VirtualBox 和 Vagrant 在本地启动 OpenShift 集群</td>\n<td><a href=\"https://github.com/eliu/openshift-vagrant\">https://github.com/eliu/openshift-vagrant</a></td>\n<td>2017</td>\n</tr>\n<tr>\n<td>plsql-utils</td>\n<td>EBS 及 Oracle 数据库常用运维脚本集合</td>\n<td><a href=\"https://github.com/eliu/plsql-utils\">https://github.com/eliu/plsql-utils</a></td>\n<td>2016</td>\n</tr>\n</tbody></table>\n<h2 id=\"联系我\"><a href=\"#联系我\" class=\"headerlink\" title=\"联系我\"></a>联系我</h2><p>很抱歉我没有丰富的社交账号，如果你想和我取得联系，可以给我发电子邮件，以下任意一个邮件地址都可以联系到我。</p>\n<ul>\n<li><a href=\"mailto:&#x65;&#x6c;&#x69;&#x75;&#x68;&#121;&#x40;&#x31;&#x36;&#x33;&#46;&#x63;&#111;&#109;\">&#x65;&#x6c;&#x69;&#x75;&#x68;&#121;&#x40;&#x31;&#x36;&#x33;&#46;&#x63;&#111;&#109;</a></li>\n<li><a href=\"mailto:&#x65;&#114;&#x69;&#100;&#114;&#111;&#105;&#x64;&#x40;&#103;&#109;&#97;&#x69;&#x6c;&#46;&#99;&#111;&#x6d;\">&#x65;&#114;&#x69;&#100;&#114;&#111;&#105;&#x64;&#x40;&#103;&#109;&#97;&#x69;&#x6c;&#46;&#99;&#111;&#x6d;</a></li>\n</ul>\n"},{"title":"categories","date":"2021-03-10T14:59:27.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2021-03-10 22:59:27\ntype: categories\n---\n","updated":"2021-03-10T15:00:32.528Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cmasb6npg00027sos34ascrvk","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2021-03-10T14:57:42.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2021-03-10 22:57:42\ntype: tags\n---\n","updated":"2021-03-10T15:00:18.770Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cmasb6npj00067soscdrybm6a","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"使用 Wine 在 macOS 上运行经典的 Windows 游戏","date":"2021-03-19T06:31:56.000Z","_content":"\n## 写在前面\n\n笔者作为80后，至今仍然对于青春时代曾经伴随着我们的经典游戏念念不忘。暗黑破坏神、魔兽争霸、重返德军总部。。。那毕竟是我们这一代的青春。即使我现在玩不动了，但笔记本电脑中依然保留着这些游戏，偶尔玩一下怀念怀念也好。\n\n我的笔记本现在已经换成 MacBook Pro，运行着 macOS Catalina 操作系统，曾经的经典游戏常规的方法依然无法继续运行了。当然你可能会说，安装一个虚拟机系统，里面跑一个 Windows XP 也可以玩了。这当然可以做到，但是它太重了，而且中间隔着一个虚拟化层，运行效率自然不高。作为搞 IT 的，怎么可以止步于此？\n\n本次介绍一种使用 Wine 运行经典游戏的方法，教程适用于 macOS 操作系统，但思路也适用于 Linux。\n\n<!-- more -->\n\n## Wine 简介\n\n来自维基百科：Wine通过提供一个[兼容层](https://zh.wikipedia.org/wiki/兼容层)来将Windows的系统调用转换成与POSIX标准的系统调用。它还提供了Windows系统运行库的替代品和一些系统组件的替代品。为了避免著作权问题，Wine主要使用黑箱测试逆向工程来编写。\n\n说白了 Wine 和虚拟机的玩法有本质上的区别，Wine 是操作系统层的 API 调用转换，并没有虚拟层，因此运行效率上比虚拟机方式会高很多。\n\n## macOS 下安装 Wine\n\n本次我们将使用 Homebrew 来安装 Wine，Homebrew 是 macOS 下最流行的包管理器，如果您还没有安装 Homebrew，请访问 [Homebrew 官网](https://brew.sh/)详细了解，或者直接在终端使用以下命令进行安装：\n\n```bash\n$ /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n```\n\n接下来我们使用 Homebrew 来安装 Wine:\n\n```bash\n$ sudo spctl --master-disable # 允许未知来源的软件安装\n$ brew tap gcenx/wine\n$ brew cask install --no-quarantine wine-crossover\n```\n\n## 配置 Wine\n\n我们的目标是运行 Windows 下的经典游戏，因此此处所有的配置都是针对这个目标进行的。接下来我们开始配置 Wine 环境。\n\n### 初始化 Wine\n\n我们准备将 Wine 的主目录存储在 `$HOME/.wine/` 下，在终端执行一下命令：\n\n```bash\n$ WINEPREFIX=$HOME/.wine winecfg\n```\n\n此时 WIne 会启动一个包含若干标签页的配置窗口，我们需要设置以下内容：\n\n| 标签页       | 属性                     | 值         | 备注                    |\n| ------------ | ------------------------ | ---------- | ----------------------- |\n| Applications | WIndows Version          | Windows XP |                         |\n| Libraries    | New override for library | ddraw      | 然后点击 `Add` 按钮添加 |\n\n配置窗口截图如下所示：\n\n![winecfg](Play-Windows-Classic-Games-on-macOS/winecfg.png)\n\n设置完成之后，点击 `OK` 按钮保存设置，此时 Wine 的主目录 `$HOME/.wine` 的目录结构看起来是这样的：\n\n```\n.\n├── dosdevices\n│   ├── c: -> ../drive_c\n│   └── z: -> /\n├── drive_c\n│   ├── Program Files\n│   ├── ProgramData\n│   ├── users\n│   └── windows\n├── system.reg\n├── user.reg\n└── userdef.reg\n```\n\n至此，Wine 所有的安装和配置工作全部结束，接下来就是如何在 Wine 中运行经典的游戏了。\n\n### 解决中文乱码\n\n在终端的 shell 配置文件中为 `wine64` 添加别名 `wine`，如下：\n\n```bash\nalias wine=\"env LC_ALL=zh_CN.UTF-8 wine64\"\n```\n\n### 汇总配置项\n\n将以上配置项汇总后保存在 `$HOME/.bashrc` 中，如果当前安装的 shell 是 zsh 的话，则保存在 `$HOME/.zshrc`\n\n```bash\n# 解决报错：terminals database is inaccessible\nexport TERMINFO=/usr/share/terminfo\n# 禁止在终端输出所有调试信息\nexport WINEDEBUG=-all\n# Wine 主目录\nexport WINEPREFIX=~/.wine\n# 解决中文乱码并创建别名\nalias wine=\"env LC_ALL=zh_CN.UTF-8 wine64\"\n```\n\n\n\n## 运行经典游戏\n\n### Diablo II\n\n我们以 Diablo II 为例来进行说明，首先进入目录 `$HOME/.wine/drive_c` ，然后新建目录 `games`：\n\n```bash\n$ cd $HOME/.wine/drive_c\n$ mkdir games\n```\n\n之后，下载免安装版的 Diablo II 游戏到 `$HOME/.wine/drive_c/games/Diablo II`，相信你可以很容易下载到的 :)\n\n然后打开注册表，增加注册表项 `KEY_CURRENT_USER\\Software\\Blizzard Entertainment\\Diablo II\\VideoConfig` 并设置该项的类型为 REG_DWORD，值为 `0`：\n\n![regedit](Play-Windows-Classic-Games-on-macOS/regedit.png)\n\n在终端启动 Diablo II：\n\n```bash\n$ alias d2=\"cd $HOME/.wine/drive_c/games/Diablo\\ II && wine Game.exe -w -direct -txt\"\n$ d2\n```\n\n![DiabloI II](Play-Windows-Classic-Games-on-macOS/d2.png)\n\n至此，Diablo II 游戏的基本设置就已经全部完成。其他的经典游戏步骤类似，笔者已经测试通过了如下经典游戏：\n\n- 暗黑破坏神 II\n- 重返德军总部\n- 魔兽争霸 III （过场动画会报错）\n\n## 附录：终端环境配置汇总\n\n追加如下配置到 `$HOME/.zshrc` 或者 `$HOME/.bashrc`\n\n```bash\n# Fix error `terminals database is inaccessible`\nexport TERMINFO=/usr/share/terminfo\n# Disable debugging message output\nexport WINEDEBUG=-all\n# Set up wine home directory\nexport WINEPREFIX=~/.wine\nexport WINEGAMEHOME=\"$WINEPREFIX/drive_c/games\"\nalias wine=\"env LC_ALL=zh_CN.UTF-8 wine\"\nalias d2=\"cd $WINEGAMEHOME/Diablo\\ II && wine Game.exe -w -direct -txt\"\n```\n\n## 参考链接\n\n- [D2QOL | Mac OSX](https://github.com/whipowill/d2-plugy-qol/blob/master/Guides/MacOSX.md)\n- [D2QOL | Video](https://github.com/whipowill/d2-plugy-qol/blob/master/Guides/Video.md)\n- [macOS Mojave下解决wine中文乱码问题](https://blog.csdn.net/Y1575071736/article/details/91356917)\n- [terminals database is inaccessible 解决办法 | CSDN](https://blog.csdn.net/qq_29695701/article/details/90715653)\n- [Debug Channels - WineHQ Wiki](https://wiki.winehq.org/Debug_Channels)\n\n","source":"_posts/Play-Windows-Classic-Games-on-macOS.md","raw":"---\ntitle: 使用 Wine 在 macOS 上运行经典的 Windows 游戏\ndate: 2021-03-19 14:31:56\ncategories:\n- Classic Games\ntags:\n- wine\n- macOS\n- Diablo II\n---\n\n## 写在前面\n\n笔者作为80后，至今仍然对于青春时代曾经伴随着我们的经典游戏念念不忘。暗黑破坏神、魔兽争霸、重返德军总部。。。那毕竟是我们这一代的青春。即使我现在玩不动了，但笔记本电脑中依然保留着这些游戏，偶尔玩一下怀念怀念也好。\n\n我的笔记本现在已经换成 MacBook Pro，运行着 macOS Catalina 操作系统，曾经的经典游戏常规的方法依然无法继续运行了。当然你可能会说，安装一个虚拟机系统，里面跑一个 Windows XP 也可以玩了。这当然可以做到，但是它太重了，而且中间隔着一个虚拟化层，运行效率自然不高。作为搞 IT 的，怎么可以止步于此？\n\n本次介绍一种使用 Wine 运行经典游戏的方法，教程适用于 macOS 操作系统，但思路也适用于 Linux。\n\n<!-- more -->\n\n## Wine 简介\n\n来自维基百科：Wine通过提供一个[兼容层](https://zh.wikipedia.org/wiki/兼容层)来将Windows的系统调用转换成与POSIX标准的系统调用。它还提供了Windows系统运行库的替代品和一些系统组件的替代品。为了避免著作权问题，Wine主要使用黑箱测试逆向工程来编写。\n\n说白了 Wine 和虚拟机的玩法有本质上的区别，Wine 是操作系统层的 API 调用转换，并没有虚拟层，因此运行效率上比虚拟机方式会高很多。\n\n## macOS 下安装 Wine\n\n本次我们将使用 Homebrew 来安装 Wine，Homebrew 是 macOS 下最流行的包管理器，如果您还没有安装 Homebrew，请访问 [Homebrew 官网](https://brew.sh/)详细了解，或者直接在终端使用以下命令进行安装：\n\n```bash\n$ /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n```\n\n接下来我们使用 Homebrew 来安装 Wine:\n\n```bash\n$ sudo spctl --master-disable # 允许未知来源的软件安装\n$ brew tap gcenx/wine\n$ brew cask install --no-quarantine wine-crossover\n```\n\n## 配置 Wine\n\n我们的目标是运行 Windows 下的经典游戏，因此此处所有的配置都是针对这个目标进行的。接下来我们开始配置 Wine 环境。\n\n### 初始化 Wine\n\n我们准备将 Wine 的主目录存储在 `$HOME/.wine/` 下，在终端执行一下命令：\n\n```bash\n$ WINEPREFIX=$HOME/.wine winecfg\n```\n\n此时 WIne 会启动一个包含若干标签页的配置窗口，我们需要设置以下内容：\n\n| 标签页       | 属性                     | 值         | 备注                    |\n| ------------ | ------------------------ | ---------- | ----------------------- |\n| Applications | WIndows Version          | Windows XP |                         |\n| Libraries    | New override for library | ddraw      | 然后点击 `Add` 按钮添加 |\n\n配置窗口截图如下所示：\n\n![winecfg](Play-Windows-Classic-Games-on-macOS/winecfg.png)\n\n设置完成之后，点击 `OK` 按钮保存设置，此时 Wine 的主目录 `$HOME/.wine` 的目录结构看起来是这样的：\n\n```\n.\n├── dosdevices\n│   ├── c: -> ../drive_c\n│   └── z: -> /\n├── drive_c\n│   ├── Program Files\n│   ├── ProgramData\n│   ├── users\n│   └── windows\n├── system.reg\n├── user.reg\n└── userdef.reg\n```\n\n至此，Wine 所有的安装和配置工作全部结束，接下来就是如何在 Wine 中运行经典的游戏了。\n\n### 解决中文乱码\n\n在终端的 shell 配置文件中为 `wine64` 添加别名 `wine`，如下：\n\n```bash\nalias wine=\"env LC_ALL=zh_CN.UTF-8 wine64\"\n```\n\n### 汇总配置项\n\n将以上配置项汇总后保存在 `$HOME/.bashrc` 中，如果当前安装的 shell 是 zsh 的话，则保存在 `$HOME/.zshrc`\n\n```bash\n# 解决报错：terminals database is inaccessible\nexport TERMINFO=/usr/share/terminfo\n# 禁止在终端输出所有调试信息\nexport WINEDEBUG=-all\n# Wine 主目录\nexport WINEPREFIX=~/.wine\n# 解决中文乱码并创建别名\nalias wine=\"env LC_ALL=zh_CN.UTF-8 wine64\"\n```\n\n\n\n## 运行经典游戏\n\n### Diablo II\n\n我们以 Diablo II 为例来进行说明，首先进入目录 `$HOME/.wine/drive_c` ，然后新建目录 `games`：\n\n```bash\n$ cd $HOME/.wine/drive_c\n$ mkdir games\n```\n\n之后，下载免安装版的 Diablo II 游戏到 `$HOME/.wine/drive_c/games/Diablo II`，相信你可以很容易下载到的 :)\n\n然后打开注册表，增加注册表项 `KEY_CURRENT_USER\\Software\\Blizzard Entertainment\\Diablo II\\VideoConfig` 并设置该项的类型为 REG_DWORD，值为 `0`：\n\n![regedit](Play-Windows-Classic-Games-on-macOS/regedit.png)\n\n在终端启动 Diablo II：\n\n```bash\n$ alias d2=\"cd $HOME/.wine/drive_c/games/Diablo\\ II && wine Game.exe -w -direct -txt\"\n$ d2\n```\n\n![DiabloI II](Play-Windows-Classic-Games-on-macOS/d2.png)\n\n至此，Diablo II 游戏的基本设置就已经全部完成。其他的经典游戏步骤类似，笔者已经测试通过了如下经典游戏：\n\n- 暗黑破坏神 II\n- 重返德军总部\n- 魔兽争霸 III （过场动画会报错）\n\n## 附录：终端环境配置汇总\n\n追加如下配置到 `$HOME/.zshrc` 或者 `$HOME/.bashrc`\n\n```bash\n# Fix error `terminals database is inaccessible`\nexport TERMINFO=/usr/share/terminfo\n# Disable debugging message output\nexport WINEDEBUG=-all\n# Set up wine home directory\nexport WINEPREFIX=~/.wine\nexport WINEGAMEHOME=\"$WINEPREFIX/drive_c/games\"\nalias wine=\"env LC_ALL=zh_CN.UTF-8 wine\"\nalias d2=\"cd $WINEGAMEHOME/Diablo\\ II && wine Game.exe -w -direct -txt\"\n```\n\n## 参考链接\n\n- [D2QOL | Mac OSX](https://github.com/whipowill/d2-plugy-qol/blob/master/Guides/MacOSX.md)\n- [D2QOL | Video](https://github.com/whipowill/d2-plugy-qol/blob/master/Guides/Video.md)\n- [macOS Mojave下解决wine中文乱码问题](https://blog.csdn.net/Y1575071736/article/details/91356917)\n- [terminals database is inaccessible 解决办法 | CSDN](https://blog.csdn.net/qq_29695701/article/details/90715653)\n- [Debug Channels - WineHQ Wiki](https://wiki.winehq.org/Debug_Channels)\n\n","slug":"Play-Windows-Classic-Games-on-macOS","published":1,"updated":"2024-01-26T14:33:32.382Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmasb6npe00017sos9e90b6ox","content":"<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><p>笔者作为80后，至今仍然对于青春时代曾经伴随着我们的经典游戏念念不忘。暗黑破坏神、魔兽争霸、重返德军总部。。。那毕竟是我们这一代的青春。即使我现在玩不动了，但笔记本电脑中依然保留着这些游戏，偶尔玩一下怀念怀念也好。</p>\n<p>我的笔记本现在已经换成 MacBook Pro，运行着 macOS Catalina 操作系统，曾经的经典游戏常规的方法依然无法继续运行了。当然你可能会说，安装一个虚拟机系统，里面跑一个 Windows XP 也可以玩了。这当然可以做到，但是它太重了，而且中间隔着一个虚拟化层，运行效率自然不高。作为搞 IT 的，怎么可以止步于此？</p>\n<p>本次介绍一种使用 Wine 运行经典游戏的方法，教程适用于 macOS 操作系统，但思路也适用于 Linux。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"Wine-简介\"><a href=\"#Wine-简介\" class=\"headerlink\" title=\"Wine 简介\"></a>Wine 简介</h2><p>来自维基百科：Wine通过提供一个<a href=\"https://zh.wikipedia.org/wiki/%E5%85%BC%E5%AE%B9%E5%B1%82\">兼容层</a>来将Windows的系统调用转换成与POSIX标准的系统调用。它还提供了Windows系统运行库的替代品和一些系统组件的替代品。为了避免著作权问题，Wine主要使用黑箱测试逆向工程来编写。</p>\n<p>说白了 Wine 和虚拟机的玩法有本质上的区别，Wine 是操作系统层的 API 调用转换，并没有虚拟层，因此运行效率上比虚拟机方式会高很多。</p>\n<h2 id=\"macOS-下安装-Wine\"><a href=\"#macOS-下安装-Wine\" class=\"headerlink\" title=\"macOS 下安装 Wine\"></a>macOS 下安装 Wine</h2><p>本次我们将使用 Homebrew 来安装 Wine，Homebrew 是 macOS 下最流行的包管理器，如果您还没有安装 Homebrew，请访问 <a href=\"https://brew.sh/\">Homebrew 官网</a>详细了解，或者直接在终端使用以下命令进行安装：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ /bin/bash -c <span class=\"string\">&quot;<span class=\"subst\">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>接下来我们使用 Homebrew 来安装 Wine:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo spctl --master-disable <span class=\"comment\"># 允许未知来源的软件安装</span></span><br><span class=\"line\">$ brew tap gcenx/wine</span><br><span class=\"line\">$ brew cask install --no-quarantine wine-crossover</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"配置-Wine\"><a href=\"#配置-Wine\" class=\"headerlink\" title=\"配置 Wine\"></a>配置 Wine</h2><p>我们的目标是运行 Windows 下的经典游戏，因此此处所有的配置都是针对这个目标进行的。接下来我们开始配置 Wine 环境。</p>\n<h3 id=\"初始化-Wine\"><a href=\"#初始化-Wine\" class=\"headerlink\" title=\"初始化 Wine\"></a>初始化 Wine</h3><p>我们准备将 Wine 的主目录存储在 <code>$HOME/.wine/</code> 下，在终端执行一下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ WINEPREFIX=<span class=\"variable\">$HOME</span>/.wine winecfg</span><br></pre></td></tr></table></figure>\n\n<p>此时 WIne 会启动一个包含若干标签页的配置窗口，我们需要设置以下内容：</p>\n<table>\n<thead>\n<tr>\n<th>标签页</th>\n<th>属性</th>\n<th>值</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Applications</td>\n<td>WIndows Version</td>\n<td>Windows XP</td>\n<td></td>\n</tr>\n<tr>\n<td>Libraries</td>\n<td>New override for library</td>\n<td>ddraw</td>\n<td>然后点击 <code>Add</code> 按钮添加</td>\n</tr>\n</tbody></table>\n<p>配置窗口截图如下所示：</p>\n<p><img data-src=\"/2021/03/19/Play-Windows-Classic-Games-on-macOS/winecfg.png\" alt=\"winecfg\"></p>\n<p>设置完成之后，点击 <code>OK</code> 按钮保存设置，此时 Wine 的主目录 <code>$HOME/.wine</code> 的目录结构看起来是这样的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── dosdevices</span><br><span class=\"line\">│   ├── c: -&gt; ..&#x2F;drive_c</span><br><span class=\"line\">│   └── z: -&gt; &#x2F;</span><br><span class=\"line\">├── drive_c</span><br><span class=\"line\">│   ├── Program Files</span><br><span class=\"line\">│   ├── ProgramData</span><br><span class=\"line\">│   ├── users</span><br><span class=\"line\">│   └── windows</span><br><span class=\"line\">├── system.reg</span><br><span class=\"line\">├── user.reg</span><br><span class=\"line\">└── userdef.reg</span><br></pre></td></tr></table></figure>\n\n<p>至此，Wine 所有的安装和配置工作全部结束，接下来就是如何在 Wine 中运行经典的游戏了。</p>\n<h3 id=\"解决中文乱码\"><a href=\"#解决中文乱码\" class=\"headerlink\" title=\"解决中文乱码\"></a>解决中文乱码</h3><p>在终端的 shell 配置文件中为 <code>wine64</code> 添加别名 <code>wine</code>，如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">alias</span> wine=<span class=\"string\">&quot;env LC_ALL=zh_CN.UTF-8 wine64&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"汇总配置项\"><a href=\"#汇总配置项\" class=\"headerlink\" title=\"汇总配置项\"></a>汇总配置项</h3><p>将以上配置项汇总后保存在 <code>$HOME/.bashrc</code> 中，如果当前安装的 shell 是 zsh 的话，则保存在 <code>$HOME/.zshrc</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 解决报错：terminals database is inaccessible</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> TERMINFO=/usr/share/terminfo</span><br><span class=\"line\"><span class=\"comment\"># 禁止在终端输出所有调试信息</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> WINEDEBUG=-all</span><br><span class=\"line\"><span class=\"comment\"># Wine 主目录</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> WINEPREFIX=~/.wine</span><br><span class=\"line\"><span class=\"comment\"># 解决中文乱码并创建别名</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> wine=<span class=\"string\">&quot;env LC_ALL=zh_CN.UTF-8 wine64&quot;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"运行经典游戏\"><a href=\"#运行经典游戏\" class=\"headerlink\" title=\"运行经典游戏\"></a>运行经典游戏</h2><h3 id=\"Diablo-II\"><a href=\"#Diablo-II\" class=\"headerlink\" title=\"Diablo II\"></a>Diablo II</h3><p>我们以 Diablo II 为例来进行说明，首先进入目录 <code>$HOME/.wine/drive_c</code> ，然后新建目录 <code>games</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> <span class=\"variable\">$HOME</span>/.wine/drive_c</span><br><span class=\"line\">$ mkdir games</span><br></pre></td></tr></table></figure>\n\n<p>之后，下载免安装版的 Diablo II 游戏到 <code>$HOME/.wine/drive_c/games/Diablo II</code>，相信你可以很容易下载到的 :)</p>\n<p>然后打开注册表，增加注册表项 <code>KEY_CURRENT_USER\\Software\\Blizzard Entertainment\\Diablo II\\VideoConfig</code> 并设置该项的类型为 REG_DWORD，值为 <code>0</code>：</p>\n<p><img data-src=\"/2021/03/19/Play-Windows-Classic-Games-on-macOS/regedit.png\" alt=\"regedit\"></p>\n<p>在终端启动 Diablo II：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">alias</span> d2=<span class=\"string\">&quot;cd <span class=\"variable\">$HOME</span>/.wine/drive_c/games/Diablo\\ II &amp;&amp; wine Game.exe -w -direct -txt&quot;</span></span><br><span class=\"line\">$ d2</span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"/2021/03/19/Play-Windows-Classic-Games-on-macOS/d2.png\" alt=\"DiabloI II\"></p>\n<p>至此，Diablo II 游戏的基本设置就已经全部完成。其他的经典游戏步骤类似，笔者已经测试通过了如下经典游戏：</p>\n<ul>\n<li>暗黑破坏神 II</li>\n<li>重返德军总部</li>\n<li>魔兽争霸 III （过场动画会报错）</li>\n</ul>\n<h2 id=\"附录：终端环境配置汇总\"><a href=\"#附录：终端环境配置汇总\" class=\"headerlink\" title=\"附录：终端环境配置汇总\"></a>附录：终端环境配置汇总</h2><p>追加如下配置到 <code>$HOME/.zshrc</code> 或者 <code>$HOME/.bashrc</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Fix error `terminals database is inaccessible`</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> TERMINFO=/usr/share/terminfo</span><br><span class=\"line\"><span class=\"comment\"># Disable debugging message output</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> WINEDEBUG=-all</span><br><span class=\"line\"><span class=\"comment\"># Set up wine home directory</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> WINEPREFIX=~/.wine</span><br><span class=\"line\"><span class=\"built_in\">export</span> WINEGAMEHOME=<span class=\"string\">&quot;<span class=\"variable\">$WINEPREFIX</span>/drive_c/games&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> wine=<span class=\"string\">&quot;env LC_ALL=zh_CN.UTF-8 wine&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> d2=<span class=\"string\">&quot;cd <span class=\"variable\">$WINEGAMEHOME</span>/Diablo\\ II &amp;&amp; wine Game.exe -w -direct -txt&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><ul>\n<li><a href=\"https://github.com/whipowill/d2-plugy-qol/blob/master/Guides/MacOSX.md\">D2QOL | Mac OSX</a></li>\n<li><a href=\"https://github.com/whipowill/d2-plugy-qol/blob/master/Guides/Video.md\">D2QOL | Video</a></li>\n<li><a href=\"https://blog.csdn.net/Y1575071736/article/details/91356917\">macOS Mojave下解决wine中文乱码问题</a></li>\n<li><a href=\"https://blog.csdn.net/qq_29695701/article/details/90715653\">terminals database is inaccessible 解决办法 | CSDN</a></li>\n<li><a href=\"https://wiki.winehq.org/Debug_Channels\">Debug Channels - WineHQ Wiki</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><p>笔者作为80后，至今仍然对于青春时代曾经伴随着我们的经典游戏念念不忘。暗黑破坏神、魔兽争霸、重返德军总部。。。那毕竟是我们这一代的青春。即使我现在玩不动了，但笔记本电脑中依然保留着这些游戏，偶尔玩一下怀念怀念也好。</p>\n<p>我的笔记本现在已经换成 MacBook Pro，运行着 macOS Catalina 操作系统，曾经的经典游戏常规的方法依然无法继续运行了。当然你可能会说，安装一个虚拟机系统，里面跑一个 Windows XP 也可以玩了。这当然可以做到，但是它太重了，而且中间隔着一个虚拟化层，运行效率自然不高。作为搞 IT 的，怎么可以止步于此？</p>\n<p>本次介绍一种使用 Wine 运行经典游戏的方法，教程适用于 macOS 操作系统，但思路也适用于 Linux。</p>","more":"<h2 id=\"Wine-简介\"><a href=\"#Wine-简介\" class=\"headerlink\" title=\"Wine 简介\"></a>Wine 简介</h2><p>来自维基百科：Wine通过提供一个<a href=\"https://zh.wikipedia.org/wiki/%E5%85%BC%E5%AE%B9%E5%B1%82\">兼容层</a>来将Windows的系统调用转换成与POSIX标准的系统调用。它还提供了Windows系统运行库的替代品和一些系统组件的替代品。为了避免著作权问题，Wine主要使用黑箱测试逆向工程来编写。</p>\n<p>说白了 Wine 和虚拟机的玩法有本质上的区别，Wine 是操作系统层的 API 调用转换，并没有虚拟层，因此运行效率上比虚拟机方式会高很多。</p>\n<h2 id=\"macOS-下安装-Wine\"><a href=\"#macOS-下安装-Wine\" class=\"headerlink\" title=\"macOS 下安装 Wine\"></a>macOS 下安装 Wine</h2><p>本次我们将使用 Homebrew 来安装 Wine，Homebrew 是 macOS 下最流行的包管理器，如果您还没有安装 Homebrew，请访问 <a href=\"https://brew.sh/\">Homebrew 官网</a>详细了解，或者直接在终端使用以下命令进行安装：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ /bin/bash -c <span class=\"string\">&quot;<span class=\"subst\">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>接下来我们使用 Homebrew 来安装 Wine:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo spctl --master-disable <span class=\"comment\"># 允许未知来源的软件安装</span></span><br><span class=\"line\">$ brew tap gcenx/wine</span><br><span class=\"line\">$ brew cask install --no-quarantine wine-crossover</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"配置-Wine\"><a href=\"#配置-Wine\" class=\"headerlink\" title=\"配置 Wine\"></a>配置 Wine</h2><p>我们的目标是运行 Windows 下的经典游戏，因此此处所有的配置都是针对这个目标进行的。接下来我们开始配置 Wine 环境。</p>\n<h3 id=\"初始化-Wine\"><a href=\"#初始化-Wine\" class=\"headerlink\" title=\"初始化 Wine\"></a>初始化 Wine</h3><p>我们准备将 Wine 的主目录存储在 <code>$HOME/.wine/</code> 下，在终端执行一下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ WINEPREFIX=<span class=\"variable\">$HOME</span>/.wine winecfg</span><br></pre></td></tr></table></figure>\n\n<p>此时 WIne 会启动一个包含若干标签页的配置窗口，我们需要设置以下内容：</p>\n<table>\n<thead>\n<tr>\n<th>标签页</th>\n<th>属性</th>\n<th>值</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Applications</td>\n<td>WIndows Version</td>\n<td>Windows XP</td>\n<td></td>\n</tr>\n<tr>\n<td>Libraries</td>\n<td>New override for library</td>\n<td>ddraw</td>\n<td>然后点击 <code>Add</code> 按钮添加</td>\n</tr>\n</tbody></table>\n<p>配置窗口截图如下所示：</p>\n<p><img data-src=\"/2021/03/19/Play-Windows-Classic-Games-on-macOS/winecfg.png\" alt=\"winecfg\"></p>\n<p>设置完成之后，点击 <code>OK</code> 按钮保存设置，此时 Wine 的主目录 <code>$HOME/.wine</code> 的目录结构看起来是这样的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── dosdevices</span><br><span class=\"line\">│   ├── c: -&gt; ..&#x2F;drive_c</span><br><span class=\"line\">│   └── z: -&gt; &#x2F;</span><br><span class=\"line\">├── drive_c</span><br><span class=\"line\">│   ├── Program Files</span><br><span class=\"line\">│   ├── ProgramData</span><br><span class=\"line\">│   ├── users</span><br><span class=\"line\">│   └── windows</span><br><span class=\"line\">├── system.reg</span><br><span class=\"line\">├── user.reg</span><br><span class=\"line\">└── userdef.reg</span><br></pre></td></tr></table></figure>\n\n<p>至此，Wine 所有的安装和配置工作全部结束，接下来就是如何在 Wine 中运行经典的游戏了。</p>\n<h3 id=\"解决中文乱码\"><a href=\"#解决中文乱码\" class=\"headerlink\" title=\"解决中文乱码\"></a>解决中文乱码</h3><p>在终端的 shell 配置文件中为 <code>wine64</code> 添加别名 <code>wine</code>，如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">alias</span> wine=<span class=\"string\">&quot;env LC_ALL=zh_CN.UTF-8 wine64&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"汇总配置项\"><a href=\"#汇总配置项\" class=\"headerlink\" title=\"汇总配置项\"></a>汇总配置项</h3><p>将以上配置项汇总后保存在 <code>$HOME/.bashrc</code> 中，如果当前安装的 shell 是 zsh 的话，则保存在 <code>$HOME/.zshrc</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 解决报错：terminals database is inaccessible</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> TERMINFO=/usr/share/terminfo</span><br><span class=\"line\"><span class=\"comment\"># 禁止在终端输出所有调试信息</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> WINEDEBUG=-all</span><br><span class=\"line\"><span class=\"comment\"># Wine 主目录</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> WINEPREFIX=~/.wine</span><br><span class=\"line\"><span class=\"comment\"># 解决中文乱码并创建别名</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> wine=<span class=\"string\">&quot;env LC_ALL=zh_CN.UTF-8 wine64&quot;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"运行经典游戏\"><a href=\"#运行经典游戏\" class=\"headerlink\" title=\"运行经典游戏\"></a>运行经典游戏</h2><h3 id=\"Diablo-II\"><a href=\"#Diablo-II\" class=\"headerlink\" title=\"Diablo II\"></a>Diablo II</h3><p>我们以 Diablo II 为例来进行说明，首先进入目录 <code>$HOME/.wine/drive_c</code> ，然后新建目录 <code>games</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> <span class=\"variable\">$HOME</span>/.wine/drive_c</span><br><span class=\"line\">$ mkdir games</span><br></pre></td></tr></table></figure>\n\n<p>之后，下载免安装版的 Diablo II 游戏到 <code>$HOME/.wine/drive_c/games/Diablo II</code>，相信你可以很容易下载到的 :)</p>\n<p>然后打开注册表，增加注册表项 <code>KEY_CURRENT_USER\\Software\\Blizzard Entertainment\\Diablo II\\VideoConfig</code> 并设置该项的类型为 REG_DWORD，值为 <code>0</code>：</p>\n<p><img data-src=\"/2021/03/19/Play-Windows-Classic-Games-on-macOS/regedit.png\" alt=\"regedit\"></p>\n<p>在终端启动 Diablo II：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">alias</span> d2=<span class=\"string\">&quot;cd <span class=\"variable\">$HOME</span>/.wine/drive_c/games/Diablo\\ II &amp;&amp; wine Game.exe -w -direct -txt&quot;</span></span><br><span class=\"line\">$ d2</span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"/2021/03/19/Play-Windows-Classic-Games-on-macOS/d2.png\" alt=\"DiabloI II\"></p>\n<p>至此，Diablo II 游戏的基本设置就已经全部完成。其他的经典游戏步骤类似，笔者已经测试通过了如下经典游戏：</p>\n<ul>\n<li>暗黑破坏神 II</li>\n<li>重返德军总部</li>\n<li>魔兽争霸 III （过场动画会报错）</li>\n</ul>\n<h2 id=\"附录：终端环境配置汇总\"><a href=\"#附录：终端环境配置汇总\" class=\"headerlink\" title=\"附录：终端环境配置汇总\"></a>附录：终端环境配置汇总</h2><p>追加如下配置到 <code>$HOME/.zshrc</code> 或者 <code>$HOME/.bashrc</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Fix error `terminals database is inaccessible`</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> TERMINFO=/usr/share/terminfo</span><br><span class=\"line\"><span class=\"comment\"># Disable debugging message output</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> WINEDEBUG=-all</span><br><span class=\"line\"><span class=\"comment\"># Set up wine home directory</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> WINEPREFIX=~/.wine</span><br><span class=\"line\"><span class=\"built_in\">export</span> WINEGAMEHOME=<span class=\"string\">&quot;<span class=\"variable\">$WINEPREFIX</span>/drive_c/games&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> wine=<span class=\"string\">&quot;env LC_ALL=zh_CN.UTF-8 wine&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> d2=<span class=\"string\">&quot;cd <span class=\"variable\">$WINEGAMEHOME</span>/Diablo\\ II &amp;&amp; wine Game.exe -w -direct -txt&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><ul>\n<li><a href=\"https://github.com/whipowill/d2-plugy-qol/blob/master/Guides/MacOSX.md\">D2QOL | Mac OSX</a></li>\n<li><a href=\"https://github.com/whipowill/d2-plugy-qol/blob/master/Guides/Video.md\">D2QOL | Video</a></li>\n<li><a href=\"https://blog.csdn.net/Y1575071736/article/details/91356917\">macOS Mojave下解决wine中文乱码问题</a></li>\n<li><a href=\"https://blog.csdn.net/qq_29695701/article/details/90715653\">terminals database is inaccessible 解决办法 | CSDN</a></li>\n<li><a href=\"https://wiki.winehq.org/Debug_Channels\">Debug Channels - WineHQ Wiki</a></li>\n</ul>"},{"title":"如何生成 Markdown 格式的 Git 日志","date":"2020-12-30T08:22:42.000Z","_content":"\n如今 Markdown 格式的文档在技术领域无处不在，尤其是在开源工具和技术文档方面，例如 GitHub、GitLab 等等基于 Git 的版本控制平台。一般情况下，Git 使用 `git-log` 来生成两次提交之间的变更日志信息。有时我们希望将此次版本发布的更新日志抽取出来，以 markdown 格式作为发布的版本的变更日志内容。\n\n<!-- more -->\n\n### git-log\n\n以下是我们利用 git-log 命令格式化出来一段 [eliu/kt-connect-rbac](https://github.com/eliu/kt-connect-rbac) 仓库的变更日志：\n\n```shell\n$ git log --no-merges --format=\"%h %ad %an %s\" --date=short HEAD\nda7815d 2020-09-29 eliu imp: make 6443 port by default if not specified\n73ef9aa 2020-05-05 eliu imp: update README\n6bd8192 2020-05-05 eliu fix: correct default value\n003bb7e 2020-05-05 eliu fix: execute init_config inside prerequisite\n9f1326c 2020-05-04 eliu imp: refactor all scripts into one kt-rbac.sh\nc34a405 2020-03-20 Liu Hongyu Create LICENSE\nb9e3175 2020-03-20 eliu first commit\n```\n\n其中 `--no-merges` 表示通过 Merge 请求所产生的提交可忽略，`--date=short` 表示以简短的日期格式输出(yyyy-mm-dd)，`--format=\"xxxxx\"` 表示日志输出的格式模板，具体可输入 `git log --help` 了解详细的占位符含义。\n\n### 加工成 Markdown 格式\n\n我们将 `--format` 选项稍加调整即可变成符合 markdown 格式的表格内容，例如：\n\n```shell\n# --format=\"| %h | %ad | %an | %s |\"\n```\n\n再辅以表格的标题内容即可变成完整的 MD 格式的变更日志内容：\n\n![sample](git-log-to-markdown/sample.png)\n\n### changelog.sh\n\n根据以上的思路，我这里写了一个可以在终端快速生成 Markdown 格式的变更日志的脚本 changelog.sh，使用方法如下：\n\n```shell\n$ changelog.sh --help\n\nUSAGE\n    changelog.sh [--since [VERSION]] [--until [VERSION]]\n\nOPTIONS\n    -h | --help)      Print help\n    -v | --version)   Print version info\n    -p | --prefix)    If provided, search all sub-folders with this prefix.\n                      Otherwise process current directory.\n    -s | --since)     Commit id from\n    -u | --until)     Commit id to\n\nEXAMPLES\n    1. Generate all change logs between 1.0.1 and 1.0.2\n\n        $ changelog.sh --since 1.0.1 --until 1.0.2\n\n    2. Generate all change logs of version 1.0.2 from the very beginning\n\n        $ changelog.sh --until 1.0.2\n\n    3. Generate all change logs since version 1.0.2\n\n        $ changelog.sh --since 1.0.2\n\n```\n\n脚本可以为当前所在的git仓库目录生成变更日志文件，也支持将一组相似的仓库批量生成变更日志，例如：\n\n```shell\n$ changelog.sh --prefix kt --until HEAD\n[INFO] CHANGELOG will be written to file CHANGELOG-HEAD.md\n[INFO] Appending change logs for kt-connect-rbac ...\n```\n\n此时在脚本所在的目录中生成了一个 Markdown 格式的日志文件 `CHANGELOG-HEAD.md`, 使用 Markdown 编辑器打开该文件即可得到上面截图的效果。脚本提供了 `--prefix`, `--since` 和 `--until` 选项可以使用。\n\n项目地址：[eliu/git-log-markdown: Generate a markdown format change-log file for git repos. (github.com)](https://github.com/eliu/git-log-markdown)\n\n","source":"_posts/git-log-to-markdown.md","raw":"---\ntitle: 如何生成 Markdown 格式的 Git 日志\ndate: 2020-12-30 16:22:42\ncategories:\n- git\ntags:\n- git\n- 小技巧\n---\n\n如今 Markdown 格式的文档在技术领域无处不在，尤其是在开源工具和技术文档方面，例如 GitHub、GitLab 等等基于 Git 的版本控制平台。一般情况下，Git 使用 `git-log` 来生成两次提交之间的变更日志信息。有时我们希望将此次版本发布的更新日志抽取出来，以 markdown 格式作为发布的版本的变更日志内容。\n\n<!-- more -->\n\n### git-log\n\n以下是我们利用 git-log 命令格式化出来一段 [eliu/kt-connect-rbac](https://github.com/eliu/kt-connect-rbac) 仓库的变更日志：\n\n```shell\n$ git log --no-merges --format=\"%h %ad %an %s\" --date=short HEAD\nda7815d 2020-09-29 eliu imp: make 6443 port by default if not specified\n73ef9aa 2020-05-05 eliu imp: update README\n6bd8192 2020-05-05 eliu fix: correct default value\n003bb7e 2020-05-05 eliu fix: execute init_config inside prerequisite\n9f1326c 2020-05-04 eliu imp: refactor all scripts into one kt-rbac.sh\nc34a405 2020-03-20 Liu Hongyu Create LICENSE\nb9e3175 2020-03-20 eliu first commit\n```\n\n其中 `--no-merges` 表示通过 Merge 请求所产生的提交可忽略，`--date=short` 表示以简短的日期格式输出(yyyy-mm-dd)，`--format=\"xxxxx\"` 表示日志输出的格式模板，具体可输入 `git log --help` 了解详细的占位符含义。\n\n### 加工成 Markdown 格式\n\n我们将 `--format` 选项稍加调整即可变成符合 markdown 格式的表格内容，例如：\n\n```shell\n# --format=\"| %h | %ad | %an | %s |\"\n```\n\n再辅以表格的标题内容即可变成完整的 MD 格式的变更日志内容：\n\n![sample](git-log-to-markdown/sample.png)\n\n### changelog.sh\n\n根据以上的思路，我这里写了一个可以在终端快速生成 Markdown 格式的变更日志的脚本 changelog.sh，使用方法如下：\n\n```shell\n$ changelog.sh --help\n\nUSAGE\n    changelog.sh [--since [VERSION]] [--until [VERSION]]\n\nOPTIONS\n    -h | --help)      Print help\n    -v | --version)   Print version info\n    -p | --prefix)    If provided, search all sub-folders with this prefix.\n                      Otherwise process current directory.\n    -s | --since)     Commit id from\n    -u | --until)     Commit id to\n\nEXAMPLES\n    1. Generate all change logs between 1.0.1 and 1.0.2\n\n        $ changelog.sh --since 1.0.1 --until 1.0.2\n\n    2. Generate all change logs of version 1.0.2 from the very beginning\n\n        $ changelog.sh --until 1.0.2\n\n    3. Generate all change logs since version 1.0.2\n\n        $ changelog.sh --since 1.0.2\n\n```\n\n脚本可以为当前所在的git仓库目录生成变更日志文件，也支持将一组相似的仓库批量生成变更日志，例如：\n\n```shell\n$ changelog.sh --prefix kt --until HEAD\n[INFO] CHANGELOG will be written to file CHANGELOG-HEAD.md\n[INFO] Appending change logs for kt-connect-rbac ...\n```\n\n此时在脚本所在的目录中生成了一个 Markdown 格式的日志文件 `CHANGELOG-HEAD.md`, 使用 Markdown 编辑器打开该文件即可得到上面截图的效果。脚本提供了 `--prefix`, `--since` 和 `--until` 选项可以使用。\n\n项目地址：[eliu/git-log-markdown: Generate a markdown format change-log file for git repos. (github.com)](https://github.com/eliu/git-log-markdown)\n\n","slug":"git-log-to-markdown","published":1,"updated":"2023-11-21T13:18:01.227Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmasb6npg00037sos2l9123jo","content":"<p>如今 Markdown 格式的文档在技术领域无处不在，尤其是在开源工具和技术文档方面，例如 GitHub、GitLab 等等基于 Git 的版本控制平台。一般情况下，Git 使用 <code>git-log</code> 来生成两次提交之间的变更日志信息。有时我们希望将此次版本发布的更新日志抽取出来，以 markdown 格式作为发布的版本的变更日志内容。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"git-log\"><a href=\"#git-log\" class=\"headerlink\" title=\"git-log\"></a>git-log</h3><p>以下是我们利用 git-log 命令格式化出来一段 <a href=\"https://github.com/eliu/kt-connect-rbac\">eliu/kt-connect-rbac</a> 仓库的变更日志：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git <span class=\"built_in\">log</span> --no-merges --format=<span class=\"string\">&quot;%h %ad %an %s&quot;</span> --date=short HEAD</span></span><br><span class=\"line\">da7815d 2020-09-29 eliu imp: make 6443 port by default if not specified</span><br><span class=\"line\">73ef9aa 2020-05-05 eliu imp: update README</span><br><span class=\"line\">6bd8192 2020-05-05 eliu fix: correct default value</span><br><span class=\"line\">003bb7e 2020-05-05 eliu fix: execute init_config inside prerequisite</span><br><span class=\"line\">9f1326c 2020-05-04 eliu imp: refactor all scripts into one kt-rbac.sh</span><br><span class=\"line\">c34a405 2020-03-20 Liu Hongyu Create LICENSE</span><br><span class=\"line\">b9e3175 2020-03-20 eliu first commit</span><br></pre></td></tr></table></figure>\n\n<p>其中 <code>--no-merges</code> 表示通过 Merge 请求所产生的提交可忽略，<code>--date=short</code> 表示以简短的日期格式输出(yyyy-mm-dd)，<code>--format=&quot;xxxxx&quot;</code> 表示日志输出的格式模板，具体可输入 <code>git log --help</code> 了解详细的占位符含义。</p>\n<h3 id=\"加工成-Markdown-格式\"><a href=\"#加工成-Markdown-格式\" class=\"headerlink\" title=\"加工成 Markdown 格式\"></a>加工成 Markdown 格式</h3><p>我们将 <code>--format</code> 选项稍加调整即可变成符合 markdown 格式的表格内容，例如：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> --format=<span class=\"string\">&quot;| %h | %ad | %an | %s |&quot;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>再辅以表格的标题内容即可变成完整的 MD 格式的变更日志内容：</p>\n<p><img data-src=\"/2020/12/30/git-log-to-markdown/sample.png\" alt=\"sample\"></p>\n<h3 id=\"changelog-sh\"><a href=\"#changelog-sh\" class=\"headerlink\" title=\"changelog.sh\"></a>changelog.sh</h3><p>根据以上的思路，我这里写了一个可以在终端快速生成 Markdown 格式的变更日志的脚本 changelog.sh，使用方法如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> changelog.sh --<span class=\"built_in\">help</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">USAGE</span><br><span class=\"line\">    changelog.sh [--since [VERSION]] [--until [VERSION]]</span><br><span class=\"line\"></span><br><span class=\"line\">OPTIONS</span><br><span class=\"line\">    -h | --help)      Print help</span><br><span class=\"line\">    -v | --version)   Print version info</span><br><span class=\"line\">    -p | --prefix)    If provided, search all sub-folders with this prefix.</span><br><span class=\"line\">                      Otherwise process current directory.</span><br><span class=\"line\">    -s | --since)     Commit id from</span><br><span class=\"line\">    -u | --until)     Commit id to</span><br><span class=\"line\"></span><br><span class=\"line\">EXAMPLES</span><br><span class=\"line\">    1. Generate all change logs between 1.0.1 and 1.0.2</span><br><span class=\"line\"></span><br><span class=\"line\">        $ changelog.sh --since 1.0.1 --until 1.0.2</span><br><span class=\"line\"></span><br><span class=\"line\">    2. Generate all change logs of version 1.0.2 from the very beginning</span><br><span class=\"line\"></span><br><span class=\"line\">        $ changelog.sh --until 1.0.2</span><br><span class=\"line\"></span><br><span class=\"line\">    3. Generate all change logs since version 1.0.2</span><br><span class=\"line\"></span><br><span class=\"line\">        $ changelog.sh --since 1.0.2</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>脚本可以为当前所在的git仓库目录生成变更日志文件，也支持将一组相似的仓库批量生成变更日志，例如：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> changelog.sh --prefix kt --until HEAD</span></span><br><span class=\"line\">[INFO] CHANGELOG will be written to file CHANGELOG-HEAD.md</span><br><span class=\"line\">[INFO] Appending change logs for kt-connect-rbac ...</span><br></pre></td></tr></table></figure>\n\n<p>此时在脚本所在的目录中生成了一个 Markdown 格式的日志文件 <code>CHANGELOG-HEAD.md</code>, 使用 Markdown 编辑器打开该文件即可得到上面截图的效果。脚本提供了 <code>--prefix</code>, <code>--since</code> 和 <code>--until</code> 选项可以使用。</p>\n<p>项目地址：<a href=\"https://github.com/eliu/git-log-markdown\">eliu/git-log-markdown: Generate a markdown format change-log file for git repos. (github.com)</a></p>\n","site":{"data":{}},"excerpt":"<p>如今 Markdown 格式的文档在技术领域无处不在，尤其是在开源工具和技术文档方面，例如 GitHub、GitLab 等等基于 Git 的版本控制平台。一般情况下，Git 使用 <code>git-log</code> 来生成两次提交之间的变更日志信息。有时我们希望将此次版本发布的更新日志抽取出来，以 markdown 格式作为发布的版本的变更日志内容。</p>","more":"<h3 id=\"git-log\"><a href=\"#git-log\" class=\"headerlink\" title=\"git-log\"></a>git-log</h3><p>以下是我们利用 git-log 命令格式化出来一段 <a href=\"https://github.com/eliu/kt-connect-rbac\">eliu/kt-connect-rbac</a> 仓库的变更日志：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git <span class=\"built_in\">log</span> --no-merges --format=<span class=\"string\">&quot;%h %ad %an %s&quot;</span> --date=short HEAD</span></span><br><span class=\"line\">da7815d 2020-09-29 eliu imp: make 6443 port by default if not specified</span><br><span class=\"line\">73ef9aa 2020-05-05 eliu imp: update README</span><br><span class=\"line\">6bd8192 2020-05-05 eliu fix: correct default value</span><br><span class=\"line\">003bb7e 2020-05-05 eliu fix: execute init_config inside prerequisite</span><br><span class=\"line\">9f1326c 2020-05-04 eliu imp: refactor all scripts into one kt-rbac.sh</span><br><span class=\"line\">c34a405 2020-03-20 Liu Hongyu Create LICENSE</span><br><span class=\"line\">b9e3175 2020-03-20 eliu first commit</span><br></pre></td></tr></table></figure>\n\n<p>其中 <code>--no-merges</code> 表示通过 Merge 请求所产生的提交可忽略，<code>--date=short</code> 表示以简短的日期格式输出(yyyy-mm-dd)，<code>--format=&quot;xxxxx&quot;</code> 表示日志输出的格式模板，具体可输入 <code>git log --help</code> 了解详细的占位符含义。</p>\n<h3 id=\"加工成-Markdown-格式\"><a href=\"#加工成-Markdown-格式\" class=\"headerlink\" title=\"加工成 Markdown 格式\"></a>加工成 Markdown 格式</h3><p>我们将 <code>--format</code> 选项稍加调整即可变成符合 markdown 格式的表格内容，例如：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> --format=<span class=\"string\">&quot;| %h | %ad | %an | %s |&quot;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>再辅以表格的标题内容即可变成完整的 MD 格式的变更日志内容：</p>\n<p><img data-src=\"/2020/12/30/git-log-to-markdown/sample.png\" alt=\"sample\"></p>\n<h3 id=\"changelog-sh\"><a href=\"#changelog-sh\" class=\"headerlink\" title=\"changelog.sh\"></a>changelog.sh</h3><p>根据以上的思路，我这里写了一个可以在终端快速生成 Markdown 格式的变更日志的脚本 changelog.sh，使用方法如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> changelog.sh --<span class=\"built_in\">help</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">USAGE</span><br><span class=\"line\">    changelog.sh [--since [VERSION]] [--until [VERSION]]</span><br><span class=\"line\"></span><br><span class=\"line\">OPTIONS</span><br><span class=\"line\">    -h | --help)      Print help</span><br><span class=\"line\">    -v | --version)   Print version info</span><br><span class=\"line\">    -p | --prefix)    If provided, search all sub-folders with this prefix.</span><br><span class=\"line\">                      Otherwise process current directory.</span><br><span class=\"line\">    -s | --since)     Commit id from</span><br><span class=\"line\">    -u | --until)     Commit id to</span><br><span class=\"line\"></span><br><span class=\"line\">EXAMPLES</span><br><span class=\"line\">    1. Generate all change logs between 1.0.1 and 1.0.2</span><br><span class=\"line\"></span><br><span class=\"line\">        $ changelog.sh --since 1.0.1 --until 1.0.2</span><br><span class=\"line\"></span><br><span class=\"line\">    2. Generate all change logs of version 1.0.2 from the very beginning</span><br><span class=\"line\"></span><br><span class=\"line\">        $ changelog.sh --until 1.0.2</span><br><span class=\"line\"></span><br><span class=\"line\">    3. Generate all change logs since version 1.0.2</span><br><span class=\"line\"></span><br><span class=\"line\">        $ changelog.sh --since 1.0.2</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>脚本可以为当前所在的git仓库目录生成变更日志文件，也支持将一组相似的仓库批量生成变更日志，例如：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> changelog.sh --prefix kt --until HEAD</span></span><br><span class=\"line\">[INFO] CHANGELOG will be written to file CHANGELOG-HEAD.md</span><br><span class=\"line\">[INFO] Appending change logs for kt-connect-rbac ...</span><br></pre></td></tr></table></figure>\n\n<p>此时在脚本所在的目录中生成了一个 Markdown 格式的日志文件 <code>CHANGELOG-HEAD.md</code>, 使用 Markdown 编辑器打开该文件即可得到上面截图的效果。脚本提供了 <code>--prefix</code>, <code>--since</code> 和 <code>--until</code> 选项可以使用。</p>\n<p>项目地址：<a href=\"https://github.com/eliu/git-log-markdown\">eliu/git-log-markdown: Generate a markdown format change-log file for git repos. (github.com)</a></p>"},{"title":"GitBook 基本操作","date":"2020-08-07T09:41:00.000Z","_content":"\n## 写在前面\n\n本文主要的目的是介绍如何快速的在本地快速启动一个 GitBook 项目并使用浏览器进行阅读。内容比较简单，仅用作备忘，以便后面查阅。\n\n<!-- more -->\n\n## 软件安装\n\ngitbook 命令行工具基于 Node.js 平台，并且只兼容 `10.x` 版本，所以读者需要访问 https://nodejs.org/dist/latest-v10.x/ 下载对应平台的 Node.js 安装文件进行安装。之后运行以下命令安装 `gitbook-cli`:\n\n> 注意： Windows 用户请打开 PowerShell 执行安装命令。\n\n```shell\n# 确认 Node.js 版本\n$ node -v\nv10.22.0\n\n# 安装 gitbook-cli\n$ npm install -g gitbook-cli\n\n# 确认 gitbook-cli 版本\n$ gitbook ls\nGitBook Versions Installed:\n\n    * 3.2.3\n\nRun \"gitbook update\" to update to the latest version.\n```\n\n\n\n## 启动 GitBook 项目\n\n请访问 https://www.npmjs.com/package/gitbook 详细了解如何构建一个符合 GitBook 的项目。进入 gitbook 项目主目录，执行 `gitbook serve` 在本地启动服务：\n\n ```shell\n$ gitbook serve\ninfo: 7 plugins are installed\ninfo: loading plugin \"livereload\"... OK\ninfo: loading plugin \"highlight\"... OK\ninfo: loading plugin \"search\"... OK\ninfo: loading plugin \"lunr\"... OK\ninfo: loading plugin \"sharing\"... OK\ninfo: loading plugin \"fontsettings\"... OK\ninfo: loading plugin \"theme-default\"... OK\ninfo: found 82 pages\ninfo: found 236 asset files\ninfo: >> generation finished with success in 14.0s !\n\nStarting server ...\nServing book on http://localhost:4000\n ```\n\n最后根据提示访问 http://localhost:4000/ 在浏览器查看文档。","source":"_posts/gitbook-basics.md","raw":"---\ntitle: GitBook 基本操作\ndate: 2020-08-07 17:41:00\ncategories:\n- tools\ntags:\n- gitbook\n- git\n---\n\n## 写在前面\n\n本文主要的目的是介绍如何快速的在本地快速启动一个 GitBook 项目并使用浏览器进行阅读。内容比较简单，仅用作备忘，以便后面查阅。\n\n<!-- more -->\n\n## 软件安装\n\ngitbook 命令行工具基于 Node.js 平台，并且只兼容 `10.x` 版本，所以读者需要访问 https://nodejs.org/dist/latest-v10.x/ 下载对应平台的 Node.js 安装文件进行安装。之后运行以下命令安装 `gitbook-cli`:\n\n> 注意： Windows 用户请打开 PowerShell 执行安装命令。\n\n```shell\n# 确认 Node.js 版本\n$ node -v\nv10.22.0\n\n# 安装 gitbook-cli\n$ npm install -g gitbook-cli\n\n# 确认 gitbook-cli 版本\n$ gitbook ls\nGitBook Versions Installed:\n\n    * 3.2.3\n\nRun \"gitbook update\" to update to the latest version.\n```\n\n\n\n## 启动 GitBook 项目\n\n请访问 https://www.npmjs.com/package/gitbook 详细了解如何构建一个符合 GitBook 的项目。进入 gitbook 项目主目录，执行 `gitbook serve` 在本地启动服务：\n\n ```shell\n$ gitbook serve\ninfo: 7 plugins are installed\ninfo: loading plugin \"livereload\"... OK\ninfo: loading plugin \"highlight\"... OK\ninfo: loading plugin \"search\"... OK\ninfo: loading plugin \"lunr\"... OK\ninfo: loading plugin \"sharing\"... OK\ninfo: loading plugin \"fontsettings\"... OK\ninfo: loading plugin \"theme-default\"... OK\ninfo: found 82 pages\ninfo: found 236 asset files\ninfo: >> generation finished with success in 14.0s !\n\nStarting server ...\nServing book on http://localhost:4000\n ```\n\n最后根据提示访问 http://localhost:4000/ 在浏览器查看文档。","slug":"gitbook-basics","published":1,"updated":"2021-03-23T02:55:35.257Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmasb6npk00077sos7ef1g1sz","content":"<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><p>本文主要的目的是介绍如何快速的在本地快速启动一个 GitBook 项目并使用浏览器进行阅读。内容比较简单，仅用作备忘，以便后面查阅。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"软件安装\"><a href=\"#软件安装\" class=\"headerlink\" title=\"软件安装\"></a>软件安装</h2><p>gitbook 命令行工具基于 Node.js 平台，并且只兼容 <code>10.x</code> 版本，所以读者需要访问 <a href=\"https://nodejs.org/dist/latest-v10.x/\">https://nodejs.org/dist/latest-v10.x/</a> 下载对应平台的 Node.js 安装文件进行安装。之后运行以下命令安装 <code>gitbook-cli</code>:</p>\n<blockquote>\n<p>注意： Windows 用户请打开 PowerShell 执行安装命令。</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 确认 Node.js 版本</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> node -v</span></span><br><span class=\"line\">v10.22.0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 安装 gitbook-cli</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm install -g gitbook-cli</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 确认 gitbook-cli 版本</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> gitbook ls</span></span><br><span class=\"line\">GitBook Versions Installed:</span><br><span class=\"line\"></span><br><span class=\"line\">    * 3.2.3</span><br><span class=\"line\"></span><br><span class=\"line\">Run &quot;gitbook update&quot; to update to the latest version.</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"启动-GitBook-项目\"><a href=\"#启动-GitBook-项目\" class=\"headerlink\" title=\"启动 GitBook 项目\"></a>启动 GitBook 项目</h2><p>请访问 <a href=\"https://www.npmjs.com/package/gitbook\">https://www.npmjs.com/package/gitbook</a> 详细了解如何构建一个符合 GitBook 的项目。进入 gitbook 项目主目录，执行 <code>gitbook serve</code> 在本地启动服务：</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> gitbook serve</span></span><br><span class=\"line\">info: 7 plugins are installed</span><br><span class=\"line\">info: loading plugin &quot;livereload&quot;... OK</span><br><span class=\"line\">info: loading plugin &quot;highlight&quot;... OK</span><br><span class=\"line\">info: loading plugin &quot;search&quot;... OK</span><br><span class=\"line\">info: loading plugin &quot;lunr&quot;... OK</span><br><span class=\"line\">info: loading plugin &quot;sharing&quot;... OK</span><br><span class=\"line\">info: loading plugin &quot;fontsettings&quot;... OK</span><br><span class=\"line\">info: loading plugin &quot;theme-default&quot;... OK</span><br><span class=\"line\">info: found 82 pages</span><br><span class=\"line\">info: found 236 asset files</span><br><span class=\"line\">info: &gt;&gt; generation finished with success in 14.0s !</span><br><span class=\"line\"></span><br><span class=\"line\">Starting server ...</span><br><span class=\"line\">Serving book on http://localhost:4000</span><br></pre></td></tr></table></figure>\n\n<p>最后根据提示访问 <a href=\"http://localhost:4000/\">http://localhost:4000/</a> 在浏览器查看文档。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><p>本文主要的目的是介绍如何快速的在本地快速启动一个 GitBook 项目并使用浏览器进行阅读。内容比较简单，仅用作备忘，以便后面查阅。</p>","more":"<h2 id=\"软件安装\"><a href=\"#软件安装\" class=\"headerlink\" title=\"软件安装\"></a>软件安装</h2><p>gitbook 命令行工具基于 Node.js 平台，并且只兼容 <code>10.x</code> 版本，所以读者需要访问 <a href=\"https://nodejs.org/dist/latest-v10.x/\">https://nodejs.org/dist/latest-v10.x/</a> 下载对应平台的 Node.js 安装文件进行安装。之后运行以下命令安装 <code>gitbook-cli</code>:</p>\n<blockquote>\n<p>注意： Windows 用户请打开 PowerShell 执行安装命令。</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 确认 Node.js 版本</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> node -v</span></span><br><span class=\"line\">v10.22.0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 安装 gitbook-cli</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm install -g gitbook-cli</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 确认 gitbook-cli 版本</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> gitbook ls</span></span><br><span class=\"line\">GitBook Versions Installed:</span><br><span class=\"line\"></span><br><span class=\"line\">    * 3.2.3</span><br><span class=\"line\"></span><br><span class=\"line\">Run &quot;gitbook update&quot; to update to the latest version.</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"启动-GitBook-项目\"><a href=\"#启动-GitBook-项目\" class=\"headerlink\" title=\"启动 GitBook 项目\"></a>启动 GitBook 项目</h2><p>请访问 <a href=\"https://www.npmjs.com/package/gitbook\">https://www.npmjs.com/package/gitbook</a> 详细了解如何构建一个符合 GitBook 的项目。进入 gitbook 项目主目录，执行 <code>gitbook serve</code> 在本地启动服务：</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> gitbook serve</span></span><br><span class=\"line\">info: 7 plugins are installed</span><br><span class=\"line\">info: loading plugin &quot;livereload&quot;... OK</span><br><span class=\"line\">info: loading plugin &quot;highlight&quot;... OK</span><br><span class=\"line\">info: loading plugin &quot;search&quot;... OK</span><br><span class=\"line\">info: loading plugin &quot;lunr&quot;... OK</span><br><span class=\"line\">info: loading plugin &quot;sharing&quot;... OK</span><br><span class=\"line\">info: loading plugin &quot;fontsettings&quot;... OK</span><br><span class=\"line\">info: loading plugin &quot;theme-default&quot;... OK</span><br><span class=\"line\">info: found 82 pages</span><br><span class=\"line\">info: found 236 asset files</span><br><span class=\"line\">info: &gt;&gt; generation finished with success in 14.0s !</span><br><span class=\"line\"></span><br><span class=\"line\">Starting server ...</span><br><span class=\"line\">Serving book on http://localhost:4000</span><br></pre></td></tr></table></figure>\n\n<p>最后根据提示访问 <a href=\"http://localhost:4000/\">http://localhost:4000/</a> 在浏览器查看文档。</p>"},{"title":"为HAP应用启用新语言支持","date":"2018-10-09T02:16:00.000Z","_content":"\n## HAP 简介\n\n汉得应用开发平台（HAND Application Platform）是汉得公司为了应对移动互联网化、应用云端化、海量数据化和数字化服务转型的应用开发平台，是中台化产品和应用开发的基础平台。HAP采用开源的Java EE技术体系，平台设计灵活可扩展、可移植、可应对高并发需求。\n\n> 更多信息请访问：http://eco.hand-china.com/platform/hap.html\n\n<!-- more -->\n\n## 启用新语言\n\nHAP 应用开发平台默认支持简体中文和英语两种语言，如果要启用新的语言支持，比如西班牙语，则需要找到所有国际化相关的前后端对象进行翻译。\n\n幸运的是，HAP 应用开发平台对国际化提供了良好的框架支持和开发规范，所以涉及到和多语言或者国际化相关的数据表和其他资源对象的分布相对集中且有规律可循，具体分三部分：\n\n1. 多语言描述总表 `SYS_PROMPTS`\n2. 所有平台和功能页面的实体对象所关联的多语言表 `*_TL`\n3. KendoUI 国际化支持文件 `kendo.culture.<locale>.js` 和 `kendo.messages.<locale>.js`\n\n下面以西班牙语为例，详细说明整个过程。\n\n\n\n### 1. 定义语言代码\n\n进入 `系统管理` > `语言维护` 新增西班牙语言代码 `es_ES`\n\n![image-20181009103555564](hap-enable-new-language/image-20181009103555564.png)\n\n### 2. 适配 KendoUI 国际化资源文件\n\n按照下表将指定的资源文件拷贝到对应目录下：\n\n| 源文件路径                                                  | 拷贝后的路径                                               |\n| ----------------------------------------------------------- | ---------------------------------------------------------- |\n| target/core/lib/kendoui/js/messages/kendo.messages.en-GB.js | src/webapp/lib/kendoui/js/messages/kendo.messages.es-ES.js |\n| target/core/lib/kendoui/js/cultures/kendo.culture.en-GB.js  | src/webapp/lib/kendoui/js/cultures/kendo.culture.es-ES.js  |\n\n### 3. 更新数据库记录\n\n使用 en_GB 下的语言记录来更新所有的国际化表，脚本如下：\n\n```sql\n-- ========================================================\n-- Insert all Spanish records based on original en_GB\n--\n-- Creation Date : 2018-10-08\n-- Created By    : memories.liu@hand-china.com\n-- Script Version: 1.0.0\n-- HAP Version   : 3.5.0-RELEASE\n--\n-- ========================================================\n-- System Prompt table:\n--   SYS_PROMPTS\n-- Multi-lingual tables listed below:\n--   FND_COMPANY_TL\n--   HR_ORG_POSITION_TL\n--   HR_ORG_UNIT_TL\n--   SYS_ATTACH_CATEGORY_TL\n--   SYS_CODE_TL\n--   SYS_CODE_VALUE_TL\n--   SYS_DASHBOARD_TL\n--   SYS_FUNCTION_TL\n--   SYS_HOTKEY_TL\n--   SYS_IF_CONFIG_HEADER_TL\n--   SYS_IF_CONFIG_LINE_TL\n--   SYS_RESOURCE_ITEM_TL\n--   SYS_RESOURCE_TL\n--   SYS_ROLE_TL\n-- ========================================================\n\n-- sys_prompts\ninsert into sys_prompts (\n  prompt_id,\n  prompt_code,\n  lang,\n  description,\n  object_version_number\n)\nselect \n  SYS_PROMPTS_S.NEXTVAL,\n  prompt_code,\n  'es_ES',\n  description,\n  object_version_number\nfrom sys_prompts where lang = 'en_GB';\n\n-- FND_COMPANY_TL\nINSERT INTO FND_COMPANY_TL(\n    COMPANY_ID,\n    LANG,\n    COMPANY_SHORT_NAME,\n    COMPANY_FULL_NAME\n) SELECT \n    COMPANY_ID,\n    'es_ES',\n    COMPANY_SHORT_NAME,\n    COMPANY_FULL_NAME\nFROM FND_COMPANY_TL WHERE LANG = 'en_GB';\n\n-- HR_ORG_POSITION_TL\nINSERT INTO HR_ORG_POSITION_TL(\n    POSITION_ID,\n    LANG,\n    NAME,\n    DESCRIPTION\n) SELECT \n    POSITION_ID,\n    'es_ES',\n    NAME,\n    DESCRIPTION\nFROM HR_ORG_POSITION_TL WHERE LANG = 'en_GB';\n\n-- HR_ORG_UNIT_TL\nINSERT INTO HR_ORG_UNIT_TL(\n    UNIT_ID,\n    LANG,\n    NAME,\n    DESCRIPTION\n) SELECT \n    UNIT_ID,\n    'es_ES',\n    NAME,\n    DESCRIPTION\nFROM HR_ORG_UNIT_TL WHERE LANG = 'en_GB';\n\n-- SYS_ATTACH_CATEGORY_TL\nINSERT INTO SYS_ATTACH_CATEGORY_TL(\n    CATEGORY_ID,\n    LANG,\n    CATEGORY_NAME,\n    DESCRIPTION\n) SELECT \n    CATEGORY_ID,\n    'es_ES',\n    CATEGORY_NAME,\n    DESCRIPTION\nFROM SYS_ATTACH_CATEGORY_TL WHERE LANG = 'en_GB';\n\n-- SYS_CODE_TL\nINSERT INTO SYS_CODE_TL(\n    CODE_ID,\n    LANG,\n    DESCRIPTION\n) SELECT \n    CODE_ID,\n    'es_ES',\n    DESCRIPTION\nFROM SYS_CODE_TL WHERE LANG = 'en_GB';\n\n-- SYS_CODE_VALUE_TL\nINSERT INTO SYS_CODE_VALUE_TL(\n    CODE_VALUE_ID,\n    LANG,\n    MEANING,\n    DESCRIPTION\n) SELECT \n    CODE_VALUE_ID,\n    'es_ES',\n    MEANING,\n    DESCRIPTION\nFROM SYS_CODE_VALUE_TL WHERE LANG = 'en_GB';\n\n-- SYS_DASHBOARD_TL\nINSERT INTO SYS_DASHBOARD_TL(\n    DASHBOARD_ID,\n    LANG,\n    TITLE,\n    DESCRIPTION\n) SELECT \n    DASHBOARD_ID,\n    'es_ES',\n    TITLE,\n    DESCRIPTION\nFROM SYS_DASHBOARD_TL WHERE LANG = 'en_GB';\n\n\n-- SYS_FUNCTION_TL\nINSERT INTO SYS_FUNCTION_TL(\n    FUNCTION_ID,\n    LANG,\n    FUNCTION_NAME,\n    FUNCTION_DESCRIPTION\n) SELECT \n    FUNCTION_ID,\n    'es_ES',\n    FUNCTION_NAME,\n    FUNCTION_DESCRIPTION\nFROM SYS_FUNCTION_TL WHERE LANG = 'en_GB';\n\n-- SYS_HOTKEY_TL\nINSERT INTO SYS_HOTKEY_TL(\n    HOTKEY_ID,\n    LANG,\n    DESCRIPTION\n) SELECT \n    HOTKEY_ID,\n    'es_ES',\n    DESCRIPTION\nFROM SYS_HOTKEY_TL WHERE LANG = 'en_GB';\n\n-- SYS_IF_CONFIG_HEADER_TL\nINSERT INTO SYS_IF_CONFIG_HEADER_TL(\n    HEADER_ID,\n    LANG,\n    NAME,\n    DESCRIPTION\n) SELECT \n    HEADER_ID,\n    'es_ES',\n    NAME,\n    DESCRIPTION\nFROM SYS_IF_CONFIG_HEADER_TL WHERE LANG = 'en_GB';\n\n-- SYS_IF_CONFIG_LINE_TL\nINSERT INTO SYS_IF_CONFIG_LINE_TL(\n    LINE_ID,\n    LANG,\n    LINE_NAME,\n    LINE_DESCRIPTION\n) SELECT \n    LINE_ID,\n    'es_ES',\n    LINE_NAME,\n    LINE_DESCRIPTION\nFROM SYS_IF_CONFIG_LINE_TL WHERE LANG = 'en_GB';\n\n-- SYS_RESOURCE_ITEM_TL\nINSERT INTO SYS_RESOURCE_ITEM_TL(\n    RESOURCE_ITEM_ID,\n    LANG,\n    ITEM_NAME,\n    DESCRIPTION\n) SELECT \n    RESOURCE_ITEM_ID,\n    'es_ES',\n    ITEM_NAME,\n    DESCRIPTION\nFROM SYS_RESOURCE_ITEM_TL WHERE LANG = 'en_GB';\n\n-- SYS_RESOURCE_TL\nINSERT INTO SYS_RESOURCE_TL(\n    RESOURCE_ID,\n    LANG,\n    NAME,\n    DESCRIPTION\n) SELECT \n    RESOURCE_ID,\n    'es_ES',\n    NAME,\n    DESCRIPTION\nFROM SYS_RESOURCE_TL WHERE LANG = 'en_GB';\n\n-- SYS_ROLE_TL\nINSERT INTO SYS_ROLE_TL(\n    ROLE_ID,\n    LANG,\n    ROLE_NAME,\n    ROLE_DESCRIPTION\n) SELECT \n    ROLE_ID,\n    'es_ES',\n    ROLE_NAME,\n    ROLE_DESCRIPTION\nFROM SYS_ROLE_TL WHERE LANG = 'en_GB';\n```\n\n### 4. 人工翻译\n\n将所有西班牙语言下的字符串进行人工翻译，这包括 kendoui 的国际化资源文件和所有的国际化表的记录。\n\n### 5. 清缓存并重启服务器\n\n启动命令行工具 redis-cli 并连接至 Redis，执行以下命令清除 Redis 缓存：\n\n```bash\nflushall\n```\n\n重启 Tomcat 服务器。","source":"_posts/hap-enable-new-language.md","raw":"---\ntitle: 为HAP应用启用新语言支持\ndate: 2018-10-09 10:16:00\ncategories:\n- HAP\ntags:\n- i18n\n---\n\n## HAP 简介\n\n汉得应用开发平台（HAND Application Platform）是汉得公司为了应对移动互联网化、应用云端化、海量数据化和数字化服务转型的应用开发平台，是中台化产品和应用开发的基础平台。HAP采用开源的Java EE技术体系，平台设计灵活可扩展、可移植、可应对高并发需求。\n\n> 更多信息请访问：http://eco.hand-china.com/platform/hap.html\n\n<!-- more -->\n\n## 启用新语言\n\nHAP 应用开发平台默认支持简体中文和英语两种语言，如果要启用新的语言支持，比如西班牙语，则需要找到所有国际化相关的前后端对象进行翻译。\n\n幸运的是，HAP 应用开发平台对国际化提供了良好的框架支持和开发规范，所以涉及到和多语言或者国际化相关的数据表和其他资源对象的分布相对集中且有规律可循，具体分三部分：\n\n1. 多语言描述总表 `SYS_PROMPTS`\n2. 所有平台和功能页面的实体对象所关联的多语言表 `*_TL`\n3. KendoUI 国际化支持文件 `kendo.culture.<locale>.js` 和 `kendo.messages.<locale>.js`\n\n下面以西班牙语为例，详细说明整个过程。\n\n\n\n### 1. 定义语言代码\n\n进入 `系统管理` > `语言维护` 新增西班牙语言代码 `es_ES`\n\n![image-20181009103555564](hap-enable-new-language/image-20181009103555564.png)\n\n### 2. 适配 KendoUI 国际化资源文件\n\n按照下表将指定的资源文件拷贝到对应目录下：\n\n| 源文件路径                                                  | 拷贝后的路径                                               |\n| ----------------------------------------------------------- | ---------------------------------------------------------- |\n| target/core/lib/kendoui/js/messages/kendo.messages.en-GB.js | src/webapp/lib/kendoui/js/messages/kendo.messages.es-ES.js |\n| target/core/lib/kendoui/js/cultures/kendo.culture.en-GB.js  | src/webapp/lib/kendoui/js/cultures/kendo.culture.es-ES.js  |\n\n### 3. 更新数据库记录\n\n使用 en_GB 下的语言记录来更新所有的国际化表，脚本如下：\n\n```sql\n-- ========================================================\n-- Insert all Spanish records based on original en_GB\n--\n-- Creation Date : 2018-10-08\n-- Created By    : memories.liu@hand-china.com\n-- Script Version: 1.0.0\n-- HAP Version   : 3.5.0-RELEASE\n--\n-- ========================================================\n-- System Prompt table:\n--   SYS_PROMPTS\n-- Multi-lingual tables listed below:\n--   FND_COMPANY_TL\n--   HR_ORG_POSITION_TL\n--   HR_ORG_UNIT_TL\n--   SYS_ATTACH_CATEGORY_TL\n--   SYS_CODE_TL\n--   SYS_CODE_VALUE_TL\n--   SYS_DASHBOARD_TL\n--   SYS_FUNCTION_TL\n--   SYS_HOTKEY_TL\n--   SYS_IF_CONFIG_HEADER_TL\n--   SYS_IF_CONFIG_LINE_TL\n--   SYS_RESOURCE_ITEM_TL\n--   SYS_RESOURCE_TL\n--   SYS_ROLE_TL\n-- ========================================================\n\n-- sys_prompts\ninsert into sys_prompts (\n  prompt_id,\n  prompt_code,\n  lang,\n  description,\n  object_version_number\n)\nselect \n  SYS_PROMPTS_S.NEXTVAL,\n  prompt_code,\n  'es_ES',\n  description,\n  object_version_number\nfrom sys_prompts where lang = 'en_GB';\n\n-- FND_COMPANY_TL\nINSERT INTO FND_COMPANY_TL(\n    COMPANY_ID,\n    LANG,\n    COMPANY_SHORT_NAME,\n    COMPANY_FULL_NAME\n) SELECT \n    COMPANY_ID,\n    'es_ES',\n    COMPANY_SHORT_NAME,\n    COMPANY_FULL_NAME\nFROM FND_COMPANY_TL WHERE LANG = 'en_GB';\n\n-- HR_ORG_POSITION_TL\nINSERT INTO HR_ORG_POSITION_TL(\n    POSITION_ID,\n    LANG,\n    NAME,\n    DESCRIPTION\n) SELECT \n    POSITION_ID,\n    'es_ES',\n    NAME,\n    DESCRIPTION\nFROM HR_ORG_POSITION_TL WHERE LANG = 'en_GB';\n\n-- HR_ORG_UNIT_TL\nINSERT INTO HR_ORG_UNIT_TL(\n    UNIT_ID,\n    LANG,\n    NAME,\n    DESCRIPTION\n) SELECT \n    UNIT_ID,\n    'es_ES',\n    NAME,\n    DESCRIPTION\nFROM HR_ORG_UNIT_TL WHERE LANG = 'en_GB';\n\n-- SYS_ATTACH_CATEGORY_TL\nINSERT INTO SYS_ATTACH_CATEGORY_TL(\n    CATEGORY_ID,\n    LANG,\n    CATEGORY_NAME,\n    DESCRIPTION\n) SELECT \n    CATEGORY_ID,\n    'es_ES',\n    CATEGORY_NAME,\n    DESCRIPTION\nFROM SYS_ATTACH_CATEGORY_TL WHERE LANG = 'en_GB';\n\n-- SYS_CODE_TL\nINSERT INTO SYS_CODE_TL(\n    CODE_ID,\n    LANG,\n    DESCRIPTION\n) SELECT \n    CODE_ID,\n    'es_ES',\n    DESCRIPTION\nFROM SYS_CODE_TL WHERE LANG = 'en_GB';\n\n-- SYS_CODE_VALUE_TL\nINSERT INTO SYS_CODE_VALUE_TL(\n    CODE_VALUE_ID,\n    LANG,\n    MEANING,\n    DESCRIPTION\n) SELECT \n    CODE_VALUE_ID,\n    'es_ES',\n    MEANING,\n    DESCRIPTION\nFROM SYS_CODE_VALUE_TL WHERE LANG = 'en_GB';\n\n-- SYS_DASHBOARD_TL\nINSERT INTO SYS_DASHBOARD_TL(\n    DASHBOARD_ID,\n    LANG,\n    TITLE,\n    DESCRIPTION\n) SELECT \n    DASHBOARD_ID,\n    'es_ES',\n    TITLE,\n    DESCRIPTION\nFROM SYS_DASHBOARD_TL WHERE LANG = 'en_GB';\n\n\n-- SYS_FUNCTION_TL\nINSERT INTO SYS_FUNCTION_TL(\n    FUNCTION_ID,\n    LANG,\n    FUNCTION_NAME,\n    FUNCTION_DESCRIPTION\n) SELECT \n    FUNCTION_ID,\n    'es_ES',\n    FUNCTION_NAME,\n    FUNCTION_DESCRIPTION\nFROM SYS_FUNCTION_TL WHERE LANG = 'en_GB';\n\n-- SYS_HOTKEY_TL\nINSERT INTO SYS_HOTKEY_TL(\n    HOTKEY_ID,\n    LANG,\n    DESCRIPTION\n) SELECT \n    HOTKEY_ID,\n    'es_ES',\n    DESCRIPTION\nFROM SYS_HOTKEY_TL WHERE LANG = 'en_GB';\n\n-- SYS_IF_CONFIG_HEADER_TL\nINSERT INTO SYS_IF_CONFIG_HEADER_TL(\n    HEADER_ID,\n    LANG,\n    NAME,\n    DESCRIPTION\n) SELECT \n    HEADER_ID,\n    'es_ES',\n    NAME,\n    DESCRIPTION\nFROM SYS_IF_CONFIG_HEADER_TL WHERE LANG = 'en_GB';\n\n-- SYS_IF_CONFIG_LINE_TL\nINSERT INTO SYS_IF_CONFIG_LINE_TL(\n    LINE_ID,\n    LANG,\n    LINE_NAME,\n    LINE_DESCRIPTION\n) SELECT \n    LINE_ID,\n    'es_ES',\n    LINE_NAME,\n    LINE_DESCRIPTION\nFROM SYS_IF_CONFIG_LINE_TL WHERE LANG = 'en_GB';\n\n-- SYS_RESOURCE_ITEM_TL\nINSERT INTO SYS_RESOURCE_ITEM_TL(\n    RESOURCE_ITEM_ID,\n    LANG,\n    ITEM_NAME,\n    DESCRIPTION\n) SELECT \n    RESOURCE_ITEM_ID,\n    'es_ES',\n    ITEM_NAME,\n    DESCRIPTION\nFROM SYS_RESOURCE_ITEM_TL WHERE LANG = 'en_GB';\n\n-- SYS_RESOURCE_TL\nINSERT INTO SYS_RESOURCE_TL(\n    RESOURCE_ID,\n    LANG,\n    NAME,\n    DESCRIPTION\n) SELECT \n    RESOURCE_ID,\n    'es_ES',\n    NAME,\n    DESCRIPTION\nFROM SYS_RESOURCE_TL WHERE LANG = 'en_GB';\n\n-- SYS_ROLE_TL\nINSERT INTO SYS_ROLE_TL(\n    ROLE_ID,\n    LANG,\n    ROLE_NAME,\n    ROLE_DESCRIPTION\n) SELECT \n    ROLE_ID,\n    'es_ES',\n    ROLE_NAME,\n    ROLE_DESCRIPTION\nFROM SYS_ROLE_TL WHERE LANG = 'en_GB';\n```\n\n### 4. 人工翻译\n\n将所有西班牙语言下的字符串进行人工翻译，这包括 kendoui 的国际化资源文件和所有的国际化表的记录。\n\n### 5. 清缓存并重启服务器\n\n启动命令行工具 redis-cli 并连接至 Redis，执行以下命令清除 Redis 缓存：\n\n```bash\nflushall\n```\n\n重启 Tomcat 服务器。","slug":"hap-enable-new-language","published":1,"updated":"2020-03-23T15:38:15.295Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmasb6npl00087sos20a931h0","content":"<h2 id=\"HAP-简介\"><a href=\"#HAP-简介\" class=\"headerlink\" title=\"HAP 简介\"></a>HAP 简介</h2><p>汉得应用开发平台（HAND Application Platform）是汉得公司为了应对移动互联网化、应用云端化、海量数据化和数字化服务转型的应用开发平台，是中台化产品和应用开发的基础平台。HAP采用开源的Java EE技术体系，平台设计灵活可扩展、可移植、可应对高并发需求。</p>\n<blockquote>\n<p>更多信息请访问：<a href=\"http://eco.hand-china.com/platform/hap.html\">http://eco.hand-china.com/platform/hap.html</a></p>\n</blockquote>\n<span id=\"more\"></span>\n\n<h2 id=\"启用新语言\"><a href=\"#启用新语言\" class=\"headerlink\" title=\"启用新语言\"></a>启用新语言</h2><p>HAP 应用开发平台默认支持简体中文和英语两种语言，如果要启用新的语言支持，比如西班牙语，则需要找到所有国际化相关的前后端对象进行翻译。</p>\n<p>幸运的是，HAP 应用开发平台对国际化提供了良好的框架支持和开发规范，所以涉及到和多语言或者国际化相关的数据表和其他资源对象的分布相对集中且有规律可循，具体分三部分：</p>\n<ol>\n<li>多语言描述总表 <code>SYS_PROMPTS</code></li>\n<li>所有平台和功能页面的实体对象所关联的多语言表 <code>*_TL</code></li>\n<li>KendoUI 国际化支持文件 <code>kendo.culture.&lt;locale&gt;.js</code> 和 <code>kendo.messages.&lt;locale&gt;.js</code></li>\n</ol>\n<p>下面以西班牙语为例，详细说明整个过程。</p>\n<h3 id=\"1-定义语言代码\"><a href=\"#1-定义语言代码\" class=\"headerlink\" title=\"1. 定义语言代码\"></a>1. 定义语言代码</h3><p>进入 <code>系统管理</code> &gt; <code>语言维护</code> 新增西班牙语言代码 <code>es_ES</code></p>\n<p><img data-src=\"/2018/10/09/hap-enable-new-language/image-20181009103555564.png\" alt=\"image-20181009103555564\"></p>\n<h3 id=\"2-适配-KendoUI-国际化资源文件\"><a href=\"#2-适配-KendoUI-国际化资源文件\" class=\"headerlink\" title=\"2. 适配 KendoUI 国际化资源文件\"></a>2. 适配 KendoUI 国际化资源文件</h3><p>按照下表将指定的资源文件拷贝到对应目录下：</p>\n<table>\n<thead>\n<tr>\n<th>源文件路径</th>\n<th>拷贝后的路径</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>target/core/lib/kendoui/js/messages/kendo.messages.en-GB.js</td>\n<td>src/webapp/lib/kendoui/js/messages/kendo.messages.es-ES.js</td>\n</tr>\n<tr>\n<td>target/core/lib/kendoui/js/cultures/kendo.culture.en-GB.js</td>\n<td>src/webapp/lib/kendoui/js/cultures/kendo.culture.es-ES.js</td>\n</tr>\n</tbody></table>\n<h3 id=\"3-更新数据库记录\"><a href=\"#3-更新数据库记录\" class=\"headerlink\" title=\"3. 更新数据库记录\"></a>3. 更新数据库记录</h3><p>使用 en_GB 下的语言记录来更新所有的国际化表，脚本如下：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- ========================================================</span></span><br><span class=\"line\"><span class=\"comment\">-- Insert all Spanish records based on original en_GB</span></span><br><span class=\"line\"><span class=\"comment\">--</span></span><br><span class=\"line\"><span class=\"comment\">-- Creation Date : 2018-10-08</span></span><br><span class=\"line\"><span class=\"comment\">-- Created By    : memories.liu@hand-china.com</span></span><br><span class=\"line\"><span class=\"comment\">-- Script Version: 1.0.0</span></span><br><span class=\"line\"><span class=\"comment\">-- HAP Version   : 3.5.0-RELEASE</span></span><br><span class=\"line\"><span class=\"comment\">--</span></span><br><span class=\"line\"><span class=\"comment\">-- ========================================================</span></span><br><span class=\"line\"><span class=\"comment\">-- System Prompt table:</span></span><br><span class=\"line\"><span class=\"comment\">--   SYS_PROMPTS</span></span><br><span class=\"line\"><span class=\"comment\">-- Multi-lingual tables listed below:</span></span><br><span class=\"line\"><span class=\"comment\">--   FND_COMPANY_TL</span></span><br><span class=\"line\"><span class=\"comment\">--   HR_ORG_POSITION_TL</span></span><br><span class=\"line\"><span class=\"comment\">--   HR_ORG_UNIT_TL</span></span><br><span class=\"line\"><span class=\"comment\">--   SYS_ATTACH_CATEGORY_TL</span></span><br><span class=\"line\"><span class=\"comment\">--   SYS_CODE_TL</span></span><br><span class=\"line\"><span class=\"comment\">--   SYS_CODE_VALUE_TL</span></span><br><span class=\"line\"><span class=\"comment\">--   SYS_DASHBOARD_TL</span></span><br><span class=\"line\"><span class=\"comment\">--   SYS_FUNCTION_TL</span></span><br><span class=\"line\"><span class=\"comment\">--   SYS_HOTKEY_TL</span></span><br><span class=\"line\"><span class=\"comment\">--   SYS_IF_CONFIG_HEADER_TL</span></span><br><span class=\"line\"><span class=\"comment\">--   SYS_IF_CONFIG_LINE_TL</span></span><br><span class=\"line\"><span class=\"comment\">--   SYS_RESOURCE_ITEM_TL</span></span><br><span class=\"line\"><span class=\"comment\">--   SYS_RESOURCE_TL</span></span><br><span class=\"line\"><span class=\"comment\">--   SYS_ROLE_TL</span></span><br><span class=\"line\"><span class=\"comment\">-- ========================================================</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- sys_prompts</span></span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> sys_prompts (</span><br><span class=\"line\">  prompt_id,</span><br><span class=\"line\">  prompt_code,</span><br><span class=\"line\">  lang,</span><br><span class=\"line\">  description,</span><br><span class=\"line\">  object_version_number</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">select</span> </span><br><span class=\"line\">  SYS_PROMPTS_S.NEXTVAL,</span><br><span class=\"line\">  prompt_code,</span><br><span class=\"line\">  <span class=\"string\">&#x27;es_ES&#x27;</span>,</span><br><span class=\"line\">  description,</span><br><span class=\"line\">  object_version_number</span><br><span class=\"line\"><span class=\"keyword\">from</span> sys_prompts <span class=\"keyword\">where</span> lang <span class=\"operator\">=</span> <span class=\"string\">&#x27;en_GB&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- FND_COMPANY_TL</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> FND_COMPANY_TL(</span><br><span class=\"line\">    COMPANY_ID,</span><br><span class=\"line\">    LANG,</span><br><span class=\"line\">    COMPANY_SHORT_NAME,</span><br><span class=\"line\">    COMPANY_FULL_NAME</span><br><span class=\"line\">) <span class=\"keyword\">SELECT</span> </span><br><span class=\"line\">    COMPANY_ID,</span><br><span class=\"line\">    <span class=\"string\">&#x27;es_ES&#x27;</span>,</span><br><span class=\"line\">    COMPANY_SHORT_NAME,</span><br><span class=\"line\">    COMPANY_FULL_NAME</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> FND_COMPANY_TL <span class=\"keyword\">WHERE</span> LANG <span class=\"operator\">=</span> <span class=\"string\">&#x27;en_GB&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- HR_ORG_POSITION_TL</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> HR_ORG_POSITION_TL(</span><br><span class=\"line\">    POSITION_ID,</span><br><span class=\"line\">    LANG,</span><br><span class=\"line\">    NAME,</span><br><span class=\"line\">    DESCRIPTION</span><br><span class=\"line\">) <span class=\"keyword\">SELECT</span> </span><br><span class=\"line\">    POSITION_ID,</span><br><span class=\"line\">    <span class=\"string\">&#x27;es_ES&#x27;</span>,</span><br><span class=\"line\">    NAME,</span><br><span class=\"line\">    DESCRIPTION</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> HR_ORG_POSITION_TL <span class=\"keyword\">WHERE</span> LANG <span class=\"operator\">=</span> <span class=\"string\">&#x27;en_GB&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- HR_ORG_UNIT_TL</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> HR_ORG_UNIT_TL(</span><br><span class=\"line\">    UNIT_ID,</span><br><span class=\"line\">    LANG,</span><br><span class=\"line\">    NAME,</span><br><span class=\"line\">    DESCRIPTION</span><br><span class=\"line\">) <span class=\"keyword\">SELECT</span> </span><br><span class=\"line\">    UNIT_ID,</span><br><span class=\"line\">    <span class=\"string\">&#x27;es_ES&#x27;</span>,</span><br><span class=\"line\">    NAME,</span><br><span class=\"line\">    DESCRIPTION</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> HR_ORG_UNIT_TL <span class=\"keyword\">WHERE</span> LANG <span class=\"operator\">=</span> <span class=\"string\">&#x27;en_GB&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- SYS_ATTACH_CATEGORY_TL</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> SYS_ATTACH_CATEGORY_TL(</span><br><span class=\"line\">    CATEGORY_ID,</span><br><span class=\"line\">    LANG,</span><br><span class=\"line\">    CATEGORY_NAME,</span><br><span class=\"line\">    DESCRIPTION</span><br><span class=\"line\">) <span class=\"keyword\">SELECT</span> </span><br><span class=\"line\">    CATEGORY_ID,</span><br><span class=\"line\">    <span class=\"string\">&#x27;es_ES&#x27;</span>,</span><br><span class=\"line\">    CATEGORY_NAME,</span><br><span class=\"line\">    DESCRIPTION</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> SYS_ATTACH_CATEGORY_TL <span class=\"keyword\">WHERE</span> LANG <span class=\"operator\">=</span> <span class=\"string\">&#x27;en_GB&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- SYS_CODE_TL</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> SYS_CODE_TL(</span><br><span class=\"line\">    CODE_ID,</span><br><span class=\"line\">    LANG,</span><br><span class=\"line\">    DESCRIPTION</span><br><span class=\"line\">) <span class=\"keyword\">SELECT</span> </span><br><span class=\"line\">    CODE_ID,</span><br><span class=\"line\">    <span class=\"string\">&#x27;es_ES&#x27;</span>,</span><br><span class=\"line\">    DESCRIPTION</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> SYS_CODE_TL <span class=\"keyword\">WHERE</span> LANG <span class=\"operator\">=</span> <span class=\"string\">&#x27;en_GB&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- SYS_CODE_VALUE_TL</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> SYS_CODE_VALUE_TL(</span><br><span class=\"line\">    CODE_VALUE_ID,</span><br><span class=\"line\">    LANG,</span><br><span class=\"line\">    MEANING,</span><br><span class=\"line\">    DESCRIPTION</span><br><span class=\"line\">) <span class=\"keyword\">SELECT</span> </span><br><span class=\"line\">    CODE_VALUE_ID,</span><br><span class=\"line\">    <span class=\"string\">&#x27;es_ES&#x27;</span>,</span><br><span class=\"line\">    MEANING,</span><br><span class=\"line\">    DESCRIPTION</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> SYS_CODE_VALUE_TL <span class=\"keyword\">WHERE</span> LANG <span class=\"operator\">=</span> <span class=\"string\">&#x27;en_GB&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- SYS_DASHBOARD_TL</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> SYS_DASHBOARD_TL(</span><br><span class=\"line\">    DASHBOARD_ID,</span><br><span class=\"line\">    LANG,</span><br><span class=\"line\">    TITLE,</span><br><span class=\"line\">    DESCRIPTION</span><br><span class=\"line\">) <span class=\"keyword\">SELECT</span> </span><br><span class=\"line\">    DASHBOARD_ID,</span><br><span class=\"line\">    <span class=\"string\">&#x27;es_ES&#x27;</span>,</span><br><span class=\"line\">    TITLE,</span><br><span class=\"line\">    DESCRIPTION</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> SYS_DASHBOARD_TL <span class=\"keyword\">WHERE</span> LANG <span class=\"operator\">=</span> <span class=\"string\">&#x27;en_GB&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- SYS_FUNCTION_TL</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> SYS_FUNCTION_TL(</span><br><span class=\"line\">    FUNCTION_ID,</span><br><span class=\"line\">    LANG,</span><br><span class=\"line\">    FUNCTION_NAME,</span><br><span class=\"line\">    FUNCTION_DESCRIPTION</span><br><span class=\"line\">) <span class=\"keyword\">SELECT</span> </span><br><span class=\"line\">    FUNCTION_ID,</span><br><span class=\"line\">    <span class=\"string\">&#x27;es_ES&#x27;</span>,</span><br><span class=\"line\">    FUNCTION_NAME,</span><br><span class=\"line\">    FUNCTION_DESCRIPTION</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> SYS_FUNCTION_TL <span class=\"keyword\">WHERE</span> LANG <span class=\"operator\">=</span> <span class=\"string\">&#x27;en_GB&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- SYS_HOTKEY_TL</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> SYS_HOTKEY_TL(</span><br><span class=\"line\">    HOTKEY_ID,</span><br><span class=\"line\">    LANG,</span><br><span class=\"line\">    DESCRIPTION</span><br><span class=\"line\">) <span class=\"keyword\">SELECT</span> </span><br><span class=\"line\">    HOTKEY_ID,</span><br><span class=\"line\">    <span class=\"string\">&#x27;es_ES&#x27;</span>,</span><br><span class=\"line\">    DESCRIPTION</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> SYS_HOTKEY_TL <span class=\"keyword\">WHERE</span> LANG <span class=\"operator\">=</span> <span class=\"string\">&#x27;en_GB&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- SYS_IF_CONFIG_HEADER_TL</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> SYS_IF_CONFIG_HEADER_TL(</span><br><span class=\"line\">    HEADER_ID,</span><br><span class=\"line\">    LANG,</span><br><span class=\"line\">    NAME,</span><br><span class=\"line\">    DESCRIPTION</span><br><span class=\"line\">) <span class=\"keyword\">SELECT</span> </span><br><span class=\"line\">    HEADER_ID,</span><br><span class=\"line\">    <span class=\"string\">&#x27;es_ES&#x27;</span>,</span><br><span class=\"line\">    NAME,</span><br><span class=\"line\">    DESCRIPTION</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> SYS_IF_CONFIG_HEADER_TL <span class=\"keyword\">WHERE</span> LANG <span class=\"operator\">=</span> <span class=\"string\">&#x27;en_GB&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- SYS_IF_CONFIG_LINE_TL</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> SYS_IF_CONFIG_LINE_TL(</span><br><span class=\"line\">    LINE_ID,</span><br><span class=\"line\">    LANG,</span><br><span class=\"line\">    LINE_NAME,</span><br><span class=\"line\">    LINE_DESCRIPTION</span><br><span class=\"line\">) <span class=\"keyword\">SELECT</span> </span><br><span class=\"line\">    LINE_ID,</span><br><span class=\"line\">    <span class=\"string\">&#x27;es_ES&#x27;</span>,</span><br><span class=\"line\">    LINE_NAME,</span><br><span class=\"line\">    LINE_DESCRIPTION</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> SYS_IF_CONFIG_LINE_TL <span class=\"keyword\">WHERE</span> LANG <span class=\"operator\">=</span> <span class=\"string\">&#x27;en_GB&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- SYS_RESOURCE_ITEM_TL</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> SYS_RESOURCE_ITEM_TL(</span><br><span class=\"line\">    RESOURCE_ITEM_ID,</span><br><span class=\"line\">    LANG,</span><br><span class=\"line\">    ITEM_NAME,</span><br><span class=\"line\">    DESCRIPTION</span><br><span class=\"line\">) <span class=\"keyword\">SELECT</span> </span><br><span class=\"line\">    RESOURCE_ITEM_ID,</span><br><span class=\"line\">    <span class=\"string\">&#x27;es_ES&#x27;</span>,</span><br><span class=\"line\">    ITEM_NAME,</span><br><span class=\"line\">    DESCRIPTION</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> SYS_RESOURCE_ITEM_TL <span class=\"keyword\">WHERE</span> LANG <span class=\"operator\">=</span> <span class=\"string\">&#x27;en_GB&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- SYS_RESOURCE_TL</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> SYS_RESOURCE_TL(</span><br><span class=\"line\">    RESOURCE_ID,</span><br><span class=\"line\">    LANG,</span><br><span class=\"line\">    NAME,</span><br><span class=\"line\">    DESCRIPTION</span><br><span class=\"line\">) <span class=\"keyword\">SELECT</span> </span><br><span class=\"line\">    RESOURCE_ID,</span><br><span class=\"line\">    <span class=\"string\">&#x27;es_ES&#x27;</span>,</span><br><span class=\"line\">    NAME,</span><br><span class=\"line\">    DESCRIPTION</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> SYS_RESOURCE_TL <span class=\"keyword\">WHERE</span> LANG <span class=\"operator\">=</span> <span class=\"string\">&#x27;en_GB&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- SYS_ROLE_TL</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> SYS_ROLE_TL(</span><br><span class=\"line\">    ROLE_ID,</span><br><span class=\"line\">    LANG,</span><br><span class=\"line\">    ROLE_NAME,</span><br><span class=\"line\">    ROLE_DESCRIPTION</span><br><span class=\"line\">) <span class=\"keyword\">SELECT</span> </span><br><span class=\"line\">    ROLE_ID,</span><br><span class=\"line\">    <span class=\"string\">&#x27;es_ES&#x27;</span>,</span><br><span class=\"line\">    ROLE_NAME,</span><br><span class=\"line\">    ROLE_DESCRIPTION</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> SYS_ROLE_TL <span class=\"keyword\">WHERE</span> LANG <span class=\"operator\">=</span> <span class=\"string\">&#x27;en_GB&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-人工翻译\"><a href=\"#4-人工翻译\" class=\"headerlink\" title=\"4. 人工翻译\"></a>4. 人工翻译</h3><p>将所有西班牙语言下的字符串进行人工翻译，这包括 kendoui 的国际化资源文件和所有的国际化表的记录。</p>\n<h3 id=\"5-清缓存并重启服务器\"><a href=\"#5-清缓存并重启服务器\" class=\"headerlink\" title=\"5. 清缓存并重启服务器\"></a>5. 清缓存并重启服务器</h3><p>启动命令行工具 redis-cli 并连接至 Redis，执行以下命令清除 Redis 缓存：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flushall</span><br></pre></td></tr></table></figure>\n\n<p>重启 Tomcat 服务器。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"HAP-简介\"><a href=\"#HAP-简介\" class=\"headerlink\" title=\"HAP 简介\"></a>HAP 简介</h2><p>汉得应用开发平台（HAND Application Platform）是汉得公司为了应对移动互联网化、应用云端化、海量数据化和数字化服务转型的应用开发平台，是中台化产品和应用开发的基础平台。HAP采用开源的Java EE技术体系，平台设计灵活可扩展、可移植、可应对高并发需求。</p>\n<blockquote>\n<p>更多信息请访问：<a href=\"http://eco.hand-china.com/platform/hap.html\">http://eco.hand-china.com/platform/hap.html</a></p>\n</blockquote>","more":"<h2 id=\"启用新语言\"><a href=\"#启用新语言\" class=\"headerlink\" title=\"启用新语言\"></a>启用新语言</h2><p>HAP 应用开发平台默认支持简体中文和英语两种语言，如果要启用新的语言支持，比如西班牙语，则需要找到所有国际化相关的前后端对象进行翻译。</p>\n<p>幸运的是，HAP 应用开发平台对国际化提供了良好的框架支持和开发规范，所以涉及到和多语言或者国际化相关的数据表和其他资源对象的分布相对集中且有规律可循，具体分三部分：</p>\n<ol>\n<li>多语言描述总表 <code>SYS_PROMPTS</code></li>\n<li>所有平台和功能页面的实体对象所关联的多语言表 <code>*_TL</code></li>\n<li>KendoUI 国际化支持文件 <code>kendo.culture.&lt;locale&gt;.js</code> 和 <code>kendo.messages.&lt;locale&gt;.js</code></li>\n</ol>\n<p>下面以西班牙语为例，详细说明整个过程。</p>\n<h3 id=\"1-定义语言代码\"><a href=\"#1-定义语言代码\" class=\"headerlink\" title=\"1. 定义语言代码\"></a>1. 定义语言代码</h3><p>进入 <code>系统管理</code> &gt; <code>语言维护</code> 新增西班牙语言代码 <code>es_ES</code></p>\n<p><img data-src=\"/2018/10/09/hap-enable-new-language/image-20181009103555564.png\" alt=\"image-20181009103555564\"></p>\n<h3 id=\"2-适配-KendoUI-国际化资源文件\"><a href=\"#2-适配-KendoUI-国际化资源文件\" class=\"headerlink\" title=\"2. 适配 KendoUI 国际化资源文件\"></a>2. 适配 KendoUI 国际化资源文件</h3><p>按照下表将指定的资源文件拷贝到对应目录下：</p>\n<table>\n<thead>\n<tr>\n<th>源文件路径</th>\n<th>拷贝后的路径</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>target/core/lib/kendoui/js/messages/kendo.messages.en-GB.js</td>\n<td>src/webapp/lib/kendoui/js/messages/kendo.messages.es-ES.js</td>\n</tr>\n<tr>\n<td>target/core/lib/kendoui/js/cultures/kendo.culture.en-GB.js</td>\n<td>src/webapp/lib/kendoui/js/cultures/kendo.culture.es-ES.js</td>\n</tr>\n</tbody></table>\n<h3 id=\"3-更新数据库记录\"><a href=\"#3-更新数据库记录\" class=\"headerlink\" title=\"3. 更新数据库记录\"></a>3. 更新数据库记录</h3><p>使用 en_GB 下的语言记录来更新所有的国际化表，脚本如下：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- ========================================================</span></span><br><span class=\"line\"><span class=\"comment\">-- Insert all Spanish records based on original en_GB</span></span><br><span class=\"line\"><span class=\"comment\">--</span></span><br><span class=\"line\"><span class=\"comment\">-- Creation Date : 2018-10-08</span></span><br><span class=\"line\"><span class=\"comment\">-- Created By    : memories.liu@hand-china.com</span></span><br><span class=\"line\"><span class=\"comment\">-- Script Version: 1.0.0</span></span><br><span class=\"line\"><span class=\"comment\">-- HAP Version   : 3.5.0-RELEASE</span></span><br><span class=\"line\"><span class=\"comment\">--</span></span><br><span class=\"line\"><span class=\"comment\">-- ========================================================</span></span><br><span class=\"line\"><span class=\"comment\">-- System Prompt table:</span></span><br><span class=\"line\"><span class=\"comment\">--   SYS_PROMPTS</span></span><br><span class=\"line\"><span class=\"comment\">-- Multi-lingual tables listed below:</span></span><br><span class=\"line\"><span class=\"comment\">--   FND_COMPANY_TL</span></span><br><span class=\"line\"><span class=\"comment\">--   HR_ORG_POSITION_TL</span></span><br><span class=\"line\"><span class=\"comment\">--   HR_ORG_UNIT_TL</span></span><br><span class=\"line\"><span class=\"comment\">--   SYS_ATTACH_CATEGORY_TL</span></span><br><span class=\"line\"><span class=\"comment\">--   SYS_CODE_TL</span></span><br><span class=\"line\"><span class=\"comment\">--   SYS_CODE_VALUE_TL</span></span><br><span class=\"line\"><span class=\"comment\">--   SYS_DASHBOARD_TL</span></span><br><span class=\"line\"><span class=\"comment\">--   SYS_FUNCTION_TL</span></span><br><span class=\"line\"><span class=\"comment\">--   SYS_HOTKEY_TL</span></span><br><span class=\"line\"><span class=\"comment\">--   SYS_IF_CONFIG_HEADER_TL</span></span><br><span class=\"line\"><span class=\"comment\">--   SYS_IF_CONFIG_LINE_TL</span></span><br><span class=\"line\"><span class=\"comment\">--   SYS_RESOURCE_ITEM_TL</span></span><br><span class=\"line\"><span class=\"comment\">--   SYS_RESOURCE_TL</span></span><br><span class=\"line\"><span class=\"comment\">--   SYS_ROLE_TL</span></span><br><span class=\"line\"><span class=\"comment\">-- ========================================================</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- sys_prompts</span></span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> sys_prompts (</span><br><span class=\"line\">  prompt_id,</span><br><span class=\"line\">  prompt_code,</span><br><span class=\"line\">  lang,</span><br><span class=\"line\">  description,</span><br><span class=\"line\">  object_version_number</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">select</span> </span><br><span class=\"line\">  SYS_PROMPTS_S.NEXTVAL,</span><br><span class=\"line\">  prompt_code,</span><br><span class=\"line\">  <span class=\"string\">&#x27;es_ES&#x27;</span>,</span><br><span class=\"line\">  description,</span><br><span class=\"line\">  object_version_number</span><br><span class=\"line\"><span class=\"keyword\">from</span> sys_prompts <span class=\"keyword\">where</span> lang <span class=\"operator\">=</span> <span class=\"string\">&#x27;en_GB&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- FND_COMPANY_TL</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> FND_COMPANY_TL(</span><br><span class=\"line\">    COMPANY_ID,</span><br><span class=\"line\">    LANG,</span><br><span class=\"line\">    COMPANY_SHORT_NAME,</span><br><span class=\"line\">    COMPANY_FULL_NAME</span><br><span class=\"line\">) <span class=\"keyword\">SELECT</span> </span><br><span class=\"line\">    COMPANY_ID,</span><br><span class=\"line\">    <span class=\"string\">&#x27;es_ES&#x27;</span>,</span><br><span class=\"line\">    COMPANY_SHORT_NAME,</span><br><span class=\"line\">    COMPANY_FULL_NAME</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> FND_COMPANY_TL <span class=\"keyword\">WHERE</span> LANG <span class=\"operator\">=</span> <span class=\"string\">&#x27;en_GB&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- HR_ORG_POSITION_TL</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> HR_ORG_POSITION_TL(</span><br><span class=\"line\">    POSITION_ID,</span><br><span class=\"line\">    LANG,</span><br><span class=\"line\">    NAME,</span><br><span class=\"line\">    DESCRIPTION</span><br><span class=\"line\">) <span class=\"keyword\">SELECT</span> </span><br><span class=\"line\">    POSITION_ID,</span><br><span class=\"line\">    <span class=\"string\">&#x27;es_ES&#x27;</span>,</span><br><span class=\"line\">    NAME,</span><br><span class=\"line\">    DESCRIPTION</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> HR_ORG_POSITION_TL <span class=\"keyword\">WHERE</span> LANG <span class=\"operator\">=</span> <span class=\"string\">&#x27;en_GB&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- HR_ORG_UNIT_TL</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> HR_ORG_UNIT_TL(</span><br><span class=\"line\">    UNIT_ID,</span><br><span class=\"line\">    LANG,</span><br><span class=\"line\">    NAME,</span><br><span class=\"line\">    DESCRIPTION</span><br><span class=\"line\">) <span class=\"keyword\">SELECT</span> </span><br><span class=\"line\">    UNIT_ID,</span><br><span class=\"line\">    <span class=\"string\">&#x27;es_ES&#x27;</span>,</span><br><span class=\"line\">    NAME,</span><br><span class=\"line\">    DESCRIPTION</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> HR_ORG_UNIT_TL <span class=\"keyword\">WHERE</span> LANG <span class=\"operator\">=</span> <span class=\"string\">&#x27;en_GB&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- SYS_ATTACH_CATEGORY_TL</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> SYS_ATTACH_CATEGORY_TL(</span><br><span class=\"line\">    CATEGORY_ID,</span><br><span class=\"line\">    LANG,</span><br><span class=\"line\">    CATEGORY_NAME,</span><br><span class=\"line\">    DESCRIPTION</span><br><span class=\"line\">) <span class=\"keyword\">SELECT</span> </span><br><span class=\"line\">    CATEGORY_ID,</span><br><span class=\"line\">    <span class=\"string\">&#x27;es_ES&#x27;</span>,</span><br><span class=\"line\">    CATEGORY_NAME,</span><br><span class=\"line\">    DESCRIPTION</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> SYS_ATTACH_CATEGORY_TL <span class=\"keyword\">WHERE</span> LANG <span class=\"operator\">=</span> <span class=\"string\">&#x27;en_GB&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- SYS_CODE_TL</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> SYS_CODE_TL(</span><br><span class=\"line\">    CODE_ID,</span><br><span class=\"line\">    LANG,</span><br><span class=\"line\">    DESCRIPTION</span><br><span class=\"line\">) <span class=\"keyword\">SELECT</span> </span><br><span class=\"line\">    CODE_ID,</span><br><span class=\"line\">    <span class=\"string\">&#x27;es_ES&#x27;</span>,</span><br><span class=\"line\">    DESCRIPTION</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> SYS_CODE_TL <span class=\"keyword\">WHERE</span> LANG <span class=\"operator\">=</span> <span class=\"string\">&#x27;en_GB&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- SYS_CODE_VALUE_TL</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> SYS_CODE_VALUE_TL(</span><br><span class=\"line\">    CODE_VALUE_ID,</span><br><span class=\"line\">    LANG,</span><br><span class=\"line\">    MEANING,</span><br><span class=\"line\">    DESCRIPTION</span><br><span class=\"line\">) <span class=\"keyword\">SELECT</span> </span><br><span class=\"line\">    CODE_VALUE_ID,</span><br><span class=\"line\">    <span class=\"string\">&#x27;es_ES&#x27;</span>,</span><br><span class=\"line\">    MEANING,</span><br><span class=\"line\">    DESCRIPTION</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> SYS_CODE_VALUE_TL <span class=\"keyword\">WHERE</span> LANG <span class=\"operator\">=</span> <span class=\"string\">&#x27;en_GB&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- SYS_DASHBOARD_TL</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> SYS_DASHBOARD_TL(</span><br><span class=\"line\">    DASHBOARD_ID,</span><br><span class=\"line\">    LANG,</span><br><span class=\"line\">    TITLE,</span><br><span class=\"line\">    DESCRIPTION</span><br><span class=\"line\">) <span class=\"keyword\">SELECT</span> </span><br><span class=\"line\">    DASHBOARD_ID,</span><br><span class=\"line\">    <span class=\"string\">&#x27;es_ES&#x27;</span>,</span><br><span class=\"line\">    TITLE,</span><br><span class=\"line\">    DESCRIPTION</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> SYS_DASHBOARD_TL <span class=\"keyword\">WHERE</span> LANG <span class=\"operator\">=</span> <span class=\"string\">&#x27;en_GB&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- SYS_FUNCTION_TL</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> SYS_FUNCTION_TL(</span><br><span class=\"line\">    FUNCTION_ID,</span><br><span class=\"line\">    LANG,</span><br><span class=\"line\">    FUNCTION_NAME,</span><br><span class=\"line\">    FUNCTION_DESCRIPTION</span><br><span class=\"line\">) <span class=\"keyword\">SELECT</span> </span><br><span class=\"line\">    FUNCTION_ID,</span><br><span class=\"line\">    <span class=\"string\">&#x27;es_ES&#x27;</span>,</span><br><span class=\"line\">    FUNCTION_NAME,</span><br><span class=\"line\">    FUNCTION_DESCRIPTION</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> SYS_FUNCTION_TL <span class=\"keyword\">WHERE</span> LANG <span class=\"operator\">=</span> <span class=\"string\">&#x27;en_GB&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- SYS_HOTKEY_TL</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> SYS_HOTKEY_TL(</span><br><span class=\"line\">    HOTKEY_ID,</span><br><span class=\"line\">    LANG,</span><br><span class=\"line\">    DESCRIPTION</span><br><span class=\"line\">) <span class=\"keyword\">SELECT</span> </span><br><span class=\"line\">    HOTKEY_ID,</span><br><span class=\"line\">    <span class=\"string\">&#x27;es_ES&#x27;</span>,</span><br><span class=\"line\">    DESCRIPTION</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> SYS_HOTKEY_TL <span class=\"keyword\">WHERE</span> LANG <span class=\"operator\">=</span> <span class=\"string\">&#x27;en_GB&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- SYS_IF_CONFIG_HEADER_TL</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> SYS_IF_CONFIG_HEADER_TL(</span><br><span class=\"line\">    HEADER_ID,</span><br><span class=\"line\">    LANG,</span><br><span class=\"line\">    NAME,</span><br><span class=\"line\">    DESCRIPTION</span><br><span class=\"line\">) <span class=\"keyword\">SELECT</span> </span><br><span class=\"line\">    HEADER_ID,</span><br><span class=\"line\">    <span class=\"string\">&#x27;es_ES&#x27;</span>,</span><br><span class=\"line\">    NAME,</span><br><span class=\"line\">    DESCRIPTION</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> SYS_IF_CONFIG_HEADER_TL <span class=\"keyword\">WHERE</span> LANG <span class=\"operator\">=</span> <span class=\"string\">&#x27;en_GB&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- SYS_IF_CONFIG_LINE_TL</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> SYS_IF_CONFIG_LINE_TL(</span><br><span class=\"line\">    LINE_ID,</span><br><span class=\"line\">    LANG,</span><br><span class=\"line\">    LINE_NAME,</span><br><span class=\"line\">    LINE_DESCRIPTION</span><br><span class=\"line\">) <span class=\"keyword\">SELECT</span> </span><br><span class=\"line\">    LINE_ID,</span><br><span class=\"line\">    <span class=\"string\">&#x27;es_ES&#x27;</span>,</span><br><span class=\"line\">    LINE_NAME,</span><br><span class=\"line\">    LINE_DESCRIPTION</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> SYS_IF_CONFIG_LINE_TL <span class=\"keyword\">WHERE</span> LANG <span class=\"operator\">=</span> <span class=\"string\">&#x27;en_GB&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- SYS_RESOURCE_ITEM_TL</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> SYS_RESOURCE_ITEM_TL(</span><br><span class=\"line\">    RESOURCE_ITEM_ID,</span><br><span class=\"line\">    LANG,</span><br><span class=\"line\">    ITEM_NAME,</span><br><span class=\"line\">    DESCRIPTION</span><br><span class=\"line\">) <span class=\"keyword\">SELECT</span> </span><br><span class=\"line\">    RESOURCE_ITEM_ID,</span><br><span class=\"line\">    <span class=\"string\">&#x27;es_ES&#x27;</span>,</span><br><span class=\"line\">    ITEM_NAME,</span><br><span class=\"line\">    DESCRIPTION</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> SYS_RESOURCE_ITEM_TL <span class=\"keyword\">WHERE</span> LANG <span class=\"operator\">=</span> <span class=\"string\">&#x27;en_GB&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- SYS_RESOURCE_TL</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> SYS_RESOURCE_TL(</span><br><span class=\"line\">    RESOURCE_ID,</span><br><span class=\"line\">    LANG,</span><br><span class=\"line\">    NAME,</span><br><span class=\"line\">    DESCRIPTION</span><br><span class=\"line\">) <span class=\"keyword\">SELECT</span> </span><br><span class=\"line\">    RESOURCE_ID,</span><br><span class=\"line\">    <span class=\"string\">&#x27;es_ES&#x27;</span>,</span><br><span class=\"line\">    NAME,</span><br><span class=\"line\">    DESCRIPTION</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> SYS_RESOURCE_TL <span class=\"keyword\">WHERE</span> LANG <span class=\"operator\">=</span> <span class=\"string\">&#x27;en_GB&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- SYS_ROLE_TL</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> SYS_ROLE_TL(</span><br><span class=\"line\">    ROLE_ID,</span><br><span class=\"line\">    LANG,</span><br><span class=\"line\">    ROLE_NAME,</span><br><span class=\"line\">    ROLE_DESCRIPTION</span><br><span class=\"line\">) <span class=\"keyword\">SELECT</span> </span><br><span class=\"line\">    ROLE_ID,</span><br><span class=\"line\">    <span class=\"string\">&#x27;es_ES&#x27;</span>,</span><br><span class=\"line\">    ROLE_NAME,</span><br><span class=\"line\">    ROLE_DESCRIPTION</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> SYS_ROLE_TL <span class=\"keyword\">WHERE</span> LANG <span class=\"operator\">=</span> <span class=\"string\">&#x27;en_GB&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-人工翻译\"><a href=\"#4-人工翻译\" class=\"headerlink\" title=\"4. 人工翻译\"></a>4. 人工翻译</h3><p>将所有西班牙语言下的字符串进行人工翻译，这包括 kendoui 的国际化资源文件和所有的国际化表的记录。</p>\n<h3 id=\"5-清缓存并重启服务器\"><a href=\"#5-清缓存并重启服务器\" class=\"headerlink\" title=\"5. 清缓存并重启服务器\"></a>5. 清缓存并重启服务器</h3><p>启动命令行工具 redis-cli 并连接至 Redis，执行以下命令清除 Redis 缓存：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flushall</span><br></pre></td></tr></table></figure>\n\n<p>重启 Tomcat 服务器。</p>"},{"title":"HAP SSL 邮件账户设置","date":"2018-10-17T08:14:38.000Z","_content":"\nHAP 默认提供一套完整的邮件发送 API 和若干邮件设置功能，其中就包括邮件账户设置功能。这个功能允许你在HAP 中配置多个邮件账户，每个邮件账户可于一个或多个邮件模板进行绑定，我们按需进行配置即可。\n\n> 更多关于邮件功能的信息请访问：\n>\n> http://eco.hand-china.com/doc/hap/latest/user_guide/system/email.html\n\n这里重点说一下如何配置一个启用 SSL 的邮件账户。通常情况下，它的配置端口为 `465`，同时还需要进行额外的服务器属性配置，这个配置界面在邮件账户编辑页面下方的 Server Config 或服务器设置标签页中，如下图所示：\n\n<!-- more -->\n\n![image-20181017162319708](hap-email-account-ssl-setup/image-20181017162319708.png)\n\n此处有以下几个固定的属性需要设置，详见下表：\n\n| 属性                             | 值                             |\n| -------------------------------- | ------------------------------ |\n| mail.smtp.auth                   | true                           |\n| mail.smtp.port                   | 465                            |\n| mail.smtp.ssl.enable             | true                           |\n| mail.smtp.socketFactory.class    | javax.net.ssl.SSLSocketFactory |\n| mail.smtp.socketFactory.fallback | false                          |\n| mail.smtp.socketFactory.port     | 465                            |\n\n属性设置完成之后，其他设置按照正常步骤完成即可。\n\n> **注意：**目前 Yahoo! 邮箱未能通过测试，如有进一步修复，我会同步在此处进行更新。","source":"_posts/hap-email-account-ssl-setup.md","raw":"---\ntitle: HAP SSL 邮件账户设置\ndate: 2018-10-17 16:14:38\ncategories:\n- HAP\ntags:\n- email\n- SSL\n---\n\nHAP 默认提供一套完整的邮件发送 API 和若干邮件设置功能，其中就包括邮件账户设置功能。这个功能允许你在HAP 中配置多个邮件账户，每个邮件账户可于一个或多个邮件模板进行绑定，我们按需进行配置即可。\n\n> 更多关于邮件功能的信息请访问：\n>\n> http://eco.hand-china.com/doc/hap/latest/user_guide/system/email.html\n\n这里重点说一下如何配置一个启用 SSL 的邮件账户。通常情况下，它的配置端口为 `465`，同时还需要进行额外的服务器属性配置，这个配置界面在邮件账户编辑页面下方的 Server Config 或服务器设置标签页中，如下图所示：\n\n<!-- more -->\n\n![image-20181017162319708](hap-email-account-ssl-setup/image-20181017162319708.png)\n\n此处有以下几个固定的属性需要设置，详见下表：\n\n| 属性                             | 值                             |\n| -------------------------------- | ------------------------------ |\n| mail.smtp.auth                   | true                           |\n| mail.smtp.port                   | 465                            |\n| mail.smtp.ssl.enable             | true                           |\n| mail.smtp.socketFactory.class    | javax.net.ssl.SSLSocketFactory |\n| mail.smtp.socketFactory.fallback | false                          |\n| mail.smtp.socketFactory.port     | 465                            |\n\n属性设置完成之后，其他设置按照正常步骤完成即可。\n\n> **注意：**目前 Yahoo! 邮箱未能通过测试，如有进一步修复，我会同步在此处进行更新。","slug":"hap-email-account-ssl-setup","published":1,"updated":"2020-03-23T15:38:46.305Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmasb6npl00097sosdea5900m","content":"<p>HAP 默认提供一套完整的邮件发送 API 和若干邮件设置功能，其中就包括邮件账户设置功能。这个功能允许你在HAP 中配置多个邮件账户，每个邮件账户可于一个或多个邮件模板进行绑定，我们按需进行配置即可。</p>\n<blockquote>\n<p>更多关于邮件功能的信息请访问：</p>\n<p><a href=\"http://eco.hand-china.com/doc/hap/latest/user_guide/system/email.html\">http://eco.hand-china.com/doc/hap/latest/user_guide/system/email.html</a></p>\n</blockquote>\n<p>这里重点说一下如何配置一个启用 SSL 的邮件账户。通常情况下，它的配置端口为 <code>465</code>，同时还需要进行额外的服务器属性配置，这个配置界面在邮件账户编辑页面下方的 Server Config 或服务器设置标签页中，如下图所示：</p>\n<span id=\"more\"></span>\n\n<p><img data-src=\"/2018/10/17/hap-email-account-ssl-setup/image-20181017162319708.png\" alt=\"image-20181017162319708\"></p>\n<p>此处有以下几个固定的属性需要设置，详见下表：</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>mail.smtp.auth</td>\n<td>true</td>\n</tr>\n<tr>\n<td>mail.smtp.port</td>\n<td>465</td>\n</tr>\n<tr>\n<td>mail.smtp.ssl.enable</td>\n<td>true</td>\n</tr>\n<tr>\n<td>mail.smtp.socketFactory.class</td>\n<td>javax.net.ssl.SSLSocketFactory</td>\n</tr>\n<tr>\n<td>mail.smtp.socketFactory.fallback</td>\n<td>false</td>\n</tr>\n<tr>\n<td>mail.smtp.socketFactory.port</td>\n<td>465</td>\n</tr>\n</tbody></table>\n<p>属性设置完成之后，其他设置按照正常步骤完成即可。</p>\n<blockquote>\n<p><strong>注意：</strong>目前 Yahoo! 邮箱未能通过测试，如有进一步修复，我会同步在此处进行更新。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>HAP 默认提供一套完整的邮件发送 API 和若干邮件设置功能，其中就包括邮件账户设置功能。这个功能允许你在HAP 中配置多个邮件账户，每个邮件账户可于一个或多个邮件模板进行绑定，我们按需进行配置即可。</p>\n<blockquote>\n<p>更多关于邮件功能的信息请访问：</p>\n<p><a href=\"http://eco.hand-china.com/doc/hap/latest/user_guide/system/email.html\">http://eco.hand-china.com/doc/hap/latest/user_guide/system/email.html</a></p>\n</blockquote>\n<p>这里重点说一下如何配置一个启用 SSL 的邮件账户。通常情况下，它的配置端口为 <code>465</code>，同时还需要进行额外的服务器属性配置，这个配置界面在邮件账户编辑页面下方的 Server Config 或服务器设置标签页中，如下图所示：</p>","more":"<p><img data-src=\"/2018/10/17/hap-email-account-ssl-setup/image-20181017162319708.png\" alt=\"image-20181017162319708\"></p>\n<p>此处有以下几个固定的属性需要设置，详见下表：</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>mail.smtp.auth</td>\n<td>true</td>\n</tr>\n<tr>\n<td>mail.smtp.port</td>\n<td>465</td>\n</tr>\n<tr>\n<td>mail.smtp.ssl.enable</td>\n<td>true</td>\n</tr>\n<tr>\n<td>mail.smtp.socketFactory.class</td>\n<td>javax.net.ssl.SSLSocketFactory</td>\n</tr>\n<tr>\n<td>mail.smtp.socketFactory.fallback</td>\n<td>false</td>\n</tr>\n<tr>\n<td>mail.smtp.socketFactory.port</td>\n<td>465</td>\n</tr>\n</tbody></table>\n<p>属性设置完成之后，其他设置按照正常步骤完成即可。</p>\n<blockquote>\n<p><strong>注意：</strong>目前 Yahoo! 邮箱未能通过测试，如有进一步修复，我会同步在此处进行更新。</p>\n</blockquote>"},{"title":"在非页面入口处理多语言环境","date":"2018-10-15T08:11:09.000Z","_content":"\n## 概述\n\n在 HAP 中，从浏览器打开的页面或者调用的 Rest API 都必须经过控制器层，而控制器层可以很容易地获取 `HttpServletRequest` 对象，进而构造 `IRequest` 对象来存储环境上下文信息，这里就包括当前的语言环境。\n\n举例说明：\n\n```java\npublic ResponseData processRequest(HttpServletRequest request) {\n    IRequest iRequest = this.createRequestContext(request);\n    // 调用服务层方法并传入 IRequest 进行业务处理\n    return new ResponseData(service.someMethod(iRequest));\n}\n```\n\n因此在控制器层获取当前设置的语言环境是轻而易举的事情。不过，HAP 开发过程中会有很多其他的场景不会将控制器作为入口进入。在`任务管理`、`定时任务`、`工作流`和`UReport2报表`中，核心程序的入口都是通过向 Spring 注册一些通用的服务组件(`@Component`) 并实现特定的接口来实现的。因此这种场景下，如何构建一个正确的 IRequest 对象就成为一个很有技巧性的问题了。\n\n<!-- more -->\n\n### 基本原则\n\n构造一个 IRequest 对象的通用方法一般是通过 RequestHelper 帮助类进行辅助完成的。同时，我们要根据不同场景来获取当前环境的语言代码。然后将构建好的 IRequest 通过参数形式传递到 Service 层的方法。\n\n> **注意：** HAP 框架的最佳实践要求我们一定要将 IRequest 经由 Service 层调用才可以，因为框架内部已经为 Service 层增加了 AOP 处理，在调用前后会自动判断 Service 方法是否存在 IRequest 类型的参数。如果有，那么会对其自动进行管理。\n\n### RequestHelper\n\nHAP 框架内部提供了一个帮助类 RequestHelper 来辅助开发者获取当前设置的 IRequest 实例或者新建一个全新的 IRequest。该类定义在 `com.hand.hap.core.impl`包下，下表列出常见的方法：\n\n| 方法名称             | 解释                                      |\n| -------------------- | ----------------------------------------- |\n| createServiceRequest | 根据 HttpServletRequest 构建 IRequest     |\n| newEmptyRequest      | 创建一个全新的 IRequest 实例              |\n| clearCurrentRequest  | 从 ThreadLocal 中清除当前的 IRequest 实例 |\n| setCurrentRequest    | 将一个 IRequest 对象设置为当前的生效      |\n| getCurrentRequest    | 获取当前上下文的 IRequest 对象            |\n\n> **注意：**`getCurrentRequest` 的唯一的 bool 类型参数 `returnEmptyForNull`的含义为，若从当前上下文中无法获取有效的 IRequest 对象时：\n>\n> `true`: 调用 `newEmptyRequest` 创建一个新的请求对象\n>\n> `false`:  直接返回给调用者 **null**\n\n接下来我们利用 RequestHelper 类来处理不同的应用场景下的多语言需求。\n\n### en_US vs en_GB\n\n当系统无法从上下文（ThreadLocal\\<IRequest\\>）获取 IRequest 实例时，通常我们会使用 newEmptyRequest 来新建一个空的 IRequest 对象。该方法会使用 ServiceRequest 类实例化 IRequest 对象，而此时 locale 属性则是使用 `Locale.getDefault().toString()` 方法来初始化默认值的。这在开发者本机一般是没有问题，然而在服务器运行时，它会返回服务器默认的语言代码 **en_US**，而不是 HAP 的 en_GB 。\n\n```java\nimport java.util.Locale;\n\npublic class ServiceRequest implements IRequest {\n    private String locale = Locale.getDefault().toString();\n    // ...\n}\n```\n\n这个现象通常会在定时任务或者 Rest API 等等场景下，在服务层无法正确查询到多语言记录。接下来我们针对不同的应用场景来分别讨论解决方法。\n\n\n\n## 任务管理\n\n对于任务管理，我们可以通过 `RequestHelper.getCurrentRequest` 来得到当前的 IRequest 实例。但在 Linux 服务器下，它的 locale 属性并不是 `en_GB`，而是 `en_US`，这与 HAP 的语言代码不一致，导致无法正确获取多语言记录。\n\n因此任务管理场景下的实现思路是根据任务的提交者找到对应的系统用户ID，进而找到这个用户在首选项中的语言设置，之后替换 IRequest 的 locale 属性，最后传入 Service 层。实现代码大致如下：\n\n```java\nimport com.hand.hap.account.service.IUserService;\nimport com.hand.hap.core.IRequest;\nimport com.hand.hap.core.impl.RequestHelper;\nimport com.hand.hap.system.dto.SysPreferences;\nimport com.hand.hap.system.service.ISysPreferencesService;\nimport com.hand.hap.task.info.ExecutionInfo;\nimport com.hand.hap.task.service.ITask;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport com.hand.hap.account.dto.User;\n\nimport demo.service.IDemoService;\n\npublic class DemoTask implements ITask {\n    @Autowired\n    IDemoService demoService;\n\n    @Autowired\n    ISysPreferencesService preferencesService;\n    @Autowired\n    IUserService userService;\n\n    @Override\n    public void execute(ExecutionInfo executionInfo) throws Exception {\n        // 获取当前任务的提交者\n        User executioner = userService.selectByUserName(executionInfo.getUsername());\n        // 根据提交者的用户ID得到用户首选项中设置的语言代码\n        SysPreferences preference = preferencesService.selectUserPreference(\"locale\", executioner.getUserId());\n        // 得到当前的 IRequest\n        IRequest request = RequestHelper.getCurrentRequest(true);\n        // 设置IRequest的语言上下文\n        request.setLocale(preference.getPreferencesValue());\n        // 将IRequest传入Service层的方法\n        // Service的AOP机制将会自动处理IRequest的生命周期\n        demoService.serviceMethod(request);\n    }\n}\n```\n\n## 工作流\n\n工作流场景下的实现思路是获取当前工作流的提交者（Initiator），进而定位至该员工的系统用户，最后获取首选项的语言代码构建 IRequest。实现代码大致如下：\n\n```java\n@Component\npublic class ActivityDemoBean implements IActivitiBean, JavaDelegate {\n\n    @Autowired\n    IUserService userService;\n    @Autowired\n    ISysPreferencesService preferencesService;\n    @Autowired\n    IDemoService demoService;\n\n    @Override\n    public void execute(DelegateExecution execution) {\n        String initiator = execution.getVariable(\"initiator\", String.class);\n        List<User> users = userService.selectUserNameByEmployeeCode(initiator);\n\n        if(CollectionUtils.isNotEmpty(users)) {\n            User user = users.get(0);\n            SysPreferences preference = \n                preferencesService.selectUserPreference(\"locale\", user.getUserId());\n            // 新建IRequest\n            IRequest request = RequestHelper.getCurrentRequest(true);\n            // 设置IRequest的语言上下文\n            request.setLocale(preference.getPreferencesValue());\n            // 将IRequest传入Service层的方法\n            // Service的AOP机制将会自动处理IRequest的生命周期\n            demoService.serviceMethod(request);\n        }\n    }\n}\n```\n\n## UReport2 Beans\n\nUReport2 本身提供了一个方法叫 RequestHolder 可以用来获取当前的 IRequest，我们可以借助这个方法来达到目的：\n\n```java\n@Component\npublic class UreportDataSourceBean {\n\n    @Autowired\n    IDemoService demoService;\n\n    public List<Demo> loadDemoData(String dsName, \n                                   String datasetName, \n                                   Map<String, Object> parameters) {\n        // 初始化请求上下文\n        HttpServletRequest request = RequestHolder.getRequest();\n        IRequest requestContext = RequestHelper.createServiceRequest(request);\n\n        // 执行查询\n        List<Demo> result = demoService.method(requestContext);\n        return result;\n    }\n}\n```\n\n## 定时任务\n\n定时任务由于其后台自动调度的特点，导致其上下文无法获取用户信息。所以针对定时任务，我们需要定义一个系统配置项来预设置一个默认的语言代码：\n\n```java\npublic class Ora2062DemoJob extends AbstractJob {\n\n    @Autowired\n    IOra2062DemoService demoService;\n    @Autowired\n    IProfileService profileService;\n\n    @Override\n    public void safeExecute(JobExecutionContext context) throws Exception {\n        // 新建一个空的 IRequest\n        IRequest request = RequestHelper.getCurrentRequest(true);\n        // 从系统配置项 SYSTEM_LANG 中获取默认的语言代码\n        request.setLocale(profileService.getProfileValue(request, \"SYSTEM_LANG\"));\n        // 调用服务方法\n        demoService.method(request);\n    }\n}\n\n```\n\n> **提示：**SYSTEM_LANG 是一个全局系统配置项，可设置默认值为 en_GB\n\n## Rest API Controller\n\nHAP 通过在控制器层映射特定前缀的路径来向外部提供 Rest API 服务。一般情况下，Rest API 会结合 OAuth2 进行客户端授权管理来完成身份的验证。当我们采用用户名密码方式进行授权的时候，客户端账户会与这个系统用户进行关联和初始化，所以在控制器层创建 IRequest 的时候是可以正确取到上下文信息的。\n\n不过这种方式有个弊端是系统用户信息会暴露给外界。在某些场景下，这是不太安全的做法，这时我们通常会改用 `client_credentials` 的授权方式。不过这种方式下，控制器层是没办法定位当前执行的上下文是哪个用户，进而 locale 也是没法获取上下文值。\n\n## 优化服务层AOP切面类\n\n你可以采用与`定时任务`类似的做法来解决此问题，不过这种方式需要对每一个定时任务入口类和控制器进行额外的编码处理，带来了不少的工作量。这里有一种一劳永逸的方法，就是修改服务层的切面类 `ServiceExecutionAdvice`，直接处理 en_US 的情况。这样一来，无论请求是从定时任务还是 Rest API 过来，只要遵循服务的处理都是通过调用服务接口方法并且**传入 IRequest 参数实例**，我们就会始终可以获取正确的 locale 值，实现如下：\n\n```java\npackage com.hand.hap.core.impl;\npublic class ServiceExecutionAdvice implements MethodInterceptor {\n    private final String SERVER_DEFAULT_LANG = \"en_US\";\n    \n    @Autowired\n    private IProfileService profileService;\n    \n    public void before(Method method, Object[] args, Object target) throws Throwable {\n        // ...\n        IRequest requestContext = (IRequest) args[idx];\n        if (requestContext != null) {\n\n            if(SERVER_DEFAULT_LANG.equals(requestContext.getLocale())) {\n                requestContext.setLocale(\n                    profileService.getProfileValue(null, \"SYSTEM_LANG\"));\n            }\n            \n            RequestHelper.setCurrentRequest(requestContext);\n            initMDC(requestContext);\n        }\n        // ...\n    }\n}\n```\n\n","source":"_posts/hap-i18n-irequest.md","raw":"---\ntitle: 在非页面入口处理多语言环境\ndate: 2018-10-15 16:11:09\ncategories:\n- HAP\ntags:\n- i18n\n- iRequest\n- locale\n---\n\n## 概述\n\n在 HAP 中，从浏览器打开的页面或者调用的 Rest API 都必须经过控制器层，而控制器层可以很容易地获取 `HttpServletRequest` 对象，进而构造 `IRequest` 对象来存储环境上下文信息，这里就包括当前的语言环境。\n\n举例说明：\n\n```java\npublic ResponseData processRequest(HttpServletRequest request) {\n    IRequest iRequest = this.createRequestContext(request);\n    // 调用服务层方法并传入 IRequest 进行业务处理\n    return new ResponseData(service.someMethod(iRequest));\n}\n```\n\n因此在控制器层获取当前设置的语言环境是轻而易举的事情。不过，HAP 开发过程中会有很多其他的场景不会将控制器作为入口进入。在`任务管理`、`定时任务`、`工作流`和`UReport2报表`中，核心程序的入口都是通过向 Spring 注册一些通用的服务组件(`@Component`) 并实现特定的接口来实现的。因此这种场景下，如何构建一个正确的 IRequest 对象就成为一个很有技巧性的问题了。\n\n<!-- more -->\n\n### 基本原则\n\n构造一个 IRequest 对象的通用方法一般是通过 RequestHelper 帮助类进行辅助完成的。同时，我们要根据不同场景来获取当前环境的语言代码。然后将构建好的 IRequest 通过参数形式传递到 Service 层的方法。\n\n> **注意：** HAP 框架的最佳实践要求我们一定要将 IRequest 经由 Service 层调用才可以，因为框架内部已经为 Service 层增加了 AOP 处理，在调用前后会自动判断 Service 方法是否存在 IRequest 类型的参数。如果有，那么会对其自动进行管理。\n\n### RequestHelper\n\nHAP 框架内部提供了一个帮助类 RequestHelper 来辅助开发者获取当前设置的 IRequest 实例或者新建一个全新的 IRequest。该类定义在 `com.hand.hap.core.impl`包下，下表列出常见的方法：\n\n| 方法名称             | 解释                                      |\n| -------------------- | ----------------------------------------- |\n| createServiceRequest | 根据 HttpServletRequest 构建 IRequest     |\n| newEmptyRequest      | 创建一个全新的 IRequest 实例              |\n| clearCurrentRequest  | 从 ThreadLocal 中清除当前的 IRequest 实例 |\n| setCurrentRequest    | 将一个 IRequest 对象设置为当前的生效      |\n| getCurrentRequest    | 获取当前上下文的 IRequest 对象            |\n\n> **注意：**`getCurrentRequest` 的唯一的 bool 类型参数 `returnEmptyForNull`的含义为，若从当前上下文中无法获取有效的 IRequest 对象时：\n>\n> `true`: 调用 `newEmptyRequest` 创建一个新的请求对象\n>\n> `false`:  直接返回给调用者 **null**\n\n接下来我们利用 RequestHelper 类来处理不同的应用场景下的多语言需求。\n\n### en_US vs en_GB\n\n当系统无法从上下文（ThreadLocal\\<IRequest\\>）获取 IRequest 实例时，通常我们会使用 newEmptyRequest 来新建一个空的 IRequest 对象。该方法会使用 ServiceRequest 类实例化 IRequest 对象，而此时 locale 属性则是使用 `Locale.getDefault().toString()` 方法来初始化默认值的。这在开发者本机一般是没有问题，然而在服务器运行时，它会返回服务器默认的语言代码 **en_US**，而不是 HAP 的 en_GB 。\n\n```java\nimport java.util.Locale;\n\npublic class ServiceRequest implements IRequest {\n    private String locale = Locale.getDefault().toString();\n    // ...\n}\n```\n\n这个现象通常会在定时任务或者 Rest API 等等场景下，在服务层无法正确查询到多语言记录。接下来我们针对不同的应用场景来分别讨论解决方法。\n\n\n\n## 任务管理\n\n对于任务管理，我们可以通过 `RequestHelper.getCurrentRequest` 来得到当前的 IRequest 实例。但在 Linux 服务器下，它的 locale 属性并不是 `en_GB`，而是 `en_US`，这与 HAP 的语言代码不一致，导致无法正确获取多语言记录。\n\n因此任务管理场景下的实现思路是根据任务的提交者找到对应的系统用户ID，进而找到这个用户在首选项中的语言设置，之后替换 IRequest 的 locale 属性，最后传入 Service 层。实现代码大致如下：\n\n```java\nimport com.hand.hap.account.service.IUserService;\nimport com.hand.hap.core.IRequest;\nimport com.hand.hap.core.impl.RequestHelper;\nimport com.hand.hap.system.dto.SysPreferences;\nimport com.hand.hap.system.service.ISysPreferencesService;\nimport com.hand.hap.task.info.ExecutionInfo;\nimport com.hand.hap.task.service.ITask;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport com.hand.hap.account.dto.User;\n\nimport demo.service.IDemoService;\n\npublic class DemoTask implements ITask {\n    @Autowired\n    IDemoService demoService;\n\n    @Autowired\n    ISysPreferencesService preferencesService;\n    @Autowired\n    IUserService userService;\n\n    @Override\n    public void execute(ExecutionInfo executionInfo) throws Exception {\n        // 获取当前任务的提交者\n        User executioner = userService.selectByUserName(executionInfo.getUsername());\n        // 根据提交者的用户ID得到用户首选项中设置的语言代码\n        SysPreferences preference = preferencesService.selectUserPreference(\"locale\", executioner.getUserId());\n        // 得到当前的 IRequest\n        IRequest request = RequestHelper.getCurrentRequest(true);\n        // 设置IRequest的语言上下文\n        request.setLocale(preference.getPreferencesValue());\n        // 将IRequest传入Service层的方法\n        // Service的AOP机制将会自动处理IRequest的生命周期\n        demoService.serviceMethod(request);\n    }\n}\n```\n\n## 工作流\n\n工作流场景下的实现思路是获取当前工作流的提交者（Initiator），进而定位至该员工的系统用户，最后获取首选项的语言代码构建 IRequest。实现代码大致如下：\n\n```java\n@Component\npublic class ActivityDemoBean implements IActivitiBean, JavaDelegate {\n\n    @Autowired\n    IUserService userService;\n    @Autowired\n    ISysPreferencesService preferencesService;\n    @Autowired\n    IDemoService demoService;\n\n    @Override\n    public void execute(DelegateExecution execution) {\n        String initiator = execution.getVariable(\"initiator\", String.class);\n        List<User> users = userService.selectUserNameByEmployeeCode(initiator);\n\n        if(CollectionUtils.isNotEmpty(users)) {\n            User user = users.get(0);\n            SysPreferences preference = \n                preferencesService.selectUserPreference(\"locale\", user.getUserId());\n            // 新建IRequest\n            IRequest request = RequestHelper.getCurrentRequest(true);\n            // 设置IRequest的语言上下文\n            request.setLocale(preference.getPreferencesValue());\n            // 将IRequest传入Service层的方法\n            // Service的AOP机制将会自动处理IRequest的生命周期\n            demoService.serviceMethod(request);\n        }\n    }\n}\n```\n\n## UReport2 Beans\n\nUReport2 本身提供了一个方法叫 RequestHolder 可以用来获取当前的 IRequest，我们可以借助这个方法来达到目的：\n\n```java\n@Component\npublic class UreportDataSourceBean {\n\n    @Autowired\n    IDemoService demoService;\n\n    public List<Demo> loadDemoData(String dsName, \n                                   String datasetName, \n                                   Map<String, Object> parameters) {\n        // 初始化请求上下文\n        HttpServletRequest request = RequestHolder.getRequest();\n        IRequest requestContext = RequestHelper.createServiceRequest(request);\n\n        // 执行查询\n        List<Demo> result = demoService.method(requestContext);\n        return result;\n    }\n}\n```\n\n## 定时任务\n\n定时任务由于其后台自动调度的特点，导致其上下文无法获取用户信息。所以针对定时任务，我们需要定义一个系统配置项来预设置一个默认的语言代码：\n\n```java\npublic class Ora2062DemoJob extends AbstractJob {\n\n    @Autowired\n    IOra2062DemoService demoService;\n    @Autowired\n    IProfileService profileService;\n\n    @Override\n    public void safeExecute(JobExecutionContext context) throws Exception {\n        // 新建一个空的 IRequest\n        IRequest request = RequestHelper.getCurrentRequest(true);\n        // 从系统配置项 SYSTEM_LANG 中获取默认的语言代码\n        request.setLocale(profileService.getProfileValue(request, \"SYSTEM_LANG\"));\n        // 调用服务方法\n        demoService.method(request);\n    }\n}\n\n```\n\n> **提示：**SYSTEM_LANG 是一个全局系统配置项，可设置默认值为 en_GB\n\n## Rest API Controller\n\nHAP 通过在控制器层映射特定前缀的路径来向外部提供 Rest API 服务。一般情况下，Rest API 会结合 OAuth2 进行客户端授权管理来完成身份的验证。当我们采用用户名密码方式进行授权的时候，客户端账户会与这个系统用户进行关联和初始化，所以在控制器层创建 IRequest 的时候是可以正确取到上下文信息的。\n\n不过这种方式有个弊端是系统用户信息会暴露给外界。在某些场景下，这是不太安全的做法，这时我们通常会改用 `client_credentials` 的授权方式。不过这种方式下，控制器层是没办法定位当前执行的上下文是哪个用户，进而 locale 也是没法获取上下文值。\n\n## 优化服务层AOP切面类\n\n你可以采用与`定时任务`类似的做法来解决此问题，不过这种方式需要对每一个定时任务入口类和控制器进行额外的编码处理，带来了不少的工作量。这里有一种一劳永逸的方法，就是修改服务层的切面类 `ServiceExecutionAdvice`，直接处理 en_US 的情况。这样一来，无论请求是从定时任务还是 Rest API 过来，只要遵循服务的处理都是通过调用服务接口方法并且**传入 IRequest 参数实例**，我们就会始终可以获取正确的 locale 值，实现如下：\n\n```java\npackage com.hand.hap.core.impl;\npublic class ServiceExecutionAdvice implements MethodInterceptor {\n    private final String SERVER_DEFAULT_LANG = \"en_US\";\n    \n    @Autowired\n    private IProfileService profileService;\n    \n    public void before(Method method, Object[] args, Object target) throws Throwable {\n        // ...\n        IRequest requestContext = (IRequest) args[idx];\n        if (requestContext != null) {\n\n            if(SERVER_DEFAULT_LANG.equals(requestContext.getLocale())) {\n                requestContext.setLocale(\n                    profileService.getProfileValue(null, \"SYSTEM_LANG\"));\n            }\n            \n            RequestHelper.setCurrentRequest(requestContext);\n            initMDC(requestContext);\n        }\n        // ...\n    }\n}\n```\n\n","slug":"hap-i18n-irequest","published":1,"updated":"2020-03-23T15:38:05.608Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmasb6npm000c7sos8a1v390e","content":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>在 HAP 中，从浏览器打开的页面或者调用的 Rest API 都必须经过控制器层，而控制器层可以很容易地获取 <code>HttpServletRequest</code> 对象，进而构造 <code>IRequest</code> 对象来存储环境上下文信息，这里就包括当前的语言环境。</p>\n<p>举例说明：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ResponseData <span class=\"title\">processRequest</span><span class=\"params\">(HttpServletRequest request)</span> </span>&#123;</span><br><span class=\"line\">    IRequest iRequest = <span class=\"keyword\">this</span>.createRequestContext(request);</span><br><span class=\"line\">    <span class=\"comment\">// 调用服务层方法并传入 IRequest 进行业务处理</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ResponseData(service.someMethod(iRequest));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>因此在控制器层获取当前设置的语言环境是轻而易举的事情。不过，HAP 开发过程中会有很多其他的场景不会将控制器作为入口进入。在<code>任务管理</code>、<code>定时任务</code>、<code>工作流</code>和<code>UReport2报表</code>中，核心程序的入口都是通过向 Spring 注册一些通用的服务组件(<code>@Component</code>) 并实现特定的接口来实现的。因此这种场景下，如何构建一个正确的 IRequest 对象就成为一个很有技巧性的问题了。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"基本原则\"><a href=\"#基本原则\" class=\"headerlink\" title=\"基本原则\"></a>基本原则</h3><p>构造一个 IRequest 对象的通用方法一般是通过 RequestHelper 帮助类进行辅助完成的。同时，我们要根据不同场景来获取当前环境的语言代码。然后将构建好的 IRequest 通过参数形式传递到 Service 层的方法。</p>\n<blockquote>\n<p><strong>注意：</strong> HAP 框架的最佳实践要求我们一定要将 IRequest 经由 Service 层调用才可以，因为框架内部已经为 Service 层增加了 AOP 处理，在调用前后会自动判断 Service 方法是否存在 IRequest 类型的参数。如果有，那么会对其自动进行管理。</p>\n</blockquote>\n<h3 id=\"RequestHelper\"><a href=\"#RequestHelper\" class=\"headerlink\" title=\"RequestHelper\"></a>RequestHelper</h3><p>HAP 框架内部提供了一个帮助类 RequestHelper 来辅助开发者获取当前设置的 IRequest 实例或者新建一个全新的 IRequest。该类定义在 <code>com.hand.hap.core.impl</code>包下，下表列出常见的方法：</p>\n<table>\n<thead>\n<tr>\n<th>方法名称</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>createServiceRequest</td>\n<td>根据 HttpServletRequest 构建 IRequest</td>\n</tr>\n<tr>\n<td>newEmptyRequest</td>\n<td>创建一个全新的 IRequest 实例</td>\n</tr>\n<tr>\n<td>clearCurrentRequest</td>\n<td>从 ThreadLocal 中清除当前的 IRequest 实例</td>\n</tr>\n<tr>\n<td>setCurrentRequest</td>\n<td>将一个 IRequest 对象设置为当前的生效</td>\n</tr>\n<tr>\n<td>getCurrentRequest</td>\n<td>获取当前上下文的 IRequest 对象</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p><strong>注意：</strong><code>getCurrentRequest</code> 的唯一的 bool 类型参数 <code>returnEmptyForNull</code>的含义为，若从当前上下文中无法获取有效的 IRequest 对象时：</p>\n<p><code>true</code>: 调用 <code>newEmptyRequest</code> 创建一个新的请求对象</p>\n<p><code>false</code>:  直接返回给调用者 <strong>null</strong></p>\n</blockquote>\n<p>接下来我们利用 RequestHelper 类来处理不同的应用场景下的多语言需求。</p>\n<h3 id=\"en-US-vs-en-GB\"><a href=\"#en-US-vs-en-GB\" class=\"headerlink\" title=\"en_US vs en_GB\"></a>en_US vs en_GB</h3><p>当系统无法从上下文（ThreadLocal&lt;IRequest&gt;）获取 IRequest 实例时，通常我们会使用 newEmptyRequest 来新建一个空的 IRequest 对象。该方法会使用 ServiceRequest 类实例化 IRequest 对象，而此时 locale 属性则是使用 <code>Locale.getDefault().toString()</code> 方法来初始化默认值的。这在开发者本机一般是没有问题，然而在服务器运行时，它会返回服务器默认的语言代码 <strong>en_US</strong>，而不是 HAP 的 en_GB 。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Locale;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ServiceRequest</span> <span class=\"keyword\">implements</span> <span class=\"title\">IRequest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String locale = Locale.getDefault().toString();</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个现象通常会在定时任务或者 Rest API 等等场景下，在服务层无法正确查询到多语言记录。接下来我们针对不同的应用场景来分别讨论解决方法。</p>\n<h2 id=\"任务管理\"><a href=\"#任务管理\" class=\"headerlink\" title=\"任务管理\"></a>任务管理</h2><p>对于任务管理，我们可以通过 <code>RequestHelper.getCurrentRequest</code> 来得到当前的 IRequest 实例。但在 Linux 服务器下，它的 locale 属性并不是 <code>en_GB</code>，而是 <code>en_US</code>，这与 HAP 的语言代码不一致，导致无法正确获取多语言记录。</p>\n<p>因此任务管理场景下的实现思路是根据任务的提交者找到对应的系统用户ID，进而找到这个用户在首选项中的语言设置，之后替换 IRequest 的 locale 属性，最后传入 Service 层。实现代码大致如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.hand.hap.account.service.IUserService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.hand.hap.core.IRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.hand.hap.core.impl.RequestHelper;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.hand.hap.system.dto.SysPreferences;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.hand.hap.system.service.ISysPreferencesService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.hand.hap.task.info.ExecutionInfo;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.hand.hap.task.service.ITask;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.hand.hap.account.dto.User;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> demo.service.IDemoService;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoTask</span> <span class=\"keyword\">implements</span> <span class=\"title\">ITask</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    IDemoService demoService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    ISysPreferencesService preferencesService;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    IUserService userService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">execute</span><span class=\"params\">(ExecutionInfo executionInfo)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 获取当前任务的提交者</span></span><br><span class=\"line\">        User executioner = userService.selectByUserName(executionInfo.getUsername());</span><br><span class=\"line\">        <span class=\"comment\">// 根据提交者的用户ID得到用户首选项中设置的语言代码</span></span><br><span class=\"line\">        SysPreferences preference = preferencesService.selectUserPreference(<span class=\"string\">&quot;locale&quot;</span>, executioner.getUserId());</span><br><span class=\"line\">        <span class=\"comment\">// 得到当前的 IRequest</span></span><br><span class=\"line\">        IRequest request = RequestHelper.getCurrentRequest(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 设置IRequest的语言上下文</span></span><br><span class=\"line\">        request.setLocale(preference.getPreferencesValue());</span><br><span class=\"line\">        <span class=\"comment\">// 将IRequest传入Service层的方法</span></span><br><span class=\"line\">        <span class=\"comment\">// Service的AOP机制将会自动处理IRequest的生命周期</span></span><br><span class=\"line\">        demoService.serviceMethod(request);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"工作流\"><a href=\"#工作流\" class=\"headerlink\" title=\"工作流\"></a>工作流</h2><p>工作流场景下的实现思路是获取当前工作流的提交者（Initiator），进而定位至该员工的系统用户，最后获取首选项的语言代码构建 IRequest。实现代码大致如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ActivityDemoBean</span> <span class=\"keyword\">implements</span> <span class=\"title\">IActivitiBean</span>, <span class=\"title\">JavaDelegate</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    IUserService userService;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    ISysPreferencesService preferencesService;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    IDemoService demoService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">execute</span><span class=\"params\">(DelegateExecution execution)</span> </span>&#123;</span><br><span class=\"line\">        String initiator = execution.getVariable(<span class=\"string\">&quot;initiator&quot;</span>, String.class);</span><br><span class=\"line\">        List&lt;User&gt; users = userService.selectUserNameByEmployeeCode(initiator);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(CollectionUtils.isNotEmpty(users)) &#123;</span><br><span class=\"line\">            User user = users.get(<span class=\"number\">0</span>);</span><br><span class=\"line\">            SysPreferences preference = </span><br><span class=\"line\">                preferencesService.selectUserPreference(<span class=\"string\">&quot;locale&quot;</span>, user.getUserId());</span><br><span class=\"line\">            <span class=\"comment\">// 新建IRequest</span></span><br><span class=\"line\">            IRequest request = RequestHelper.getCurrentRequest(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">            <span class=\"comment\">// 设置IRequest的语言上下文</span></span><br><span class=\"line\">            request.setLocale(preference.getPreferencesValue());</span><br><span class=\"line\">            <span class=\"comment\">// 将IRequest传入Service层的方法</span></span><br><span class=\"line\">            <span class=\"comment\">// Service的AOP机制将会自动处理IRequest的生命周期</span></span><br><span class=\"line\">            demoService.serviceMethod(request);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"UReport2-Beans\"><a href=\"#UReport2-Beans\" class=\"headerlink\" title=\"UReport2 Beans\"></a>UReport2 Beans</h2><p>UReport2 本身提供了一个方法叫 RequestHolder 可以用来获取当前的 IRequest，我们可以借助这个方法来达到目的：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UreportDataSourceBean</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    IDemoService demoService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Demo&gt; <span class=\"title\">loadDemoData</span><span class=\"params\">(String dsName, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                   String datasetName, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                   Map&lt;String, Object&gt; parameters)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 初始化请求上下文</span></span><br><span class=\"line\">        HttpServletRequest request = RequestHolder.getRequest();</span><br><span class=\"line\">        IRequest requestContext = RequestHelper.createServiceRequest(request);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 执行查询</span></span><br><span class=\"line\">        List&lt;Demo&gt; result = demoService.method(requestContext);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"定时任务\"><a href=\"#定时任务\" class=\"headerlink\" title=\"定时任务\"></a>定时任务</h2><p>定时任务由于其后台自动调度的特点，导致其上下文无法获取用户信息。所以针对定时任务，我们需要定义一个系统配置项来预设置一个默认的语言代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Ora2062DemoJob</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractJob</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    IOra2062DemoService demoService;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    IProfileService profileService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">safeExecute</span><span class=\"params\">(JobExecutionContext context)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 新建一个空的 IRequest</span></span><br><span class=\"line\">        IRequest request = RequestHelper.getCurrentRequest(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 从系统配置项 SYSTEM_LANG 中获取默认的语言代码</span></span><br><span class=\"line\">        request.setLocale(profileService.getProfileValue(request, <span class=\"string\">&quot;SYSTEM_LANG&quot;</span>));</span><br><span class=\"line\">        <span class=\"comment\">// 调用服务方法</span></span><br><span class=\"line\">        demoService.method(request);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>提示：</strong>SYSTEM_LANG 是一个全局系统配置项，可设置默认值为 en_GB</p>\n</blockquote>\n<h2 id=\"Rest-API-Controller\"><a href=\"#Rest-API-Controller\" class=\"headerlink\" title=\"Rest API Controller\"></a>Rest API Controller</h2><p>HAP 通过在控制器层映射特定前缀的路径来向外部提供 Rest API 服务。一般情况下，Rest API 会结合 OAuth2 进行客户端授权管理来完成身份的验证。当我们采用用户名密码方式进行授权的时候，客户端账户会与这个系统用户进行关联和初始化，所以在控制器层创建 IRequest 的时候是可以正确取到上下文信息的。</p>\n<p>不过这种方式有个弊端是系统用户信息会暴露给外界。在某些场景下，这是不太安全的做法，这时我们通常会改用 <code>client_credentials</code> 的授权方式。不过这种方式下，控制器层是没办法定位当前执行的上下文是哪个用户，进而 locale 也是没法获取上下文值。</p>\n<h2 id=\"优化服务层AOP切面类\"><a href=\"#优化服务层AOP切面类\" class=\"headerlink\" title=\"优化服务层AOP切面类\"></a>优化服务层AOP切面类</h2><p>你可以采用与<code>定时任务</code>类似的做法来解决此问题，不过这种方式需要对每一个定时任务入口类和控制器进行额外的编码处理，带来了不少的工作量。这里有一种一劳永逸的方法，就是修改服务层的切面类 <code>ServiceExecutionAdvice</code>，直接处理 en_US 的情况。这样一来，无论请求是从定时任务还是 Rest API 过来，只要遵循服务的处理都是通过调用服务接口方法并且<strong>传入 IRequest 参数实例</strong>，我们就会始终可以获取正确的 locale 值，实现如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.hand.hap.core.impl;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ServiceExecutionAdvice</span> <span class=\"keyword\">implements</span> <span class=\"title\">MethodInterceptor</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String SERVER_DEFAULT_LANG = <span class=\"string\">&quot;en_US&quot;</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> IProfileService profileService;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">before</span><span class=\"params\">(Method method, Object[] args, Object target)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">        IRequest requestContext = (IRequest) args[idx];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (requestContext != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(SERVER_DEFAULT_LANG.equals(requestContext.getLocale())) &#123;</span><br><span class=\"line\">                requestContext.setLocale(</span><br><span class=\"line\">                    profileService.getProfileValue(<span class=\"keyword\">null</span>, <span class=\"string\">&quot;SYSTEM_LANG&quot;</span>));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            RequestHelper.setCurrentRequest(requestContext);</span><br><span class=\"line\">            initMDC(requestContext);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>在 HAP 中，从浏览器打开的页面或者调用的 Rest API 都必须经过控制器层，而控制器层可以很容易地获取 <code>HttpServletRequest</code> 对象，进而构造 <code>IRequest</code> 对象来存储环境上下文信息，这里就包括当前的语言环境。</p>\n<p>举例说明：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ResponseData <span class=\"title\">processRequest</span><span class=\"params\">(HttpServletRequest request)</span> </span>&#123;</span><br><span class=\"line\">    IRequest iRequest = <span class=\"keyword\">this</span>.createRequestContext(request);</span><br><span class=\"line\">    <span class=\"comment\">// 调用服务层方法并传入 IRequest 进行业务处理</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ResponseData(service.someMethod(iRequest));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>因此在控制器层获取当前设置的语言环境是轻而易举的事情。不过，HAP 开发过程中会有很多其他的场景不会将控制器作为入口进入。在<code>任务管理</code>、<code>定时任务</code>、<code>工作流</code>和<code>UReport2报表</code>中，核心程序的入口都是通过向 Spring 注册一些通用的服务组件(<code>@Component</code>) 并实现特定的接口来实现的。因此这种场景下，如何构建一个正确的 IRequest 对象就成为一个很有技巧性的问题了。</p>","more":"<h3 id=\"基本原则\"><a href=\"#基本原则\" class=\"headerlink\" title=\"基本原则\"></a>基本原则</h3><p>构造一个 IRequest 对象的通用方法一般是通过 RequestHelper 帮助类进行辅助完成的。同时，我们要根据不同场景来获取当前环境的语言代码。然后将构建好的 IRequest 通过参数形式传递到 Service 层的方法。</p>\n<blockquote>\n<p><strong>注意：</strong> HAP 框架的最佳实践要求我们一定要将 IRequest 经由 Service 层调用才可以，因为框架内部已经为 Service 层增加了 AOP 处理，在调用前后会自动判断 Service 方法是否存在 IRequest 类型的参数。如果有，那么会对其自动进行管理。</p>\n</blockquote>\n<h3 id=\"RequestHelper\"><a href=\"#RequestHelper\" class=\"headerlink\" title=\"RequestHelper\"></a>RequestHelper</h3><p>HAP 框架内部提供了一个帮助类 RequestHelper 来辅助开发者获取当前设置的 IRequest 实例或者新建一个全新的 IRequest。该类定义在 <code>com.hand.hap.core.impl</code>包下，下表列出常见的方法：</p>\n<table>\n<thead>\n<tr>\n<th>方法名称</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>createServiceRequest</td>\n<td>根据 HttpServletRequest 构建 IRequest</td>\n</tr>\n<tr>\n<td>newEmptyRequest</td>\n<td>创建一个全新的 IRequest 实例</td>\n</tr>\n<tr>\n<td>clearCurrentRequest</td>\n<td>从 ThreadLocal 中清除当前的 IRequest 实例</td>\n</tr>\n<tr>\n<td>setCurrentRequest</td>\n<td>将一个 IRequest 对象设置为当前的生效</td>\n</tr>\n<tr>\n<td>getCurrentRequest</td>\n<td>获取当前上下文的 IRequest 对象</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p><strong>注意：</strong><code>getCurrentRequest</code> 的唯一的 bool 类型参数 <code>returnEmptyForNull</code>的含义为，若从当前上下文中无法获取有效的 IRequest 对象时：</p>\n<p><code>true</code>: 调用 <code>newEmptyRequest</code> 创建一个新的请求对象</p>\n<p><code>false</code>:  直接返回给调用者 <strong>null</strong></p>\n</blockquote>\n<p>接下来我们利用 RequestHelper 类来处理不同的应用场景下的多语言需求。</p>\n<h3 id=\"en-US-vs-en-GB\"><a href=\"#en-US-vs-en-GB\" class=\"headerlink\" title=\"en_US vs en_GB\"></a>en_US vs en_GB</h3><p>当系统无法从上下文（ThreadLocal&lt;IRequest&gt;）获取 IRequest 实例时，通常我们会使用 newEmptyRequest 来新建一个空的 IRequest 对象。该方法会使用 ServiceRequest 类实例化 IRequest 对象，而此时 locale 属性则是使用 <code>Locale.getDefault().toString()</code> 方法来初始化默认值的。这在开发者本机一般是没有问题，然而在服务器运行时，它会返回服务器默认的语言代码 <strong>en_US</strong>，而不是 HAP 的 en_GB 。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Locale;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ServiceRequest</span> <span class=\"keyword\">implements</span> <span class=\"title\">IRequest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String locale = Locale.getDefault().toString();</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个现象通常会在定时任务或者 Rest API 等等场景下，在服务层无法正确查询到多语言记录。接下来我们针对不同的应用场景来分别讨论解决方法。</p>\n<h2 id=\"任务管理\"><a href=\"#任务管理\" class=\"headerlink\" title=\"任务管理\"></a>任务管理</h2><p>对于任务管理，我们可以通过 <code>RequestHelper.getCurrentRequest</code> 来得到当前的 IRequest 实例。但在 Linux 服务器下，它的 locale 属性并不是 <code>en_GB</code>，而是 <code>en_US</code>，这与 HAP 的语言代码不一致，导致无法正确获取多语言记录。</p>\n<p>因此任务管理场景下的实现思路是根据任务的提交者找到对应的系统用户ID，进而找到这个用户在首选项中的语言设置，之后替换 IRequest 的 locale 属性，最后传入 Service 层。实现代码大致如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.hand.hap.account.service.IUserService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.hand.hap.core.IRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.hand.hap.core.impl.RequestHelper;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.hand.hap.system.dto.SysPreferences;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.hand.hap.system.service.ISysPreferencesService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.hand.hap.task.info.ExecutionInfo;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.hand.hap.task.service.ITask;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.hand.hap.account.dto.User;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> demo.service.IDemoService;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoTask</span> <span class=\"keyword\">implements</span> <span class=\"title\">ITask</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    IDemoService demoService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    ISysPreferencesService preferencesService;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    IUserService userService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">execute</span><span class=\"params\">(ExecutionInfo executionInfo)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 获取当前任务的提交者</span></span><br><span class=\"line\">        User executioner = userService.selectByUserName(executionInfo.getUsername());</span><br><span class=\"line\">        <span class=\"comment\">// 根据提交者的用户ID得到用户首选项中设置的语言代码</span></span><br><span class=\"line\">        SysPreferences preference = preferencesService.selectUserPreference(<span class=\"string\">&quot;locale&quot;</span>, executioner.getUserId());</span><br><span class=\"line\">        <span class=\"comment\">// 得到当前的 IRequest</span></span><br><span class=\"line\">        IRequest request = RequestHelper.getCurrentRequest(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 设置IRequest的语言上下文</span></span><br><span class=\"line\">        request.setLocale(preference.getPreferencesValue());</span><br><span class=\"line\">        <span class=\"comment\">// 将IRequest传入Service层的方法</span></span><br><span class=\"line\">        <span class=\"comment\">// Service的AOP机制将会自动处理IRequest的生命周期</span></span><br><span class=\"line\">        demoService.serviceMethod(request);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"工作流\"><a href=\"#工作流\" class=\"headerlink\" title=\"工作流\"></a>工作流</h2><p>工作流场景下的实现思路是获取当前工作流的提交者（Initiator），进而定位至该员工的系统用户，最后获取首选项的语言代码构建 IRequest。实现代码大致如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ActivityDemoBean</span> <span class=\"keyword\">implements</span> <span class=\"title\">IActivitiBean</span>, <span class=\"title\">JavaDelegate</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    IUserService userService;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    ISysPreferencesService preferencesService;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    IDemoService demoService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">execute</span><span class=\"params\">(DelegateExecution execution)</span> </span>&#123;</span><br><span class=\"line\">        String initiator = execution.getVariable(<span class=\"string\">&quot;initiator&quot;</span>, String.class);</span><br><span class=\"line\">        List&lt;User&gt; users = userService.selectUserNameByEmployeeCode(initiator);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(CollectionUtils.isNotEmpty(users)) &#123;</span><br><span class=\"line\">            User user = users.get(<span class=\"number\">0</span>);</span><br><span class=\"line\">            SysPreferences preference = </span><br><span class=\"line\">                preferencesService.selectUserPreference(<span class=\"string\">&quot;locale&quot;</span>, user.getUserId());</span><br><span class=\"line\">            <span class=\"comment\">// 新建IRequest</span></span><br><span class=\"line\">            IRequest request = RequestHelper.getCurrentRequest(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">            <span class=\"comment\">// 设置IRequest的语言上下文</span></span><br><span class=\"line\">            request.setLocale(preference.getPreferencesValue());</span><br><span class=\"line\">            <span class=\"comment\">// 将IRequest传入Service层的方法</span></span><br><span class=\"line\">            <span class=\"comment\">// Service的AOP机制将会自动处理IRequest的生命周期</span></span><br><span class=\"line\">            demoService.serviceMethod(request);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"UReport2-Beans\"><a href=\"#UReport2-Beans\" class=\"headerlink\" title=\"UReport2 Beans\"></a>UReport2 Beans</h2><p>UReport2 本身提供了一个方法叫 RequestHolder 可以用来获取当前的 IRequest，我们可以借助这个方法来达到目的：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UreportDataSourceBean</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    IDemoService demoService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Demo&gt; <span class=\"title\">loadDemoData</span><span class=\"params\">(String dsName, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                   String datasetName, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                   Map&lt;String, Object&gt; parameters)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 初始化请求上下文</span></span><br><span class=\"line\">        HttpServletRequest request = RequestHolder.getRequest();</span><br><span class=\"line\">        IRequest requestContext = RequestHelper.createServiceRequest(request);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 执行查询</span></span><br><span class=\"line\">        List&lt;Demo&gt; result = demoService.method(requestContext);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"定时任务\"><a href=\"#定时任务\" class=\"headerlink\" title=\"定时任务\"></a>定时任务</h2><p>定时任务由于其后台自动调度的特点，导致其上下文无法获取用户信息。所以针对定时任务，我们需要定义一个系统配置项来预设置一个默认的语言代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Ora2062DemoJob</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractJob</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    IOra2062DemoService demoService;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    IProfileService profileService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">safeExecute</span><span class=\"params\">(JobExecutionContext context)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 新建一个空的 IRequest</span></span><br><span class=\"line\">        IRequest request = RequestHelper.getCurrentRequest(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 从系统配置项 SYSTEM_LANG 中获取默认的语言代码</span></span><br><span class=\"line\">        request.setLocale(profileService.getProfileValue(request, <span class=\"string\">&quot;SYSTEM_LANG&quot;</span>));</span><br><span class=\"line\">        <span class=\"comment\">// 调用服务方法</span></span><br><span class=\"line\">        demoService.method(request);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>提示：</strong>SYSTEM_LANG 是一个全局系统配置项，可设置默认值为 en_GB</p>\n</blockquote>\n<h2 id=\"Rest-API-Controller\"><a href=\"#Rest-API-Controller\" class=\"headerlink\" title=\"Rest API Controller\"></a>Rest API Controller</h2><p>HAP 通过在控制器层映射特定前缀的路径来向外部提供 Rest API 服务。一般情况下，Rest API 会结合 OAuth2 进行客户端授权管理来完成身份的验证。当我们采用用户名密码方式进行授权的时候，客户端账户会与这个系统用户进行关联和初始化，所以在控制器层创建 IRequest 的时候是可以正确取到上下文信息的。</p>\n<p>不过这种方式有个弊端是系统用户信息会暴露给外界。在某些场景下，这是不太安全的做法，这时我们通常会改用 <code>client_credentials</code> 的授权方式。不过这种方式下，控制器层是没办法定位当前执行的上下文是哪个用户，进而 locale 也是没法获取上下文值。</p>\n<h2 id=\"优化服务层AOP切面类\"><a href=\"#优化服务层AOP切面类\" class=\"headerlink\" title=\"优化服务层AOP切面类\"></a>优化服务层AOP切面类</h2><p>你可以采用与<code>定时任务</code>类似的做法来解决此问题，不过这种方式需要对每一个定时任务入口类和控制器进行额外的编码处理，带来了不少的工作量。这里有一种一劳永逸的方法，就是修改服务层的切面类 <code>ServiceExecutionAdvice</code>，直接处理 en_US 的情况。这样一来，无论请求是从定时任务还是 Rest API 过来，只要遵循服务的处理都是通过调用服务接口方法并且<strong>传入 IRequest 参数实例</strong>，我们就会始终可以获取正确的 locale 值，实现如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.hand.hap.core.impl;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ServiceExecutionAdvice</span> <span class=\"keyword\">implements</span> <span class=\"title\">MethodInterceptor</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String SERVER_DEFAULT_LANG = <span class=\"string\">&quot;en_US&quot;</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> IProfileService profileService;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">before</span><span class=\"params\">(Method method, Object[] args, Object target)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">        IRequest requestContext = (IRequest) args[idx];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (requestContext != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(SERVER_DEFAULT_LANG.equals(requestContext.getLocale())) &#123;</span><br><span class=\"line\">                requestContext.setLocale(</span><br><span class=\"line\">                    profileService.getProfileValue(<span class=\"keyword\">null</span>, <span class=\"string\">&quot;SYSTEM_LANG&quot;</span>));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            RequestHelper.setCurrentRequest(requestContext);</span><br><span class=\"line\">            initMDC(requestContext);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Hexo Next 主题安装配置","date":"2023-12-26T12:01:43.000Z","_content":"\n本文记录 Hexo 的 NexT 主题的安装和配置过程，使用的是官方仓库 README 的指引进行。\n\n[theme-next/hexo-theme-next: Elegant and powerful theme for Hexo. (github.com)](https://github.com/theme-next/hexo-theme-next)\n\n## 先决条件\n\n- `hexo` ：安装部署可参考文章 [Hexo 快速入门](https://eliu.github.io/2021/03/11/hexo-quickstart/)\n\n## 安装配置\n\n### 安装 NexT 主题\n\nHexo NexT 主题可通过两种方式安装，一种是直接克隆官方仓库到 {hexo-site}/themes/next 下；一种是通过 npm 安装到 Hexo 主目录。本文使用第二种方式进行安装。\n\n> 提示：`{hexo-site}` 指的是 Hexo 生成的博客项目主目录，例如 `/path/to/my-hexo-blog`\n\n使用 npm 安装 Hexo NexT 主题的命令如下：\n\n```shell\n$ cd {hexo-site}\n$ npm install hexo-theme-next\n```\n\n> npm 国内加速镜像配置：`npm config set registry http://registry.npmmirror.com`\n\n<!-- more -->\n\n### 启用 NexT 主题\n\n编辑 Hexo 项目主目录下的 `_config.yml` 配置文件，并修改以下属性：\n\n```yam\ntheme: next\n```\n\n### 定制 NexT 主题\n\nNexT 主题在默认情况下不需要进行任何的改动，主题就可以直接应用到 Hexo 项目中。但如果你想做一些定制化也是完全可以的。接下来我们拷贝主题的配置文件到 hexo 主目录，文件格式为 `_config.{theme_name}.yml`。对于 NexT 主题，该配置文件的名称应为 `_config.next.yml`。我们准备定制以下内容：\n\n1. 主题风格改为 Gemini\n2. 支持暗黑模式\n3. 显示首页、标签和分类\n4. 个性化我的头像\n5. 启用社交网络连接\n6. 代码块显示风格\n7. GitHub 入口（Follow me on GitHub)\n7. 增加本地搜索功能，可参考 [Hexo增加搜索功能 - 简书 (jianshu.com)](https://www.jianshu.com/p/d388119a90ec)\n\n我们打开配置文件 `_config.next.yml` 并需改配置如下所示：\n\n```yaml\nscheme: Gemini\ndarkmode: true\nmenu:\n  home: / || fa fa-home\n  #about: /about/ || fa fa-user\n  tags: /tags/ || fa fa-tags\n  categories: /categories/ || fa fa-th\navatar:\n  # Replace the default image and set the url here.\n  url: /uploads/avatar.png\n  # If true, the avatar will be displayed in circle.\n  rounded: true\n  # If true, the avatar will be rotated with the cursor.\n  rotated: false\nsocial:\n  GitHub: https://github.com/eliu || fab fa-github\n  E-Mail: mailto:eliuhy@163.com || fa fa-envelope\ncodeblock:\n  # Code Highlight theme\n  # All available themes: https://theme-next.js.org/highlight/\n  theme:\n    light: a11y-light\n    dark: a11y-dark\n# `Follow me on GitHub` banner in the top-right corner.\ngithub_banner:\n  enable: true\n  permalink: https://github.com/eliu\n```\n\n这里特别注意的是头像的定制化，你需要将你的头像文件，例如 `avatar.png` 上传到 `{hexo-site}/source/uploads/` 目录下，目录结构如下所示：\n\n```\n{hexo-site}\n└── source\n    └── uploads\n        └── avatar.png\n```\n\n另外，不要启用 motion 动画，有 bug...\n\n```yaml\nmotion:\n  enable: false\n```\n\n\n\n\n\n\n\n","source":"_posts/hexo-install-theme.md","raw":"---\ntitle: Hexo Next 主题安装配置\ndate: 2023-12-26 20:01:43\ncategories:\ntags:\n---\n\n本文记录 Hexo 的 NexT 主题的安装和配置过程，使用的是官方仓库 README 的指引进行。\n\n[theme-next/hexo-theme-next: Elegant and powerful theme for Hexo. (github.com)](https://github.com/theme-next/hexo-theme-next)\n\n## 先决条件\n\n- `hexo` ：安装部署可参考文章 [Hexo 快速入门](https://eliu.github.io/2021/03/11/hexo-quickstart/)\n\n## 安装配置\n\n### 安装 NexT 主题\n\nHexo NexT 主题可通过两种方式安装，一种是直接克隆官方仓库到 {hexo-site}/themes/next 下；一种是通过 npm 安装到 Hexo 主目录。本文使用第二种方式进行安装。\n\n> 提示：`{hexo-site}` 指的是 Hexo 生成的博客项目主目录，例如 `/path/to/my-hexo-blog`\n\n使用 npm 安装 Hexo NexT 主题的命令如下：\n\n```shell\n$ cd {hexo-site}\n$ npm install hexo-theme-next\n```\n\n> npm 国内加速镜像配置：`npm config set registry http://registry.npmmirror.com`\n\n<!-- more -->\n\n### 启用 NexT 主题\n\n编辑 Hexo 项目主目录下的 `_config.yml` 配置文件，并修改以下属性：\n\n```yam\ntheme: next\n```\n\n### 定制 NexT 主题\n\nNexT 主题在默认情况下不需要进行任何的改动，主题就可以直接应用到 Hexo 项目中。但如果你想做一些定制化也是完全可以的。接下来我们拷贝主题的配置文件到 hexo 主目录，文件格式为 `_config.{theme_name}.yml`。对于 NexT 主题，该配置文件的名称应为 `_config.next.yml`。我们准备定制以下内容：\n\n1. 主题风格改为 Gemini\n2. 支持暗黑模式\n3. 显示首页、标签和分类\n4. 个性化我的头像\n5. 启用社交网络连接\n6. 代码块显示风格\n7. GitHub 入口（Follow me on GitHub)\n7. 增加本地搜索功能，可参考 [Hexo增加搜索功能 - 简书 (jianshu.com)](https://www.jianshu.com/p/d388119a90ec)\n\n我们打开配置文件 `_config.next.yml` 并需改配置如下所示：\n\n```yaml\nscheme: Gemini\ndarkmode: true\nmenu:\n  home: / || fa fa-home\n  #about: /about/ || fa fa-user\n  tags: /tags/ || fa fa-tags\n  categories: /categories/ || fa fa-th\navatar:\n  # Replace the default image and set the url here.\n  url: /uploads/avatar.png\n  # If true, the avatar will be displayed in circle.\n  rounded: true\n  # If true, the avatar will be rotated with the cursor.\n  rotated: false\nsocial:\n  GitHub: https://github.com/eliu || fab fa-github\n  E-Mail: mailto:eliuhy@163.com || fa fa-envelope\ncodeblock:\n  # Code Highlight theme\n  # All available themes: https://theme-next.js.org/highlight/\n  theme:\n    light: a11y-light\n    dark: a11y-dark\n# `Follow me on GitHub` banner in the top-right corner.\ngithub_banner:\n  enable: true\n  permalink: https://github.com/eliu\n```\n\n这里特别注意的是头像的定制化，你需要将你的头像文件，例如 `avatar.png` 上传到 `{hexo-site}/source/uploads/` 目录下，目录结构如下所示：\n\n```\n{hexo-site}\n└── source\n    └── uploads\n        └── avatar.png\n```\n\n另外，不要启用 motion 动画，有 bug...\n\n```yaml\nmotion:\n  enable: false\n```\n\n\n\n\n\n\n\n","slug":"hexo-install-theme","published":1,"updated":"2023-12-26T13:33:03.859Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmasb6npn000d7sosepuv6tyu","content":"<p>本文记录 Hexo 的 NexT 主题的安装和配置过程，使用的是官方仓库 README 的指引进行。</p>\n<p><a href=\"https://github.com/theme-next/hexo-theme-next\">theme-next/hexo-theme-next: Elegant and powerful theme for Hexo. (github.com)</a></p>\n<h2 id=\"先决条件\"><a href=\"#先决条件\" class=\"headerlink\" title=\"先决条件\"></a>先决条件</h2><ul>\n<li><code>hexo</code> ：安装部署可参考文章 <a href=\"https://eliu.github.io/2021/03/11/hexo-quickstart/\">Hexo 快速入门</a></li>\n</ul>\n<h2 id=\"安装配置\"><a href=\"#安装配置\" class=\"headerlink\" title=\"安装配置\"></a>安装配置</h2><h3 id=\"安装-NexT-主题\"><a href=\"#安装-NexT-主题\" class=\"headerlink\" title=\"安装 NexT 主题\"></a>安装 NexT 主题</h3><p>Hexo NexT 主题可通过两种方式安装，一种是直接克隆官方仓库到 {hexo-site}/themes/next 下；一种是通过 npm 安装到 Hexo 主目录。本文使用第二种方式进行安装。</p>\n<blockquote>\n<p>提示：<code>&#123;hexo-site&#125;</code> 指的是 Hexo 生成的博客项目主目录，例如 <code>/path/to/my-hexo-blog</code></p>\n</blockquote>\n<p>使用 npm 安装 Hexo NexT 主题的命令如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">cd</span> &#123;hexo-site&#125;</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm install hexo-theme-next</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>npm 国内加速镜像配置：<code>npm config set registry http://registry.npmmirror.com</code></p>\n</blockquote>\n<span id=\"more\"></span>\n\n<h3 id=\"启用-NexT-主题\"><a href=\"#启用-NexT-主题\" class=\"headerlink\" title=\"启用 NexT 主题\"></a>启用 NexT 主题</h3><p>编辑 Hexo 项目主目录下的 <code>_config.yml</code> 配置文件，并修改以下属性：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">theme: next</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"定制-NexT-主题\"><a href=\"#定制-NexT-主题\" class=\"headerlink\" title=\"定制 NexT 主题\"></a>定制 NexT 主题</h3><p>NexT 主题在默认情况下不需要进行任何的改动，主题就可以直接应用到 Hexo 项目中。但如果你想做一些定制化也是完全可以的。接下来我们拷贝主题的配置文件到 hexo 主目录，文件格式为 <code>_config.&#123;theme_name&#125;.yml</code>。对于 NexT 主题，该配置文件的名称应为 <code>_config.next.yml</code>。我们准备定制以下内容：</p>\n<ol>\n<li>主题风格改为 Gemini</li>\n<li>支持暗黑模式</li>\n<li>显示首页、标签和分类</li>\n<li>个性化我的头像</li>\n<li>启用社交网络连接</li>\n<li>代码块显示风格</li>\n<li>GitHub 入口（Follow me on GitHub)</li>\n<li>增加本地搜索功能，可参考 <a href=\"https://www.jianshu.com/p/d388119a90ec\">Hexo增加搜索功能 - 简书 (jianshu.com)</a></li>\n</ol>\n<p>我们打开配置文件 <code>_config.next.yml</code> 并需改配置如下所示：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">scheme:</span> <span class=\"string\">Gemini</span></span><br><span class=\"line\"><span class=\"attr\">darkmode:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">menu:</span></span><br><span class=\"line\">  <span class=\"attr\">home:</span> <span class=\"string\">/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-home</span></span><br><span class=\"line\">  <span class=\"comment\">#about: /about/ || fa fa-user</span></span><br><span class=\"line\">  <span class=\"attr\">tags:</span> <span class=\"string\">/tags/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-tags</span></span><br><span class=\"line\">  <span class=\"attr\">categories:</span> <span class=\"string\">/categories/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-th</span></span><br><span class=\"line\"><span class=\"attr\">avatar:</span></span><br><span class=\"line\">  <span class=\"comment\"># Replace the default image and set the url here.</span></span><br><span class=\"line\">  <span class=\"attr\">url:</span> <span class=\"string\">/uploads/avatar.png</span></span><br><span class=\"line\">  <span class=\"comment\"># If true, the avatar will be displayed in circle.</span></span><br><span class=\"line\">  <span class=\"attr\">rounded:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"comment\"># If true, the avatar will be rotated with the cursor.</span></span><br><span class=\"line\">  <span class=\"attr\">rotated:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">social:</span></span><br><span class=\"line\">  <span class=\"attr\">GitHub:</span> <span class=\"string\">https://github.com/eliu</span> <span class=\"string\">||</span> <span class=\"string\">fab</span> <span class=\"string\">fa-github</span></span><br><span class=\"line\">  <span class=\"attr\">E-Mail:</span> <span class=\"string\">mailto:eliuhy@163.com</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-envelope</span></span><br><span class=\"line\"><span class=\"attr\">codeblock:</span></span><br><span class=\"line\">  <span class=\"comment\"># Code Highlight theme</span></span><br><span class=\"line\">  <span class=\"comment\"># All available themes: https://theme-next.js.org/highlight/</span></span><br><span class=\"line\">  <span class=\"attr\">theme:</span></span><br><span class=\"line\">    <span class=\"attr\">light:</span> <span class=\"string\">a11y-light</span></span><br><span class=\"line\">    <span class=\"attr\">dark:</span> <span class=\"string\">a11y-dark</span></span><br><span class=\"line\"><span class=\"comment\"># `Follow me on GitHub` banner in the top-right corner.</span></span><br><span class=\"line\"><span class=\"attr\">github_banner:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">permalink:</span> <span class=\"string\">https://github.com/eliu</span></span><br></pre></td></tr></table></figure>\n\n<p>这里特别注意的是头像的定制化，你需要将你的头像文件，例如 <code>avatar.png</code> 上传到 <code>&#123;hexo-site&#125;/source/uploads/</code> 目录下，目录结构如下所示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;hexo-site&#125;</span><br><span class=\"line\">└── source</span><br><span class=\"line\">    └── uploads</span><br><span class=\"line\">        └── avatar.png</span><br></pre></td></tr></table></figure>\n\n<p>另外，不要启用 motion 动画，有 bug…</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">motion:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n","site":{"data":{}},"excerpt":"<p>本文记录 Hexo 的 NexT 主题的安装和配置过程，使用的是官方仓库 README 的指引进行。</p>\n<p><a href=\"https://github.com/theme-next/hexo-theme-next\">theme-next/hexo-theme-next: Elegant and powerful theme for Hexo. (github.com)</a></p>\n<h2 id=\"先决条件\"><a href=\"#先决条件\" class=\"headerlink\" title=\"先决条件\"></a>先决条件</h2><ul>\n<li><code>hexo</code> ：安装部署可参考文章 <a href=\"https://eliu.github.io/2021/03/11/hexo-quickstart/\">Hexo 快速入门</a></li>\n</ul>\n<h2 id=\"安装配置\"><a href=\"#安装配置\" class=\"headerlink\" title=\"安装配置\"></a>安装配置</h2><h3 id=\"安装-NexT-主题\"><a href=\"#安装-NexT-主题\" class=\"headerlink\" title=\"安装 NexT 主题\"></a>安装 NexT 主题</h3><p>Hexo NexT 主题可通过两种方式安装，一种是直接克隆官方仓库到 {hexo-site}/themes/next 下；一种是通过 npm 安装到 Hexo 主目录。本文使用第二种方式进行安装。</p>\n<blockquote>\n<p>提示：<code>&#123;hexo-site&#125;</code> 指的是 Hexo 生成的博客项目主目录，例如 <code>/path/to/my-hexo-blog</code></p>\n</blockquote>\n<p>使用 npm 安装 Hexo NexT 主题的命令如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">cd</span> &#123;hexo-site&#125;</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm install hexo-theme-next</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>npm 国内加速镜像配置：<code>npm config set registry http://registry.npmmirror.com</code></p>\n</blockquote>","more":"<h3 id=\"启用-NexT-主题\"><a href=\"#启用-NexT-主题\" class=\"headerlink\" title=\"启用 NexT 主题\"></a>启用 NexT 主题</h3><p>编辑 Hexo 项目主目录下的 <code>_config.yml</code> 配置文件，并修改以下属性：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">theme: next</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"定制-NexT-主题\"><a href=\"#定制-NexT-主题\" class=\"headerlink\" title=\"定制 NexT 主题\"></a>定制 NexT 主题</h3><p>NexT 主题在默认情况下不需要进行任何的改动，主题就可以直接应用到 Hexo 项目中。但如果你想做一些定制化也是完全可以的。接下来我们拷贝主题的配置文件到 hexo 主目录，文件格式为 <code>_config.&#123;theme_name&#125;.yml</code>。对于 NexT 主题，该配置文件的名称应为 <code>_config.next.yml</code>。我们准备定制以下内容：</p>\n<ol>\n<li>主题风格改为 Gemini</li>\n<li>支持暗黑模式</li>\n<li>显示首页、标签和分类</li>\n<li>个性化我的头像</li>\n<li>启用社交网络连接</li>\n<li>代码块显示风格</li>\n<li>GitHub 入口（Follow me on GitHub)</li>\n<li>增加本地搜索功能，可参考 <a href=\"https://www.jianshu.com/p/d388119a90ec\">Hexo增加搜索功能 - 简书 (jianshu.com)</a></li>\n</ol>\n<p>我们打开配置文件 <code>_config.next.yml</code> 并需改配置如下所示：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">scheme:</span> <span class=\"string\">Gemini</span></span><br><span class=\"line\"><span class=\"attr\">darkmode:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">menu:</span></span><br><span class=\"line\">  <span class=\"attr\">home:</span> <span class=\"string\">/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-home</span></span><br><span class=\"line\">  <span class=\"comment\">#about: /about/ || fa fa-user</span></span><br><span class=\"line\">  <span class=\"attr\">tags:</span> <span class=\"string\">/tags/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-tags</span></span><br><span class=\"line\">  <span class=\"attr\">categories:</span> <span class=\"string\">/categories/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-th</span></span><br><span class=\"line\"><span class=\"attr\">avatar:</span></span><br><span class=\"line\">  <span class=\"comment\"># Replace the default image and set the url here.</span></span><br><span class=\"line\">  <span class=\"attr\">url:</span> <span class=\"string\">/uploads/avatar.png</span></span><br><span class=\"line\">  <span class=\"comment\"># If true, the avatar will be displayed in circle.</span></span><br><span class=\"line\">  <span class=\"attr\">rounded:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"comment\"># If true, the avatar will be rotated with the cursor.</span></span><br><span class=\"line\">  <span class=\"attr\">rotated:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">social:</span></span><br><span class=\"line\">  <span class=\"attr\">GitHub:</span> <span class=\"string\">https://github.com/eliu</span> <span class=\"string\">||</span> <span class=\"string\">fab</span> <span class=\"string\">fa-github</span></span><br><span class=\"line\">  <span class=\"attr\">E-Mail:</span> <span class=\"string\">mailto:eliuhy@163.com</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-envelope</span></span><br><span class=\"line\"><span class=\"attr\">codeblock:</span></span><br><span class=\"line\">  <span class=\"comment\"># Code Highlight theme</span></span><br><span class=\"line\">  <span class=\"comment\"># All available themes: https://theme-next.js.org/highlight/</span></span><br><span class=\"line\">  <span class=\"attr\">theme:</span></span><br><span class=\"line\">    <span class=\"attr\">light:</span> <span class=\"string\">a11y-light</span></span><br><span class=\"line\">    <span class=\"attr\">dark:</span> <span class=\"string\">a11y-dark</span></span><br><span class=\"line\"><span class=\"comment\"># `Follow me on GitHub` banner in the top-right corner.</span></span><br><span class=\"line\"><span class=\"attr\">github_banner:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">permalink:</span> <span class=\"string\">https://github.com/eliu</span></span><br></pre></td></tr></table></figure>\n\n<p>这里特别注意的是头像的定制化，你需要将你的头像文件，例如 <code>avatar.png</code> 上传到 <code>&#123;hexo-site&#125;/source/uploads/</code> 目录下，目录结构如下所示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;hexo-site&#125;</span><br><span class=\"line\">└── source</span><br><span class=\"line\">    └── uploads</span><br><span class=\"line\">        └── avatar.png</span><br></pre></td></tr></table></figure>\n\n<p>另外，不要启用 motion 动画，有 bug…</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">motion:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>"},{"title":"Hexo 快速入门","date":"2021-03-11T03:15:35.000Z","_content":"\n## [Hexo](https://hexo.io/zh-cn/) 简介\n\n官网一句话概括就是“快速、简洁且高效的博客框架”，笔者的博客就是使用 Hexo 来搭建的，前期虽然踩过一些坑，但总体用下来看确实很方便。Hexo 社区有丰富的博客模板库和功能插件供用户下载和扩展，接下来就把笔者使用 Hexo 搭建博客的过程介绍一下。\n\n<!-- more -->\n\n## 搭建过程\n\n### 安装 `hexo-cli`\n\n```shell\n$ npm install -g hexo-cli # 安装 hexo\n```\n\n### 新建博客项目\n\n在一个空目录下执行 hexo 初始化命令会触发 hexo 从 GitHub 上下载 Hexo 项目骨架到当前目录下：\n\n```shell\n$ mkdir myblog\n$ cd myblog\n$ hexo init\nINFO  Cloning hexo-starter https://github.com/hexojs/hexo-starter.git\nINFO  Install dependencies\n...\nINFO  Start blogging with Hexo!\n```\n\n此时文件夹 myblog 的项目结构如下：\n\n```\nmyblog\n├── _config.landscape.yml\n├── _config.yml\n├── node_modules\n├── package.json\n├── scaffolds\n├── source\n├── themes\n└── yarn.lock\n\n4 directories, 4 files\n```\n\n此时执行 `hexo server` 命令会在本地启动博客，访问 http://localhost:4000 即可呈现：\n\n```shell\n$ hexo s\nINFO  Validating config\nINFO  Start processing\nINFO  Hexo is running at http://localhost:4000 . Press Ctrl+C to stop.\n```\n\n![image-20210311114700121](hexo-quickstart/image-20210311114700121.png)\n\n### 插件安装\n\nHexo官方提供了丰富的插件来进行功能增强，读者可以访问 [Plugins | Hexo](https://hexo.io/plugins/) 来详细了解插件详情，这里我们准备安装以下三个插件以支持不同的功能特性，如下：\n\n| 插件名称              | 作用                                                         |\n| --------------------- | ------------------------------------------------------------ |\n| hexo-generator-search | 启用全文搜索                                                 |\n| hexo-deployer-git     | 支持将博客发布到基于Git的网站，如 GitHub Page，Gitee Pages 等等 |\n| hexo-asset-link       | 使博客中的图片和链接可以正确显示                             |\n\n在刚刚我们创建的博客主目录 myblog 下打开终端并执行以下命令：\n\n```shell\nnpm install --save hexo-generator-search\nnpm install --save hexo-deployer-git\nnpm install --save hexo-asset-link\n```\n\n### 配置博客\n\n`_config.yml` 是 Hexo 的核心配置文件我们要进行以下改动：\n\n| 属性              | 值                      | 解释                                                  |\n| ----------------- | ----------------------- | ----------------------------------------------------- |\n| language          | zh-CN                   | 语言                                                  |\n| timezone          | Asia/Shanghai           | 时区                                                  |\n| url               | 例如 https://myblog.com | 博客域名，gitee page 需改为 https://xxx.gitee.io/blog |\n| root              | /                       | 网站根目录，gitee page 需要改为 `/blog/`              |\n| post_asset_folder | true                    | 自动为文章生成专属的资源文件夹                        |\n| theme             | landscape               | 下载hexo主题包到themes目录，并更换主题名称            |\n| deploy/type       | git                     |                                                       |\n| deploy/repository | -                       | 根据实际情况制定Git仓库地址                           |\n| deploy/branch     | master                  | 默认推送的分支                                        |\n\n### 编写博客文章\n\n```shell\n$ hexo new post \"Hello world\"\n# 使用 markdown 编辑器编辑 source/_posts/hello-world.md\n```\n\n### 推送更新\n\n目前已验证通过的托管页面有 GitHub Pages 和 Gitee Pages：\n\n```shell\n$ hexo clean    # 清空之前生成内容\n$ hexo generate # 生成静态页面\n$ hexo deploy   # 推送更新至 Git 仓库\n```\n\n## 常见问题\n\n### cannot get /categories/\n\n默认情况下， hexo 并未自动为我们生成对应的分类和标签页面，我们可以按照如下方法依次启用分类和标签功能。\n\n1. 新建一个页面，命名为 `categories` 。命令如下：\n\n   ```shell\n   hexo new page categories\n   ```\n\n2. 编辑刚新建的页面 (source/categories/index.md)，将页面的类型设置为 `categories` ，主题将自动为这个页面显示所有分类。\n\n   ```markdown\n   title: 分类\n   date: 2014-12-22 12:39:04\n   type: \"categories\"\n   ---\n   ```\n\n3. 在菜单中添加链接。编辑主题的 `_config.yml` ，将 `menu` 中的 `categories: /categories` 注释去掉，如下:\n\n   ```yaml\n    menu:\n      home: /\n      categories: /categories\n      archives: /archives\n      tags: /tags\n   ```\n\n启用标签功能类似，只需要把类型改为 `tags`。\n\n\n## 参考链接\n\n- [How to Add Image to Hexo Blog Post | LIOLOG (liolok.github.io)](https://liolok.github.io/How-to-Add-Image-to-Hexo-Blog-Post/)\n- [Tags/Categories 访问 404（hexo-theme-next）](https://github.com/iissnan/hexo-theme-next/wiki/%E5%88%9B%E5%BB%BA%E5%88%86%E7%B1%BB%E9%A1%B5%E9%9D%A2)\n\n","source":"_posts/hexo-quickstart.md","raw":"---\ntitle: Hexo 快速入门\ndate: 2021-03-11 11:15:35\ncategories: \n- blog\ntags:\n- hexo\n- nodejs\n---\n\n## [Hexo](https://hexo.io/zh-cn/) 简介\n\n官网一句话概括就是“快速、简洁且高效的博客框架”，笔者的博客就是使用 Hexo 来搭建的，前期虽然踩过一些坑，但总体用下来看确实很方便。Hexo 社区有丰富的博客模板库和功能插件供用户下载和扩展，接下来就把笔者使用 Hexo 搭建博客的过程介绍一下。\n\n<!-- more -->\n\n## 搭建过程\n\n### 安装 `hexo-cli`\n\n```shell\n$ npm install -g hexo-cli # 安装 hexo\n```\n\n### 新建博客项目\n\n在一个空目录下执行 hexo 初始化命令会触发 hexo 从 GitHub 上下载 Hexo 项目骨架到当前目录下：\n\n```shell\n$ mkdir myblog\n$ cd myblog\n$ hexo init\nINFO  Cloning hexo-starter https://github.com/hexojs/hexo-starter.git\nINFO  Install dependencies\n...\nINFO  Start blogging with Hexo!\n```\n\n此时文件夹 myblog 的项目结构如下：\n\n```\nmyblog\n├── _config.landscape.yml\n├── _config.yml\n├── node_modules\n├── package.json\n├── scaffolds\n├── source\n├── themes\n└── yarn.lock\n\n4 directories, 4 files\n```\n\n此时执行 `hexo server` 命令会在本地启动博客，访问 http://localhost:4000 即可呈现：\n\n```shell\n$ hexo s\nINFO  Validating config\nINFO  Start processing\nINFO  Hexo is running at http://localhost:4000 . Press Ctrl+C to stop.\n```\n\n![image-20210311114700121](hexo-quickstart/image-20210311114700121.png)\n\n### 插件安装\n\nHexo官方提供了丰富的插件来进行功能增强，读者可以访问 [Plugins | Hexo](https://hexo.io/plugins/) 来详细了解插件详情，这里我们准备安装以下三个插件以支持不同的功能特性，如下：\n\n| 插件名称              | 作用                                                         |\n| --------------------- | ------------------------------------------------------------ |\n| hexo-generator-search | 启用全文搜索                                                 |\n| hexo-deployer-git     | 支持将博客发布到基于Git的网站，如 GitHub Page，Gitee Pages 等等 |\n| hexo-asset-link       | 使博客中的图片和链接可以正确显示                             |\n\n在刚刚我们创建的博客主目录 myblog 下打开终端并执行以下命令：\n\n```shell\nnpm install --save hexo-generator-search\nnpm install --save hexo-deployer-git\nnpm install --save hexo-asset-link\n```\n\n### 配置博客\n\n`_config.yml` 是 Hexo 的核心配置文件我们要进行以下改动：\n\n| 属性              | 值                      | 解释                                                  |\n| ----------------- | ----------------------- | ----------------------------------------------------- |\n| language          | zh-CN                   | 语言                                                  |\n| timezone          | Asia/Shanghai           | 时区                                                  |\n| url               | 例如 https://myblog.com | 博客域名，gitee page 需改为 https://xxx.gitee.io/blog |\n| root              | /                       | 网站根目录，gitee page 需要改为 `/blog/`              |\n| post_asset_folder | true                    | 自动为文章生成专属的资源文件夹                        |\n| theme             | landscape               | 下载hexo主题包到themes目录，并更换主题名称            |\n| deploy/type       | git                     |                                                       |\n| deploy/repository | -                       | 根据实际情况制定Git仓库地址                           |\n| deploy/branch     | master                  | 默认推送的分支                                        |\n\n### 编写博客文章\n\n```shell\n$ hexo new post \"Hello world\"\n# 使用 markdown 编辑器编辑 source/_posts/hello-world.md\n```\n\n### 推送更新\n\n目前已验证通过的托管页面有 GitHub Pages 和 Gitee Pages：\n\n```shell\n$ hexo clean    # 清空之前生成内容\n$ hexo generate # 生成静态页面\n$ hexo deploy   # 推送更新至 Git 仓库\n```\n\n## 常见问题\n\n### cannot get /categories/\n\n默认情况下， hexo 并未自动为我们生成对应的分类和标签页面，我们可以按照如下方法依次启用分类和标签功能。\n\n1. 新建一个页面，命名为 `categories` 。命令如下：\n\n   ```shell\n   hexo new page categories\n   ```\n\n2. 编辑刚新建的页面 (source/categories/index.md)，将页面的类型设置为 `categories` ，主题将自动为这个页面显示所有分类。\n\n   ```markdown\n   title: 分类\n   date: 2014-12-22 12:39:04\n   type: \"categories\"\n   ---\n   ```\n\n3. 在菜单中添加链接。编辑主题的 `_config.yml` ，将 `menu` 中的 `categories: /categories` 注释去掉，如下:\n\n   ```yaml\n    menu:\n      home: /\n      categories: /categories\n      archives: /archives\n      tags: /tags\n   ```\n\n启用标签功能类似，只需要把类型改为 `tags`。\n\n\n## 参考链接\n\n- [How to Add Image to Hexo Blog Post | LIOLOG (liolok.github.io)](https://liolok.github.io/How-to-Add-Image-to-Hexo-Blog-Post/)\n- [Tags/Categories 访问 404（hexo-theme-next）](https://github.com/iissnan/hexo-theme-next/wiki/%E5%88%9B%E5%BB%BA%E5%88%86%E7%B1%BB%E9%A1%B5%E9%9D%A2)\n\n","slug":"hexo-quickstart","published":1,"updated":"2021-03-23T02:55:59.518Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmasb6npo000h7soscn0zcv2w","content":"<h2 id=\"Hexo-简介\"><a href=\"#Hexo-简介\" class=\"headerlink\" title=\"Hexo 简介\"></a><a href=\"https://hexo.io/zh-cn/\">Hexo</a> 简介</h2><p>官网一句话概括就是“快速、简洁且高效的博客框架”，笔者的博客就是使用 Hexo 来搭建的，前期虽然踩过一些坑，但总体用下来看确实很方便。Hexo 社区有丰富的博客模板库和功能插件供用户下载和扩展，接下来就把笔者使用 Hexo 搭建博客的过程介绍一下。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"搭建过程\"><a href=\"#搭建过程\" class=\"headerlink\" title=\"搭建过程\"></a>搭建过程</h2><h3 id=\"安装-hexo-cli\"><a href=\"#安装-hexo-cli\" class=\"headerlink\" title=\"安装 hexo-cli\"></a>安装 <code>hexo-cli</code></h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm install -g hexo-cli <span class=\"comment\"># 安装 hexo</span></span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"新建博客项目\"><a href=\"#新建博客项目\" class=\"headerlink\" title=\"新建博客项目\"></a>新建博客项目</h3><p>在一个空目录下执行 hexo 初始化命令会触发 hexo 从 GitHub 上下载 Hexo 项目骨架到当前目录下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> mkdir myblog</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">cd</span> myblog</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> hexo init</span></span><br><span class=\"line\">INFO  Cloning hexo-starter https://github.com/hexojs/hexo-starter.git</span><br><span class=\"line\">INFO  Install dependencies</span><br><span class=\"line\">...</span><br><span class=\"line\">INFO  Start blogging with Hexo!</span><br></pre></td></tr></table></figure>\n\n<p>此时文件夹 myblog 的项目结构如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myblog</span><br><span class=\"line\">├── _config.landscape.yml</span><br><span class=\"line\">├── _config.yml</span><br><span class=\"line\">├── node_modules</span><br><span class=\"line\">├── package.json</span><br><span class=\"line\">├── scaffolds</span><br><span class=\"line\">├── source</span><br><span class=\"line\">├── themes</span><br><span class=\"line\">└── yarn.lock</span><br><span class=\"line\"></span><br><span class=\"line\">4 directories, 4 files</span><br></pre></td></tr></table></figure>\n\n<p>此时执行 <code>hexo server</code> 命令会在本地启动博客，访问 <a href=\"http://localhost:4000/\">http://localhost:4000</a> 即可呈现：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> hexo s</span></span><br><span class=\"line\">INFO  Validating config</span><br><span class=\"line\">INFO  Start processing</span><br><span class=\"line\">INFO  Hexo is running at http://localhost:4000 . Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"/2021/03/11/hexo-quickstart/image-20210311114700121.png\" alt=\"image-20210311114700121\"></p>\n<h3 id=\"插件安装\"><a href=\"#插件安装\" class=\"headerlink\" title=\"插件安装\"></a>插件安装</h3><p>Hexo官方提供了丰富的插件来进行功能增强，读者可以访问 <a href=\"https://hexo.io/plugins/\">Plugins | Hexo</a> 来详细了解插件详情，这里我们准备安装以下三个插件以支持不同的功能特性，如下：</p>\n<table>\n<thead>\n<tr>\n<th>插件名称</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>hexo-generator-search</td>\n<td>启用全文搜索</td>\n</tr>\n<tr>\n<td>hexo-deployer-git</td>\n<td>支持将博客发布到基于Git的网站，如 GitHub Page，Gitee Pages 等等</td>\n</tr>\n<tr>\n<td>hexo-asset-link</td>\n<td>使博客中的图片和链接可以正确显示</td>\n</tr>\n</tbody></table>\n<p>在刚刚我们创建的博客主目录 myblog 下打开终端并执行以下命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save hexo-generator-search</span><br><span class=\"line\">npm install --save hexo-deployer-git</span><br><span class=\"line\">npm install --save hexo-asset-link</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置博客\"><a href=\"#配置博客\" class=\"headerlink\" title=\"配置博客\"></a>配置博客</h3><p><code>_config.yml</code> 是 Hexo 的核心配置文件我们要进行以下改动：</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>值</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>language</td>\n<td>zh-CN</td>\n<td>语言</td>\n</tr>\n<tr>\n<td>timezone</td>\n<td>Asia/Shanghai</td>\n<td>时区</td>\n</tr>\n<tr>\n<td>url</td>\n<td>例如 <a href=\"https://myblog.com/\">https://myblog.com</a></td>\n<td>博客域名，gitee page 需改为 <a href=\"https://xxx.gitee.io/blog\">https://xxx.gitee.io/blog</a></td>\n</tr>\n<tr>\n<td>root</td>\n<td>/</td>\n<td>网站根目录，gitee page 需要改为 <code>/blog/</code></td>\n</tr>\n<tr>\n<td>post_asset_folder</td>\n<td>true</td>\n<td>自动为文章生成专属的资源文件夹</td>\n</tr>\n<tr>\n<td>theme</td>\n<td>landscape</td>\n<td>下载hexo主题包到themes目录，并更换主题名称</td>\n</tr>\n<tr>\n<td>deploy/type</td>\n<td>git</td>\n<td></td>\n</tr>\n<tr>\n<td>deploy/repository</td>\n<td>-</td>\n<td>根据实际情况制定Git仓库地址</td>\n</tr>\n<tr>\n<td>deploy/branch</td>\n<td>master</td>\n<td>默认推送的分支</td>\n</tr>\n</tbody></table>\n<h3 id=\"编写博客文章\"><a href=\"#编写博客文章\" class=\"headerlink\" title=\"编写博客文章\"></a>编写博客文章</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> hexo new post <span class=\"string\">&quot;Hello world&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 使用 markdown 编辑器编辑 <span class=\"built_in\">source</span>/_posts/hello-world.md</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"推送更新\"><a href=\"#推送更新\" class=\"headerlink\" title=\"推送更新\"></a>推送更新</h3><p>目前已验证通过的托管页面有 GitHub Pages 和 Gitee Pages：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> hexo clean    <span class=\"comment\"># 清空之前生成内容</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> hexo generate <span class=\"comment\"># 生成静态页面</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> hexo deploy   <span class=\"comment\"># 推送更新至 Git 仓库</span></span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h2><h3 id=\"cannot-get-categories\"><a href=\"#cannot-get-categories\" class=\"headerlink\" title=\"cannot get /categories/\"></a>cannot get /categories/</h3><p>默认情况下， hexo 并未自动为我们生成对应的分类和标签页面，我们可以按照如下方法依次启用分类和标签功能。</p>\n<ol>\n<li><p>新建一个页面，命名为 <code>categories</code> 。命令如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page categories</span><br></pre></td></tr></table></figure></li>\n<li><p>编辑刚新建的页面 (source/categories/index.md)，将页面的类型设置为 <code>categories</code> ，主题将自动为这个页面显示所有分类。</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title: 分类</span><br><span class=\"line\">date: 2014-12-22 12:39:04</span><br><span class=\"line\">type: &quot;categories&quot;</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure></li>\n<li><p>在菜单中添加链接。编辑主题的 <code>_config.yml</code> ，将 <code>menu</code> 中的 <code>categories: /categories</code> 注释去掉，如下:</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">menu:</span></span><br><span class=\"line\">  <span class=\"attr\">home:</span> <span class=\"string\">/</span></span><br><span class=\"line\">  <span class=\"attr\">categories:</span> <span class=\"string\">/categories</span></span><br><span class=\"line\">  <span class=\"attr\">archives:</span> <span class=\"string\">/archives</span></span><br><span class=\"line\">  <span class=\"attr\">tags:</span> <span class=\"string\">/tags</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>启用标签功能类似，只需要把类型改为 <code>tags</code>。</p>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><ul>\n<li><a href=\"https://liolok.github.io/How-to-Add-Image-to-Hexo-Blog-Post/\">How to Add Image to Hexo Blog Post | LIOLOG (liolok.github.io)</a></li>\n<li><a href=\"https://github.com/iissnan/hexo-theme-next/wiki/%E5%88%9B%E5%BB%BA%E5%88%86%E7%B1%BB%E9%A1%B5%E9%9D%A2\">Tags/Categories 访问 404（hexo-theme-next）</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"Hexo-简介\"><a href=\"#Hexo-简介\" class=\"headerlink\" title=\"Hexo 简介\"></a><a href=\"https://hexo.io/zh-cn/\">Hexo</a> 简介</h2><p>官网一句话概括就是“快速、简洁且高效的博客框架”，笔者的博客就是使用 Hexo 来搭建的，前期虽然踩过一些坑，但总体用下来看确实很方便。Hexo 社区有丰富的博客模板库和功能插件供用户下载和扩展，接下来就把笔者使用 Hexo 搭建博客的过程介绍一下。</p>","more":"<h2 id=\"搭建过程\"><a href=\"#搭建过程\" class=\"headerlink\" title=\"搭建过程\"></a>搭建过程</h2><h3 id=\"安装-hexo-cli\"><a href=\"#安装-hexo-cli\" class=\"headerlink\" title=\"安装 hexo-cli\"></a>安装 <code>hexo-cli</code></h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm install -g hexo-cli <span class=\"comment\"># 安装 hexo</span></span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"新建博客项目\"><a href=\"#新建博客项目\" class=\"headerlink\" title=\"新建博客项目\"></a>新建博客项目</h3><p>在一个空目录下执行 hexo 初始化命令会触发 hexo 从 GitHub 上下载 Hexo 项目骨架到当前目录下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> mkdir myblog</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">cd</span> myblog</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> hexo init</span></span><br><span class=\"line\">INFO  Cloning hexo-starter https://github.com/hexojs/hexo-starter.git</span><br><span class=\"line\">INFO  Install dependencies</span><br><span class=\"line\">...</span><br><span class=\"line\">INFO  Start blogging with Hexo!</span><br></pre></td></tr></table></figure>\n\n<p>此时文件夹 myblog 的项目结构如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myblog</span><br><span class=\"line\">├── _config.landscape.yml</span><br><span class=\"line\">├── _config.yml</span><br><span class=\"line\">├── node_modules</span><br><span class=\"line\">├── package.json</span><br><span class=\"line\">├── scaffolds</span><br><span class=\"line\">├── source</span><br><span class=\"line\">├── themes</span><br><span class=\"line\">└── yarn.lock</span><br><span class=\"line\"></span><br><span class=\"line\">4 directories, 4 files</span><br></pre></td></tr></table></figure>\n\n<p>此时执行 <code>hexo server</code> 命令会在本地启动博客，访问 <a href=\"http://localhost:4000/\">http://localhost:4000</a> 即可呈现：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> hexo s</span></span><br><span class=\"line\">INFO  Validating config</span><br><span class=\"line\">INFO  Start processing</span><br><span class=\"line\">INFO  Hexo is running at http://localhost:4000 . Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"/2021/03/11/hexo-quickstart/image-20210311114700121.png\" alt=\"image-20210311114700121\"></p>\n<h3 id=\"插件安装\"><a href=\"#插件安装\" class=\"headerlink\" title=\"插件安装\"></a>插件安装</h3><p>Hexo官方提供了丰富的插件来进行功能增强，读者可以访问 <a href=\"https://hexo.io/plugins/\">Plugins | Hexo</a> 来详细了解插件详情，这里我们准备安装以下三个插件以支持不同的功能特性，如下：</p>\n<table>\n<thead>\n<tr>\n<th>插件名称</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>hexo-generator-search</td>\n<td>启用全文搜索</td>\n</tr>\n<tr>\n<td>hexo-deployer-git</td>\n<td>支持将博客发布到基于Git的网站，如 GitHub Page，Gitee Pages 等等</td>\n</tr>\n<tr>\n<td>hexo-asset-link</td>\n<td>使博客中的图片和链接可以正确显示</td>\n</tr>\n</tbody></table>\n<p>在刚刚我们创建的博客主目录 myblog 下打开终端并执行以下命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save hexo-generator-search</span><br><span class=\"line\">npm install --save hexo-deployer-git</span><br><span class=\"line\">npm install --save hexo-asset-link</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置博客\"><a href=\"#配置博客\" class=\"headerlink\" title=\"配置博客\"></a>配置博客</h3><p><code>_config.yml</code> 是 Hexo 的核心配置文件我们要进行以下改动：</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>值</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>language</td>\n<td>zh-CN</td>\n<td>语言</td>\n</tr>\n<tr>\n<td>timezone</td>\n<td>Asia/Shanghai</td>\n<td>时区</td>\n</tr>\n<tr>\n<td>url</td>\n<td>例如 <a href=\"https://myblog.com/\">https://myblog.com</a></td>\n<td>博客域名，gitee page 需改为 <a href=\"https://xxx.gitee.io/blog\">https://xxx.gitee.io/blog</a></td>\n</tr>\n<tr>\n<td>root</td>\n<td>/</td>\n<td>网站根目录，gitee page 需要改为 <code>/blog/</code></td>\n</tr>\n<tr>\n<td>post_asset_folder</td>\n<td>true</td>\n<td>自动为文章生成专属的资源文件夹</td>\n</tr>\n<tr>\n<td>theme</td>\n<td>landscape</td>\n<td>下载hexo主题包到themes目录，并更换主题名称</td>\n</tr>\n<tr>\n<td>deploy/type</td>\n<td>git</td>\n<td></td>\n</tr>\n<tr>\n<td>deploy/repository</td>\n<td>-</td>\n<td>根据实际情况制定Git仓库地址</td>\n</tr>\n<tr>\n<td>deploy/branch</td>\n<td>master</td>\n<td>默认推送的分支</td>\n</tr>\n</tbody></table>\n<h3 id=\"编写博客文章\"><a href=\"#编写博客文章\" class=\"headerlink\" title=\"编写博客文章\"></a>编写博客文章</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> hexo new post <span class=\"string\">&quot;Hello world&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 使用 markdown 编辑器编辑 <span class=\"built_in\">source</span>/_posts/hello-world.md</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"推送更新\"><a href=\"#推送更新\" class=\"headerlink\" title=\"推送更新\"></a>推送更新</h3><p>目前已验证通过的托管页面有 GitHub Pages 和 Gitee Pages：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> hexo clean    <span class=\"comment\"># 清空之前生成内容</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> hexo generate <span class=\"comment\"># 生成静态页面</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> hexo deploy   <span class=\"comment\"># 推送更新至 Git 仓库</span></span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h2><h3 id=\"cannot-get-categories\"><a href=\"#cannot-get-categories\" class=\"headerlink\" title=\"cannot get /categories/\"></a>cannot get /categories/</h3><p>默认情况下， hexo 并未自动为我们生成对应的分类和标签页面，我们可以按照如下方法依次启用分类和标签功能。</p>\n<ol>\n<li><p>新建一个页面，命名为 <code>categories</code> 。命令如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page categories</span><br></pre></td></tr></table></figure></li>\n<li><p>编辑刚新建的页面 (source/categories/index.md)，将页面的类型设置为 <code>categories</code> ，主题将自动为这个页面显示所有分类。</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title: 分类</span><br><span class=\"line\">date: 2014-12-22 12:39:04</span><br><span class=\"line\">type: &quot;categories&quot;</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure></li>\n<li><p>在菜单中添加链接。编辑主题的 <code>_config.yml</code> ，将 <code>menu</code> 中的 <code>categories: /categories</code> 注释去掉，如下:</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">menu:</span></span><br><span class=\"line\">  <span class=\"attr\">home:</span> <span class=\"string\">/</span></span><br><span class=\"line\">  <span class=\"attr\">categories:</span> <span class=\"string\">/categories</span></span><br><span class=\"line\">  <span class=\"attr\">archives:</span> <span class=\"string\">/archives</span></span><br><span class=\"line\">  <span class=\"attr\">tags:</span> <span class=\"string\">/tags</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>启用标签功能类似，只需要把类型改为 <code>tags</code>。</p>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><ul>\n<li><a href=\"https://liolok.github.io/How-to-Add-Image-to-Hexo-Blog-Post/\">How to Add Image to Hexo Blog Post | LIOLOG (liolok.github.io)</a></li>\n<li><a href=\"https://github.com/iissnan/hexo-theme-next/wiki/%E5%88%9B%E5%BB%BA%E5%88%86%E7%B1%BB%E9%A1%B5%E9%9D%A2\">Tags/Categories 访问 404（hexo-theme-next）</a></li>\n</ul>"},{"title":"使用 kubeadm 快速安装 Kubernetes 集群","date":"2018-10-02T08:11:04.000Z","_content":"\n## 概述\n\n本教程将利用 Kubernetes 官方认为安装部署集群环境的最佳实践 - kubeadm 进行环境搭建。安装成功之后，我们仍然使用《Kubernetes 本地快速搭建指南》中所介绍的 Web 应用示例来部署至集群环境中，并以此确认集群是否可用。\n\n<!-- more -->\n\n### kubeadm 简介\n\n在 CentOS / RHEL 环境中，安装 Kubernetes 的最简单的方式就是通过 `yum install kubernetes` 来完成，但仍然需要修改各个组件的启动参数，才能完成 Kubernetes 集群的设置，整个过程较为复杂，也容易出错。因此，从 Kubernetes v1.4 版本开始，官方正式引入了命令行工具 kubeadm ，致力于简化集群环境的安装和解决 Kubernetes 集群的高可用的问题。但直到 v1.9 版本，此工具还不能用于生产环境。按照官方的计划，此工具将会在 2018 年内正式面向生产环境推出。所以在现阶段，此工具比较适合初学者安装和学习 Kubernetes。\n\n### kubeadm 版本\n\n本教程将使用 kubeadm 的 `v1.9.2` 版本安装 Kubernetes 集群。在默认情况下，使用 kubeadm 安装的 Kubernetes 的主版本和 kubeadm 相一致，此处为 `v1.9.x` 。如果读者想要安装其他的版本，则使用 `--kubernetes-version` 参数来指定 Kubernetes 的版本。\n\n```bash\nkubeadm init --kubernetes-version=vx.y.z\n```\n\n\n\n## 环境准备\n\n本教程将使用64位的 CentOS 7 操作系统作为安装环境，读者可以根据实际情况来进行准备。笔者个人推荐 VirtualBox + Vagrant 在本机快速搭建环境，具体可以参考《Kubernetes 本地快速搭建指南》，此处不再赘述。\n\n## 安装 kubeadm\n\n本节将详细介绍 kubeadm 在 CentOS 7 下的安装步骤。\n\n### 设置主机名称\n\n```bash\nhostnamectl set-hostname kubeadm-master\necho \"127.0.0.1 kubeadm-master\" >> /etc/hosts\n```\n\n### 关闭 SELinux\n\n```bash\nsetenforce 0\nsed -i 's/SELINUX=enforcing/SELINUX=permissive/g' /etc/selinux/config\n```\n\n### 禁用 SWAP\n\n```bash\nswapoff -a\n```\n\n### 禁用防火墙\n\n```bash\nsystemctl disable firewalld\nsystemctl stop firewalld\n```\n\n### 微调内核设置\n\n对于 RHEL/CentOS 系统，由于 iptables 的设置，网络流量可能被错误的路由，因此要对内核进行如下调整：\n\n```bash\ncat <<EOF >  /etc/sysctl.d/k8s.conf\nnet.bridge.bridge-nf-call-ip6tables = 1\nnet.bridge.bridge-nf-call-iptables = 1\nEOF\nsysctl --system\n```\n\n### 安装依赖的程序包\n\n```bash\nyum -y update && yum -y upgrade\nyum -y install docker socat\n```\n\n### 离线安装 kubeadm\n\n官方推荐设置 yum 源进行 kubeadm 的安装，不过在国内的网络环境下，谷歌的服务无法被正确的访问。此处采用离线安装方式安装 rpm 包。读者可以前往 https://pan.baidu.com/s/1kWfpPdl 进行下载。\n\n```bash\nrpm -ivh /path/to/kubectl-1.9.2-0.x86_64.rpm \\\n         /path/to/kubernetes-cni-0.6.0-0.x86_64.rpm \\\n         /path/to/kubelet-1.9.2-0.x86_64.rpm \\\n         /path/to/kubeadm-1.9.2-0.x86_64.rpm\n```\n\n## 启动 kubeadm\n\n本节将对 kubeadm 启动前进行参数配置，同时将 Kubernetes 的附加功 Dashboard 也同时进行部署。\n\n### 设置 Docker 镜像加速器\n\n```bash\ncat <<EOF > /etc/docker/daemon.json\n{\n  \"registry-mirrors\" : [\n    \"http://4a0fee72.m.daocloud.io\"\n  ]\n}\nEOF\n```\n\n### 启动 docker 和 kubelet 服务\n\n```bash\nsystemctl enable docker && systemctl start docker\nsystemctl enable kubelet && systemctl start kubelet\n```\n\n### 导入 Docker 镜像\n\n由于谷歌服务无法访问，因此相关的 Docker 镜像需要通过代理提前下载好，并进行打包。读者可以从 https://pan.baidu.com/s/1kWfpPdl 进行下载。导入镜像命令如下：\n\n```bash\n$ docker load -i /path/to/kubeadm/v1.9.2/docker-images.tar\nLoaded image: gcr.io/google_containers/k8s-dns-sidecar-amd64:1.14.7\nLoaded image: gcr.io/google_containers/k8s-dns-kube-dns-amd64:1.14.7\nLoaded image: gcr.io/google_containers/k8s-dns-dnsmasq-nanny-amd64:1.14.7\nLoaded image: gcr.io/google_containers/etcd-amd64:3.1.11\nLoaded image: gcr.io/google_containers/kube-controller-manager-amd64:v1.9.2\nLoaded image: gcr.io/google_containers/kube-scheduler-amd64:v1.9.2\nLoaded image: k8s.gcr.io/kubernetes-dashboard-amd64:v1.8.2\nLoaded image: gcr.io/google_containers/kube-proxy-amd64:v1.9.2\nLoaded image: gcr.io/google_containers/kube-apiserver-amd64:v1.9.2\nLoaded image: gcr.io/google_containers/pause-amd64:3.0\n```\n\n### 启动 kubeadm\n\n使用 `kubeadm init` 初始化并启动 Kubernetes 集群。其中的几个重要参数选项列示如下：\n\n| 参数选项                        | 参考值           | 含义                                          |\n| ------------------------------- | ---------------- | --------------------------------------------- |\n| `--kubernetes-version`          | v1.9.2           | Kubernetes 的版本                             |\n| `--pod-network-cidr`            | 10.244.0.0/16    | Pod 网络寻址范围，此处是网络插件 Flannel 用到 |\n| `--apiserver-advertise-address` | CentOS 主机的 IP | Kubernetes 集群的 apiserver (主节点) 的地址   |\n\n启动 kubeadm 的命令如下：\n\n```bash\n$ kubeadm init \\\n  --kubernetes-version=v1.9.2 \\\n  --pod-network-cidr=10.244.0.0/16 \\\n  --apiserver-advertise-address=192.168.119.101\n# 以下是 kubeadm 初始化时的输出信息\n[init] Using Kubernetes version: v1.9.2\n[init] Using Authorization modes: [Node RBAC]\n[preflight] Running pre-flight checks.\n[WARNING FileExisting-crictl]: crictl not found in system path\n[certificates] Generated ca certificate and key.\n[certificates] Generated apiserver certificate and key.\n[certificates] apiserver serving cert is signed for DNS names [kubeadm-master kubernetes kubernetes.default kubernetes.default.svc kubernetes.default.svc.cluster.local] and IPs [10.96.0.1 192.168.119.101]\n[certificates] Generated apiserver-kubelet-client certificate and key.\n[certificates] Generated sa key and public key.\n[certificates] Generated front-proxy-ca certificate and key.\n[certificates] Generated front-proxy-client certificate and key.\n[certificates] Valid certificates and keys now exist in \"/etc/kubernetes/pki\"\n[kubeconfig] Wrote KubeConfig file to disk: \"admin.conf\"\n[kubeconfig] Wrote KubeConfig file to disk: \"kubelet.conf\"\n[kubeconfig] Wrote KubeConfig file to disk: \"controller-manager.conf\"\n[kubeconfig] Wrote KubeConfig file to disk: \"scheduler.conf\"\n[controlplane] Wrote Static Pod manifest for component kube-apiserver to \"/etc/kubernetes/manifests/kube-apiserver.yaml\"\n[controlplane] Wrote Static Pod manifest for component kube-controller-manager to \"/etc/kubernetes/manifests/kube-controller-manager.yaml\"\n[controlplane] Wrote Static Pod manifest for component kube-scheduler to \"/etc/kubernetes/manifests/kube-scheduler.yaml\"\n[etcd] Wrote Static Pod manifest for a local etcd instance to \"/etc/kubernetes/manifests/etcd.yaml\"\n[init] Waiting for the kubelet to boot up the control plane as Static Pods from directory \"/etc/kubernetes/manifests\".\n[init] This might take a minute or longer if the control plane images have to be pulled.\n[apiclient] All control plane components are healthy after 30.502464 seconds\n[uploadconfig] Storing the configuration used in ConfigMap \"kubeadm-config\" in the \"kube-system\" Namespace\n[markmaster] Will mark node kubeadm-master as master by adding a label and a taint\n[markmaster] Master kubeadm-master tainted and labelled with key/value: node-role.kubernetes.io/master=\"\"\n[bootstraptoken] Using token: 3a9f97.1cd340e0f34adbbb\n[bootstraptoken] Configured RBAC rules to allow Node Bootstrap tokens to post CSRs in order for nodes to get long term certificate credentials\n[bootstraptoken] Configured RBAC rules to allow the csrapprover controller automatically approve CSRs from a Node Bootstrap Token\n[bootstraptoken] Configured RBAC rules to allow certificate rotation for all node client certificates in the cluster\n[bootstraptoken] Creating the \"cluster-info\" ConfigMap in the \"kube-public\" namespace\n[addons] Applied essential addon: kube-dns\n[addons] Applied essential addon: kube-proxy\n\nYour Kubernetes master has initialized successfully!\n\nTo start using your cluster, you need to run the following as a regular user:\n\nmkdir -p $HOME/.kube\nsudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config\nsudo chown $(id -u):$(id -g) $HOME/.kube/config\n\nYou should now deploy a pod network to the cluster.\nRun \"kubectl apply -f [podnetwork].yaml\" with one of the options listed at:\nhttps://kubernetes.io/docs/concepts/cluster-administration/addons/\n\nYou can now join any number of machines by running the following on each node\nas root:\n\nkubeadm join --token 3a9f97.1cd340e0f34adbbb 192.168.119.101:6443 --discovery-token-ca-cert-hash sha256:64111962ff9df5f566d21f5ad5e9d046487aff4553a738f5c6d1ca0fdc4c69b8\n```\n\n### 用户设置\n\n拷贝 Kubernetes 的配置文件至当前用户的目录下，使当前用户可以正确使用 kubectl 进行操作。\n\n```bash\nmkdir -p $HOME/.kube\nsudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config\nsudo chown $(id -u):$(id -g) $HOME/.kube/config\n```\n\n### 配置单节点集群\n\n默认情况下，master 主节点是不参与工作负载的，如果用户在本地配置的是一个单节点集群，那么需要将 master 主节点同时设置成工作节点，命令如下：\n\n```bash\nkubectl taint nodes --all node-role.kubernetes.io/master-\n```\n\n> 如果想配置多节点的集群，则需要在工作节点安装 kubeadm, kubelet, kubectl 和 docker，然后使用主节点运行 `kubeadm init` 命令所打印出来的 `join` 命令来加入集群：\n>\n> ```bash\n> kubeadm join --token 3a9f97.1cd340e0f34adbbb 192.168.119.101:6443 --discovery-token-ca-cert-hash sha256:64111962ff9df5f566d21f5ad5e9d046487aff4553a738f5c6d1ca0fdc4c69b8\n> ```\n\n### 部署附加组件\n\n安装 Flannel 网络插件和 Dashboard 插件。\n\n```bash\n# 安装 Flannel\nkubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml\n# 安装 Dashboard\nkubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/master/src/deploy/recommended/kubernetes-dashboard.yaml\n# 创建 admin-user 管理员角色\nkubectl apply -f /path/to/admin-user-role.yaml\n```\n\nadmin-user-role.yaml 的定义如下：\n\n```yaml\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: admin-user\n  namespace: kube-system\n---\napiVersion: rbac.authorization.k8s.io/v1beta1\nkind: ClusterRoleBinding\nmetadata:\n  name: admin-user\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: cluster-admin\nsubjects:\n- kind: ServiceAccount\n  name: admin-user\n  namespace: kube-system\n```\n\n使用如下命令获取 admin-user 管理员角色的访问口令：\n\n```bash\nkubectl -n kube-system describe secret $(kubectl -n kube-system get secret | grep admin-user | awk '{print $1}')\n# 输出如下\nName:         admin-user-token-j6rlh\nNamespace:    kube-system\nLabels:       <none>\nAnnotations:  kubernetes.io/service-account.name=admin-user\n              kubernetes.io/service-account.uid=111eba61-0d3e-11e8-8763-525400ad3b43\n\nType:  kubernetes.io/service-account-token\n\nData\n====\nca.crt:     1025 bytes\nnamespace:  11 bytes\ntoken:      eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlLXN5c3RlbSIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJhZG1pbi11c2VyLXRva2VuLWo2cmxoIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6ImFkbWluLXVzZXIiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC51aWQiOiIxMTFlYmE2MS0wZDNlLTExZTgtODc2My01MjU0MDBhZDNiNDMiLCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6a3ViZS1zeXN0ZW06YWRtaW4tdXNlciJ9.qY-6JaTSqpybnhusvOnNkcw7AE1iHGkBZObO62Vo9XZUEK95NlHaaIj7v8kyNLHujpHuVgTYQPyMBvPzU5JONzdEP5U2K5Q_Z3b6f95vWHGwhNO6qdz5EOxK6-_sma61zL2uQpHb637v0ICfwgFRDE_4as0bq2i5vT-dGCv5jvDjmM-b1mjjeXXC6Z7EYLN-DYp38kIzrxFoQkX0_eNd2fIIeKZshthvGmAw5yEr6opkOnbXyEaqgiMOM9ZhVWO6UYseOEgE0GdDnXgoBeYjFXkZ1FDlkyXihNv6tEU5TQCkPt1iUdeOu_dL6OdvaH91wQjeDxeej3qVyvSJaWAjnA\n```\n\n其中 token 值即为对应的授权口令。\n\n### 访问 Dashboard\n\n拷贝 `$HOME/.kube/config` 文件至主机的某一个目录下，比如 `/path/to/kube` ，然后使用 `kubectl proxy` 启动代理，具体命令如下：\n\n```bash\n$ kubectl --kubeconfig=/path/to/kube/config proxy\nStarting to serve on 127.0.0.1:8001\n```\n\n这时，访问 http://localhost:8001/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy/ 进入 Dashboard 并使用 上面的 Token（令牌） 进行登录：\n\n![](install-k8s-using-kubeadm/dashboard-login.png)\n\n点击`登录`按钮进入 Dashboard 主页，我们就可以在这里管理 Kubernetes 集群了，Dashboard 主页截图如下所示。\n\n![](install-k8s-using-kubeadm/dashboard-home.png)\n\n\n\n## 验证 Kubernetes\n\n本节将快速地向 Kubernetes 集群部署一个示例应用来验证集群是否工作正常。示例应用取自《Kubernetes 本地快速搭建指南》案例。\n\n### 快速部署示例应用\n\n示例应用的 yaml 定义如下，读者可将其另存为文件 demo.yaml，以供后面使用。\n\n```yaml\napiVersion: v1\nkind: ReplicationController\nmetadata:\n  name: mysql\nspec:\n  replicas: 1\n  selector:\n    app: mysql\n  template:\n    metadata:\n      labels:\n        app: mysql\n    spec:\n        containers:\n        - name: mysql\n          image: mysql\n          ports:\n          - containerPort: 3306\n          env:\n          - name: MYSQL_ROOT_PASSWORD\n            value: \"123456\"\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: mysql\nspec:\n  ports:\n  - port: 3306\n  selector:\n    app: mysql\n---\napiVersion: v1\nkind: ReplicationController\nmetadata:\n  name: myweb\nspec:\n  replicas: 2\n  selector: \n    app: myweb\n  template:\n    metadata:\n      labels:\n        app: myweb\n    spec:\n      containers:\n      - name: myweb\n        image: kubeguide/tomcat-app:v1\n        ports:\n        - containerPort: 8080\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: myweb\nspec:\n  type: NodePort\n  ports:\n  - port: 8080\n    nodePort: 30001\n  selector:\n    app: myweb\n```\n\n使用以下命令部署应用：\n\n```bash\nkubectl create -f /path/to/demo.yaml\n```\n\n\n\n### 访问应用主页\n\n经过以上的步骤，我们的应用就成功地部署在了 Kubernetes 集群上了，我们可以访问 http://<虚拟机 IP>:30001/demo/ 来验证我们的应用了。\n\n![](install-k8s-using-kubeadm/demo.png)\n\n","source":"_posts/install-k8s-using-kubeadm.md","raw":"---\ntitle: 使用 kubeadm 快速安装 Kubernetes 集群\ndate: 2018-10-02 16:11:04\ntags: \n- Kubernetes\n- kubeadm\ncategories: \n- DevOps\n---\n\n## 概述\n\n本教程将利用 Kubernetes 官方认为安装部署集群环境的最佳实践 - kubeadm 进行环境搭建。安装成功之后，我们仍然使用《Kubernetes 本地快速搭建指南》中所介绍的 Web 应用示例来部署至集群环境中，并以此确认集群是否可用。\n\n<!-- more -->\n\n### kubeadm 简介\n\n在 CentOS / RHEL 环境中，安装 Kubernetes 的最简单的方式就是通过 `yum install kubernetes` 来完成，但仍然需要修改各个组件的启动参数，才能完成 Kubernetes 集群的设置，整个过程较为复杂，也容易出错。因此，从 Kubernetes v1.4 版本开始，官方正式引入了命令行工具 kubeadm ，致力于简化集群环境的安装和解决 Kubernetes 集群的高可用的问题。但直到 v1.9 版本，此工具还不能用于生产环境。按照官方的计划，此工具将会在 2018 年内正式面向生产环境推出。所以在现阶段，此工具比较适合初学者安装和学习 Kubernetes。\n\n### kubeadm 版本\n\n本教程将使用 kubeadm 的 `v1.9.2` 版本安装 Kubernetes 集群。在默认情况下，使用 kubeadm 安装的 Kubernetes 的主版本和 kubeadm 相一致，此处为 `v1.9.x` 。如果读者想要安装其他的版本，则使用 `--kubernetes-version` 参数来指定 Kubernetes 的版本。\n\n```bash\nkubeadm init --kubernetes-version=vx.y.z\n```\n\n\n\n## 环境准备\n\n本教程将使用64位的 CentOS 7 操作系统作为安装环境，读者可以根据实际情况来进行准备。笔者个人推荐 VirtualBox + Vagrant 在本机快速搭建环境，具体可以参考《Kubernetes 本地快速搭建指南》，此处不再赘述。\n\n## 安装 kubeadm\n\n本节将详细介绍 kubeadm 在 CentOS 7 下的安装步骤。\n\n### 设置主机名称\n\n```bash\nhostnamectl set-hostname kubeadm-master\necho \"127.0.0.1 kubeadm-master\" >> /etc/hosts\n```\n\n### 关闭 SELinux\n\n```bash\nsetenforce 0\nsed -i 's/SELINUX=enforcing/SELINUX=permissive/g' /etc/selinux/config\n```\n\n### 禁用 SWAP\n\n```bash\nswapoff -a\n```\n\n### 禁用防火墙\n\n```bash\nsystemctl disable firewalld\nsystemctl stop firewalld\n```\n\n### 微调内核设置\n\n对于 RHEL/CentOS 系统，由于 iptables 的设置，网络流量可能被错误的路由，因此要对内核进行如下调整：\n\n```bash\ncat <<EOF >  /etc/sysctl.d/k8s.conf\nnet.bridge.bridge-nf-call-ip6tables = 1\nnet.bridge.bridge-nf-call-iptables = 1\nEOF\nsysctl --system\n```\n\n### 安装依赖的程序包\n\n```bash\nyum -y update && yum -y upgrade\nyum -y install docker socat\n```\n\n### 离线安装 kubeadm\n\n官方推荐设置 yum 源进行 kubeadm 的安装，不过在国内的网络环境下，谷歌的服务无法被正确的访问。此处采用离线安装方式安装 rpm 包。读者可以前往 https://pan.baidu.com/s/1kWfpPdl 进行下载。\n\n```bash\nrpm -ivh /path/to/kubectl-1.9.2-0.x86_64.rpm \\\n         /path/to/kubernetes-cni-0.6.0-0.x86_64.rpm \\\n         /path/to/kubelet-1.9.2-0.x86_64.rpm \\\n         /path/to/kubeadm-1.9.2-0.x86_64.rpm\n```\n\n## 启动 kubeadm\n\n本节将对 kubeadm 启动前进行参数配置，同时将 Kubernetes 的附加功 Dashboard 也同时进行部署。\n\n### 设置 Docker 镜像加速器\n\n```bash\ncat <<EOF > /etc/docker/daemon.json\n{\n  \"registry-mirrors\" : [\n    \"http://4a0fee72.m.daocloud.io\"\n  ]\n}\nEOF\n```\n\n### 启动 docker 和 kubelet 服务\n\n```bash\nsystemctl enable docker && systemctl start docker\nsystemctl enable kubelet && systemctl start kubelet\n```\n\n### 导入 Docker 镜像\n\n由于谷歌服务无法访问，因此相关的 Docker 镜像需要通过代理提前下载好，并进行打包。读者可以从 https://pan.baidu.com/s/1kWfpPdl 进行下载。导入镜像命令如下：\n\n```bash\n$ docker load -i /path/to/kubeadm/v1.9.2/docker-images.tar\nLoaded image: gcr.io/google_containers/k8s-dns-sidecar-amd64:1.14.7\nLoaded image: gcr.io/google_containers/k8s-dns-kube-dns-amd64:1.14.7\nLoaded image: gcr.io/google_containers/k8s-dns-dnsmasq-nanny-amd64:1.14.7\nLoaded image: gcr.io/google_containers/etcd-amd64:3.1.11\nLoaded image: gcr.io/google_containers/kube-controller-manager-amd64:v1.9.2\nLoaded image: gcr.io/google_containers/kube-scheduler-amd64:v1.9.2\nLoaded image: k8s.gcr.io/kubernetes-dashboard-amd64:v1.8.2\nLoaded image: gcr.io/google_containers/kube-proxy-amd64:v1.9.2\nLoaded image: gcr.io/google_containers/kube-apiserver-amd64:v1.9.2\nLoaded image: gcr.io/google_containers/pause-amd64:3.0\n```\n\n### 启动 kubeadm\n\n使用 `kubeadm init` 初始化并启动 Kubernetes 集群。其中的几个重要参数选项列示如下：\n\n| 参数选项                        | 参考值           | 含义                                          |\n| ------------------------------- | ---------------- | --------------------------------------------- |\n| `--kubernetes-version`          | v1.9.2           | Kubernetes 的版本                             |\n| `--pod-network-cidr`            | 10.244.0.0/16    | Pod 网络寻址范围，此处是网络插件 Flannel 用到 |\n| `--apiserver-advertise-address` | CentOS 主机的 IP | Kubernetes 集群的 apiserver (主节点) 的地址   |\n\n启动 kubeadm 的命令如下：\n\n```bash\n$ kubeadm init \\\n  --kubernetes-version=v1.9.2 \\\n  --pod-network-cidr=10.244.0.0/16 \\\n  --apiserver-advertise-address=192.168.119.101\n# 以下是 kubeadm 初始化时的输出信息\n[init] Using Kubernetes version: v1.9.2\n[init] Using Authorization modes: [Node RBAC]\n[preflight] Running pre-flight checks.\n[WARNING FileExisting-crictl]: crictl not found in system path\n[certificates] Generated ca certificate and key.\n[certificates] Generated apiserver certificate and key.\n[certificates] apiserver serving cert is signed for DNS names [kubeadm-master kubernetes kubernetes.default kubernetes.default.svc kubernetes.default.svc.cluster.local] and IPs [10.96.0.1 192.168.119.101]\n[certificates] Generated apiserver-kubelet-client certificate and key.\n[certificates] Generated sa key and public key.\n[certificates] Generated front-proxy-ca certificate and key.\n[certificates] Generated front-proxy-client certificate and key.\n[certificates] Valid certificates and keys now exist in \"/etc/kubernetes/pki\"\n[kubeconfig] Wrote KubeConfig file to disk: \"admin.conf\"\n[kubeconfig] Wrote KubeConfig file to disk: \"kubelet.conf\"\n[kubeconfig] Wrote KubeConfig file to disk: \"controller-manager.conf\"\n[kubeconfig] Wrote KubeConfig file to disk: \"scheduler.conf\"\n[controlplane] Wrote Static Pod manifest for component kube-apiserver to \"/etc/kubernetes/manifests/kube-apiserver.yaml\"\n[controlplane] Wrote Static Pod manifest for component kube-controller-manager to \"/etc/kubernetes/manifests/kube-controller-manager.yaml\"\n[controlplane] Wrote Static Pod manifest for component kube-scheduler to \"/etc/kubernetes/manifests/kube-scheduler.yaml\"\n[etcd] Wrote Static Pod manifest for a local etcd instance to \"/etc/kubernetes/manifests/etcd.yaml\"\n[init] Waiting for the kubelet to boot up the control plane as Static Pods from directory \"/etc/kubernetes/manifests\".\n[init] This might take a minute or longer if the control plane images have to be pulled.\n[apiclient] All control plane components are healthy after 30.502464 seconds\n[uploadconfig] Storing the configuration used in ConfigMap \"kubeadm-config\" in the \"kube-system\" Namespace\n[markmaster] Will mark node kubeadm-master as master by adding a label and a taint\n[markmaster] Master kubeadm-master tainted and labelled with key/value: node-role.kubernetes.io/master=\"\"\n[bootstraptoken] Using token: 3a9f97.1cd340e0f34adbbb\n[bootstraptoken] Configured RBAC rules to allow Node Bootstrap tokens to post CSRs in order for nodes to get long term certificate credentials\n[bootstraptoken] Configured RBAC rules to allow the csrapprover controller automatically approve CSRs from a Node Bootstrap Token\n[bootstraptoken] Configured RBAC rules to allow certificate rotation for all node client certificates in the cluster\n[bootstraptoken] Creating the \"cluster-info\" ConfigMap in the \"kube-public\" namespace\n[addons] Applied essential addon: kube-dns\n[addons] Applied essential addon: kube-proxy\n\nYour Kubernetes master has initialized successfully!\n\nTo start using your cluster, you need to run the following as a regular user:\n\nmkdir -p $HOME/.kube\nsudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config\nsudo chown $(id -u):$(id -g) $HOME/.kube/config\n\nYou should now deploy a pod network to the cluster.\nRun \"kubectl apply -f [podnetwork].yaml\" with one of the options listed at:\nhttps://kubernetes.io/docs/concepts/cluster-administration/addons/\n\nYou can now join any number of machines by running the following on each node\nas root:\n\nkubeadm join --token 3a9f97.1cd340e0f34adbbb 192.168.119.101:6443 --discovery-token-ca-cert-hash sha256:64111962ff9df5f566d21f5ad5e9d046487aff4553a738f5c6d1ca0fdc4c69b8\n```\n\n### 用户设置\n\n拷贝 Kubernetes 的配置文件至当前用户的目录下，使当前用户可以正确使用 kubectl 进行操作。\n\n```bash\nmkdir -p $HOME/.kube\nsudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config\nsudo chown $(id -u):$(id -g) $HOME/.kube/config\n```\n\n### 配置单节点集群\n\n默认情况下，master 主节点是不参与工作负载的，如果用户在本地配置的是一个单节点集群，那么需要将 master 主节点同时设置成工作节点，命令如下：\n\n```bash\nkubectl taint nodes --all node-role.kubernetes.io/master-\n```\n\n> 如果想配置多节点的集群，则需要在工作节点安装 kubeadm, kubelet, kubectl 和 docker，然后使用主节点运行 `kubeadm init` 命令所打印出来的 `join` 命令来加入集群：\n>\n> ```bash\n> kubeadm join --token 3a9f97.1cd340e0f34adbbb 192.168.119.101:6443 --discovery-token-ca-cert-hash sha256:64111962ff9df5f566d21f5ad5e9d046487aff4553a738f5c6d1ca0fdc4c69b8\n> ```\n\n### 部署附加组件\n\n安装 Flannel 网络插件和 Dashboard 插件。\n\n```bash\n# 安装 Flannel\nkubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml\n# 安装 Dashboard\nkubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/master/src/deploy/recommended/kubernetes-dashboard.yaml\n# 创建 admin-user 管理员角色\nkubectl apply -f /path/to/admin-user-role.yaml\n```\n\nadmin-user-role.yaml 的定义如下：\n\n```yaml\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: admin-user\n  namespace: kube-system\n---\napiVersion: rbac.authorization.k8s.io/v1beta1\nkind: ClusterRoleBinding\nmetadata:\n  name: admin-user\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: cluster-admin\nsubjects:\n- kind: ServiceAccount\n  name: admin-user\n  namespace: kube-system\n```\n\n使用如下命令获取 admin-user 管理员角色的访问口令：\n\n```bash\nkubectl -n kube-system describe secret $(kubectl -n kube-system get secret | grep admin-user | awk '{print $1}')\n# 输出如下\nName:         admin-user-token-j6rlh\nNamespace:    kube-system\nLabels:       <none>\nAnnotations:  kubernetes.io/service-account.name=admin-user\n              kubernetes.io/service-account.uid=111eba61-0d3e-11e8-8763-525400ad3b43\n\nType:  kubernetes.io/service-account-token\n\nData\n====\nca.crt:     1025 bytes\nnamespace:  11 bytes\ntoken:      eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlLXN5c3RlbSIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJhZG1pbi11c2VyLXRva2VuLWo2cmxoIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6ImFkbWluLXVzZXIiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC51aWQiOiIxMTFlYmE2MS0wZDNlLTExZTgtODc2My01MjU0MDBhZDNiNDMiLCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6a3ViZS1zeXN0ZW06YWRtaW4tdXNlciJ9.qY-6JaTSqpybnhusvOnNkcw7AE1iHGkBZObO62Vo9XZUEK95NlHaaIj7v8kyNLHujpHuVgTYQPyMBvPzU5JONzdEP5U2K5Q_Z3b6f95vWHGwhNO6qdz5EOxK6-_sma61zL2uQpHb637v0ICfwgFRDE_4as0bq2i5vT-dGCv5jvDjmM-b1mjjeXXC6Z7EYLN-DYp38kIzrxFoQkX0_eNd2fIIeKZshthvGmAw5yEr6opkOnbXyEaqgiMOM9ZhVWO6UYseOEgE0GdDnXgoBeYjFXkZ1FDlkyXihNv6tEU5TQCkPt1iUdeOu_dL6OdvaH91wQjeDxeej3qVyvSJaWAjnA\n```\n\n其中 token 值即为对应的授权口令。\n\n### 访问 Dashboard\n\n拷贝 `$HOME/.kube/config` 文件至主机的某一个目录下，比如 `/path/to/kube` ，然后使用 `kubectl proxy` 启动代理，具体命令如下：\n\n```bash\n$ kubectl --kubeconfig=/path/to/kube/config proxy\nStarting to serve on 127.0.0.1:8001\n```\n\n这时，访问 http://localhost:8001/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy/ 进入 Dashboard 并使用 上面的 Token（令牌） 进行登录：\n\n![](install-k8s-using-kubeadm/dashboard-login.png)\n\n点击`登录`按钮进入 Dashboard 主页，我们就可以在这里管理 Kubernetes 集群了，Dashboard 主页截图如下所示。\n\n![](install-k8s-using-kubeadm/dashboard-home.png)\n\n\n\n## 验证 Kubernetes\n\n本节将快速地向 Kubernetes 集群部署一个示例应用来验证集群是否工作正常。示例应用取自《Kubernetes 本地快速搭建指南》案例。\n\n### 快速部署示例应用\n\n示例应用的 yaml 定义如下，读者可将其另存为文件 demo.yaml，以供后面使用。\n\n```yaml\napiVersion: v1\nkind: ReplicationController\nmetadata:\n  name: mysql\nspec:\n  replicas: 1\n  selector:\n    app: mysql\n  template:\n    metadata:\n      labels:\n        app: mysql\n    spec:\n        containers:\n        - name: mysql\n          image: mysql\n          ports:\n          - containerPort: 3306\n          env:\n          - name: MYSQL_ROOT_PASSWORD\n            value: \"123456\"\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: mysql\nspec:\n  ports:\n  - port: 3306\n  selector:\n    app: mysql\n---\napiVersion: v1\nkind: ReplicationController\nmetadata:\n  name: myweb\nspec:\n  replicas: 2\n  selector: \n    app: myweb\n  template:\n    metadata:\n      labels:\n        app: myweb\n    spec:\n      containers:\n      - name: myweb\n        image: kubeguide/tomcat-app:v1\n        ports:\n        - containerPort: 8080\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: myweb\nspec:\n  type: NodePort\n  ports:\n  - port: 8080\n    nodePort: 30001\n  selector:\n    app: myweb\n```\n\n使用以下命令部署应用：\n\n```bash\nkubectl create -f /path/to/demo.yaml\n```\n\n\n\n### 访问应用主页\n\n经过以上的步骤，我们的应用就成功地部署在了 Kubernetes 集群上了，我们可以访问 http://<虚拟机 IP>:30001/demo/ 来验证我们的应用了。\n\n![](install-k8s-using-kubeadm/demo.png)\n\n","slug":"install-k8s-using-kubeadm","published":1,"updated":"2020-03-23T15:37:46.321Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmasb6npp000i7sosh2ew3xt2","content":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>本教程将利用 Kubernetes 官方认为安装部署集群环境的最佳实践 - kubeadm 进行环境搭建。安装成功之后，我们仍然使用《Kubernetes 本地快速搭建指南》中所介绍的 Web 应用示例来部署至集群环境中，并以此确认集群是否可用。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"kubeadm-简介\"><a href=\"#kubeadm-简介\" class=\"headerlink\" title=\"kubeadm 简介\"></a>kubeadm 简介</h3><p>在 CentOS / RHEL 环境中，安装 Kubernetes 的最简单的方式就是通过 <code>yum install kubernetes</code> 来完成，但仍然需要修改各个组件的启动参数，才能完成 Kubernetes 集群的设置，整个过程较为复杂，也容易出错。因此，从 Kubernetes v1.4 版本开始，官方正式引入了命令行工具 kubeadm ，致力于简化集群环境的安装和解决 Kubernetes 集群的高可用的问题。但直到 v1.9 版本，此工具还不能用于生产环境。按照官方的计划，此工具将会在 2018 年内正式面向生产环境推出。所以在现阶段，此工具比较适合初学者安装和学习 Kubernetes。</p>\n<h3 id=\"kubeadm-版本\"><a href=\"#kubeadm-版本\" class=\"headerlink\" title=\"kubeadm 版本\"></a>kubeadm 版本</h3><p>本教程将使用 kubeadm 的 <code>v1.9.2</code> 版本安装 Kubernetes 集群。在默认情况下，使用 kubeadm 安装的 Kubernetes 的主版本和 kubeadm 相一致，此处为 <code>v1.9.x</code> 。如果读者想要安装其他的版本，则使用 <code>--kubernetes-version</code> 参数来指定 Kubernetes 的版本。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubeadm init --kubernetes-version=vx.y.z</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h2><p>本教程将使用64位的 CentOS 7 操作系统作为安装环境，读者可以根据实际情况来进行准备。笔者个人推荐 VirtualBox + Vagrant 在本机快速搭建环境，具体可以参考《Kubernetes 本地快速搭建指南》，此处不再赘述。</p>\n<h2 id=\"安装-kubeadm\"><a href=\"#安装-kubeadm\" class=\"headerlink\" title=\"安装 kubeadm\"></a>安装 kubeadm</h2><p>本节将详细介绍 kubeadm 在 CentOS 7 下的安装步骤。</p>\n<h3 id=\"设置主机名称\"><a href=\"#设置主机名称\" class=\"headerlink\" title=\"设置主机名称\"></a>设置主机名称</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hostnamectl set-hostname kubeadm-master</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;127.0.0.1 kubeadm-master&quot;</span> &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"关闭-SELinux\"><a href=\"#关闭-SELinux\" class=\"headerlink\" title=\"关闭 SELinux\"></a>关闭 SELinux</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setenforce 0</span><br><span class=\"line\">sed -i <span class=\"string\">&#x27;s/SELINUX=enforcing/SELINUX=permissive/g&#x27;</span> /etc/selinux/config</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"禁用-SWAP\"><a href=\"#禁用-SWAP\" class=\"headerlink\" title=\"禁用 SWAP\"></a>禁用 SWAP</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">swapoff -a</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"禁用防火墙\"><a href=\"#禁用防火墙\" class=\"headerlink\" title=\"禁用防火墙\"></a>禁用防火墙</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl <span class=\"built_in\">disable</span> firewalld</span><br><span class=\"line\">systemctl stop firewalld</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"微调内核设置\"><a href=\"#微调内核设置\" class=\"headerlink\" title=\"微调内核设置\"></a>微调内核设置</h3><p>对于 RHEL/CentOS 系统，由于 iptables 的设置，网络流量可能被错误的路由，因此要对内核进行如下调整：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &lt;&lt;<span class=\"string\">EOF &gt;  /etc/sysctl.d/k8s.conf</span></span><br><span class=\"line\"><span class=\"string\">net.bridge.bridge-nf-call-ip6tables = 1</span></span><br><span class=\"line\"><span class=\"string\">net.bridge.bridge-nf-call-iptables = 1</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\">sysctl --system</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装依赖的程序包\"><a href=\"#安装依赖的程序包\" class=\"headerlink\" title=\"安装依赖的程序包\"></a>安装依赖的程序包</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y update &amp;&amp; yum -y upgrade</span><br><span class=\"line\">yum -y install docker socat</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"离线安装-kubeadm\"><a href=\"#离线安装-kubeadm\" class=\"headerlink\" title=\"离线安装 kubeadm\"></a>离线安装 kubeadm</h3><p>官方推荐设置 yum 源进行 kubeadm 的安装，不过在国内的网络环境下，谷歌的服务无法被正确的访问。此处采用离线安装方式安装 rpm 包。读者可以前往 <a href=\"https://pan.baidu.com/s/1kWfpPdl\">https://pan.baidu.com/s/1kWfpPdl</a> 进行下载。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -ivh /path/to/kubectl-1.9.2-0.x86_64.rpm \\</span><br><span class=\"line\">         /path/to/kubernetes-cni-0.6.0-0.x86_64.rpm \\</span><br><span class=\"line\">         /path/to/kubelet-1.9.2-0.x86_64.rpm \\</span><br><span class=\"line\">         /path/to/kubeadm-1.9.2-0.x86_64.rpm</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"启动-kubeadm\"><a href=\"#启动-kubeadm\" class=\"headerlink\" title=\"启动 kubeadm\"></a>启动 kubeadm</h2><p>本节将对 kubeadm 启动前进行参数配置，同时将 Kubernetes 的附加功 Dashboard 也同时进行部署。</p>\n<h3 id=\"设置-Docker-镜像加速器\"><a href=\"#设置-Docker-镜像加速器\" class=\"headerlink\" title=\"设置 Docker 镜像加速器\"></a>设置 Docker 镜像加速器</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &lt;&lt;<span class=\"string\">EOF &gt; /etc/docker/daemon.json</span></span><br><span class=\"line\"><span class=\"string\">&#123;</span></span><br><span class=\"line\"><span class=\"string\">  &quot;registry-mirrors&quot; : [</span></span><br><span class=\"line\"><span class=\"string\">    &quot;http://4a0fee72.m.daocloud.io&quot;</span></span><br><span class=\"line\"><span class=\"string\">  ]</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"启动-docker-和-kubelet-服务\"><a href=\"#启动-docker-和-kubelet-服务\" class=\"headerlink\" title=\"启动 docker 和 kubelet 服务\"></a>启动 docker 和 kubelet 服务</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl <span class=\"built_in\">enable</span> docker &amp;&amp; systemctl start docker</span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> kubelet &amp;&amp; systemctl start kubelet</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"导入-Docker-镜像\"><a href=\"#导入-Docker-镜像\" class=\"headerlink\" title=\"导入 Docker 镜像\"></a>导入 Docker 镜像</h3><p>由于谷歌服务无法访问，因此相关的 Docker 镜像需要通过代理提前下载好，并进行打包。读者可以从 <a href=\"https://pan.baidu.com/s/1kWfpPdl\">https://pan.baidu.com/s/1kWfpPdl</a> 进行下载。导入镜像命令如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker load -i /path/to/kubeadm/v1.9.2/docker-images.tar</span><br><span class=\"line\">Loaded image: gcr.io/google_containers/k8s-dns-sidecar-amd64:1.14.7</span><br><span class=\"line\">Loaded image: gcr.io/google_containers/k8s-dns-kube-dns-amd64:1.14.7</span><br><span class=\"line\">Loaded image: gcr.io/google_containers/k8s-dns-dnsmasq-nanny-amd64:1.14.7</span><br><span class=\"line\">Loaded image: gcr.io/google_containers/etcd-amd64:3.1.11</span><br><span class=\"line\">Loaded image: gcr.io/google_containers/kube-controller-manager-amd64:v1.9.2</span><br><span class=\"line\">Loaded image: gcr.io/google_containers/kube-scheduler-amd64:v1.9.2</span><br><span class=\"line\">Loaded image: k8s.gcr.io/kubernetes-dashboard-amd64:v1.8.2</span><br><span class=\"line\">Loaded image: gcr.io/google_containers/kube-proxy-amd64:v1.9.2</span><br><span class=\"line\">Loaded image: gcr.io/google_containers/kube-apiserver-amd64:v1.9.2</span><br><span class=\"line\">Loaded image: gcr.io/google_containers/pause-amd64:3.0</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"启动-kubeadm-1\"><a href=\"#启动-kubeadm-1\" class=\"headerlink\" title=\"启动 kubeadm\"></a>启动 kubeadm</h3><p>使用 <code>kubeadm init</code> 初始化并启动 Kubernetes 集群。其中的几个重要参数选项列示如下：</p>\n<table>\n<thead>\n<tr>\n<th>参数选项</th>\n<th>参考值</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>--kubernetes-version</code></td>\n<td>v1.9.2</td>\n<td>Kubernetes 的版本</td>\n</tr>\n<tr>\n<td><code>--pod-network-cidr</code></td>\n<td>10.244.0.0/16</td>\n<td>Pod 网络寻址范围，此处是网络插件 Flannel 用到</td>\n</tr>\n<tr>\n<td><code>--apiserver-advertise-address</code></td>\n<td>CentOS 主机的 IP</td>\n<td>Kubernetes 集群的 apiserver (主节点) 的地址</td>\n</tr>\n</tbody></table>\n<p>启动 kubeadm 的命令如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubeadm init \\</span><br><span class=\"line\">  --kubernetes-version=v1.9.2 \\</span><br><span class=\"line\">  --pod-network-cidr=10.244.0.0/16 \\</span><br><span class=\"line\">  --apiserver-advertise-address=192.168.119.101</span><br><span class=\"line\"><span class=\"comment\"># 以下是 kubeadm 初始化时的输出信息</span></span><br><span class=\"line\">[init] Using Kubernetes version: v1.9.2</span><br><span class=\"line\">[init] Using Authorization modes: [Node RBAC]</span><br><span class=\"line\">[preflight] Running pre-flight checks.</span><br><span class=\"line\">[WARNING FileExisting-crictl]: crictl not found <span class=\"keyword\">in</span> system path</span><br><span class=\"line\">[certificates] Generated ca certificate and key.</span><br><span class=\"line\">[certificates] Generated apiserver certificate and key.</span><br><span class=\"line\">[certificates] apiserver serving cert is signed <span class=\"keyword\">for</span> DNS names [kubeadm-master kubernetes kubernetes.default kubernetes.default.svc kubernetes.default.svc.cluster.local] and IPs [10.96.0.1 192.168.119.101]</span><br><span class=\"line\">[certificates] Generated apiserver-kubelet-client certificate and key.</span><br><span class=\"line\">[certificates] Generated sa key and public key.</span><br><span class=\"line\">[certificates] Generated front-proxy-ca certificate and key.</span><br><span class=\"line\">[certificates] Generated front-proxy-client certificate and key.</span><br><span class=\"line\">[certificates] Valid certificates and keys now exist <span class=\"keyword\">in</span> <span class=\"string\">&quot;/etc/kubernetes/pki&quot;</span></span><br><span class=\"line\">[kubeconfig] Wrote KubeConfig file to disk: <span class=\"string\">&quot;admin.conf&quot;</span></span><br><span class=\"line\">[kubeconfig] Wrote KubeConfig file to disk: <span class=\"string\">&quot;kubelet.conf&quot;</span></span><br><span class=\"line\">[kubeconfig] Wrote KubeConfig file to disk: <span class=\"string\">&quot;controller-manager.conf&quot;</span></span><br><span class=\"line\">[kubeconfig] Wrote KubeConfig file to disk: <span class=\"string\">&quot;scheduler.conf&quot;</span></span><br><span class=\"line\">[controlplane] Wrote Static Pod manifest <span class=\"keyword\">for</span> component kube-apiserver to <span class=\"string\">&quot;/etc/kubernetes/manifests/kube-apiserver.yaml&quot;</span></span><br><span class=\"line\">[controlplane] Wrote Static Pod manifest <span class=\"keyword\">for</span> component kube-controller-manager to <span class=\"string\">&quot;/etc/kubernetes/manifests/kube-controller-manager.yaml&quot;</span></span><br><span class=\"line\">[controlplane] Wrote Static Pod manifest <span class=\"keyword\">for</span> component kube-scheduler to <span class=\"string\">&quot;/etc/kubernetes/manifests/kube-scheduler.yaml&quot;</span></span><br><span class=\"line\">[etcd] Wrote Static Pod manifest <span class=\"keyword\">for</span> a <span class=\"built_in\">local</span> etcd instance to <span class=\"string\">&quot;/etc/kubernetes/manifests/etcd.yaml&quot;</span></span><br><span class=\"line\">[init] Waiting <span class=\"keyword\">for</span> the kubelet to boot up the control plane as Static Pods from directory <span class=\"string\">&quot;/etc/kubernetes/manifests&quot;</span>.</span><br><span class=\"line\">[init] This might take a minute or longer <span class=\"keyword\">if</span> the control plane images have to be pulled.</span><br><span class=\"line\">[apiclient] All control plane components are healthy after 30.502464 seconds</span><br><span class=\"line\">[uploadconfig] Storing the configuration used <span class=\"keyword\">in</span> ConfigMap <span class=\"string\">&quot;kubeadm-config&quot;</span> <span class=\"keyword\">in</span> the <span class=\"string\">&quot;kube-system&quot;</span> Namespace</span><br><span class=\"line\">[markmaster] Will mark node kubeadm-master as master by adding a label and a taint</span><br><span class=\"line\">[markmaster] Master kubeadm-master tainted and labelled with key/value: node-role.kubernetes.io/master=<span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">[bootstraptoken] Using token: 3a9f97.1cd340e0f34adbbb</span><br><span class=\"line\">[bootstraptoken] Configured RBAC rules to allow Node Bootstrap tokens to post CSRs <span class=\"keyword\">in</span> order <span class=\"keyword\">for</span> nodes to get long term certificate credentials</span><br><span class=\"line\">[bootstraptoken] Configured RBAC rules to allow the csrapprover controller automatically approve CSRs from a Node Bootstrap Token</span><br><span class=\"line\">[bootstraptoken] Configured RBAC rules to allow certificate rotation <span class=\"keyword\">for</span> all node client certificates <span class=\"keyword\">in</span> the cluster</span><br><span class=\"line\">[bootstraptoken] Creating the <span class=\"string\">&quot;cluster-info&quot;</span> ConfigMap <span class=\"keyword\">in</span> the <span class=\"string\">&quot;kube-public&quot;</span> namespace</span><br><span class=\"line\">[addons] Applied essential addon: kube-dns</span><br><span class=\"line\">[addons] Applied essential addon: kube-proxy</span><br><span class=\"line\"></span><br><span class=\"line\">Your Kubernetes master has initialized successfully!</span><br><span class=\"line\"></span><br><span class=\"line\">To start using your cluster, you need to run the following as a regular user:</span><br><span class=\"line\"></span><br><span class=\"line\">mkdir -p <span class=\"variable\">$HOME</span>/.kube</span><br><span class=\"line\">sudo cp -i /etc/kubernetes/admin.conf <span class=\"variable\">$HOME</span>/.kube/config</span><br><span class=\"line\">sudo chown $(id -u):$(id -g) <span class=\"variable\">$HOME</span>/.kube/config</span><br><span class=\"line\"></span><br><span class=\"line\">You should now deploy a pod network to the cluster.</span><br><span class=\"line\">Run <span class=\"string\">&quot;kubectl apply -f [podnetwork].yaml&quot;</span> with one of the options listed at:</span><br><span class=\"line\">https://kubernetes.io/docs/concepts/cluster-administration/addons/</span><br><span class=\"line\"></span><br><span class=\"line\">You can now join any number of machines by running the following on each node</span><br><span class=\"line\">as root:</span><br><span class=\"line\"></span><br><span class=\"line\">kubeadm join --token 3a9f97.1cd340e0f34adbbb 192.168.119.101:6443 --discovery-token-ca-cert-hash sha256:64111962ff9df5f566d21f5ad5e9d046487aff4553a738f5c6d1ca0fdc4c69b8</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"用户设置\"><a href=\"#用户设置\" class=\"headerlink\" title=\"用户设置\"></a>用户设置</h3><p>拷贝 Kubernetes 的配置文件至当前用户的目录下，使当前用户可以正确使用 kubectl 进行操作。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p <span class=\"variable\">$HOME</span>/.kube</span><br><span class=\"line\">sudo cp -i /etc/kubernetes/admin.conf <span class=\"variable\">$HOME</span>/.kube/config</span><br><span class=\"line\">sudo chown $(id -u):$(id -g) <span class=\"variable\">$HOME</span>/.kube/config</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置单节点集群\"><a href=\"#配置单节点集群\" class=\"headerlink\" title=\"配置单节点集群\"></a>配置单节点集群</h3><p>默认情况下，master 主节点是不参与工作负载的，如果用户在本地配置的是一个单节点集群，那么需要将 master 主节点同时设置成工作节点，命令如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl taint nodes --all node-role.kubernetes.io/master-</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>如果想配置多节点的集群，则需要在工作节点安装 kubeadm, kubelet, kubectl 和 docker，然后使用主节点运行 <code>kubeadm init</code> 命令所打印出来的 <code>join</code> 命令来加入集群：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubeadm join --token 3a9f97.1cd340e0f34adbbb 192.168.119.101:6443 --discovery-token-ca-cert-hash sha256:64111962ff9df5f566d21f5ad5e9d046487aff4553a738f5c6d1ca0fdc4c69b8</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h3 id=\"部署附加组件\"><a href=\"#部署附加组件\" class=\"headerlink\" title=\"部署附加组件\"></a>部署附加组件</h3><p>安装 Flannel 网络插件和 Dashboard 插件。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装 Flannel</span></span><br><span class=\"line\">kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</span><br><span class=\"line\"><span class=\"comment\"># 安装 Dashboard</span></span><br><span class=\"line\">kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/master/src/deploy/recommended/kubernetes-dashboard.yaml</span><br><span class=\"line\"><span class=\"comment\"># 创建 admin-user 管理员角色</span></span><br><span class=\"line\">kubectl apply -f /path/to/admin-user-role.yaml</span><br></pre></td></tr></table></figure>\n\n<p>admin-user-role.yaml 的定义如下：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ServiceAccount</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">admin-user</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kube-system</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">rbac.authorization.k8s.io/v1beta1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ClusterRoleBinding</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">admin-user</span></span><br><span class=\"line\"><span class=\"attr\">roleRef:</span></span><br><span class=\"line\">  <span class=\"attr\">apiGroup:</span> <span class=\"string\">rbac.authorization.k8s.io</span></span><br><span class=\"line\">  <span class=\"attr\">kind:</span> <span class=\"string\">ClusterRole</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">cluster-admin</span></span><br><span class=\"line\"><span class=\"attr\">subjects:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">kind:</span> <span class=\"string\">ServiceAccount</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">admin-user</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kube-system</span></span><br></pre></td></tr></table></figure>\n\n<p>使用如下命令获取 admin-user 管理员角色的访问口令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl -n kube-system describe secret $(kubectl -n kube-system get secret | grep admin-user | awk <span class=\"string\">&#x27;&#123;print $1&#125;&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\"># 输出如下</span></span><br><span class=\"line\">Name:         admin-user-token-j6rlh</span><br><span class=\"line\">Namespace:    kube-system</span><br><span class=\"line\">Labels:       &lt;none&gt;</span><br><span class=\"line\">Annotations:  kubernetes.io/service-account.name=admin-user</span><br><span class=\"line\">              kubernetes.io/service-account.uid=111eba61-0d3e-11e8-8763-525400ad3b43</span><br><span class=\"line\"></span><br><span class=\"line\">Type:  kubernetes.io/service-account-token</span><br><span class=\"line\"></span><br><span class=\"line\">Data</span><br><span class=\"line\">====</span><br><span class=\"line\">ca.crt:     1025 bytes</span><br><span class=\"line\">namespace:  11 bytes</span><br><span class=\"line\">token:      eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlLXN5c3RlbSIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJhZG1pbi11c2VyLXRva2VuLWo2cmxoIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6ImFkbWluLXVzZXIiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC51aWQiOiIxMTFlYmE2MS0wZDNlLTExZTgtODc2My01MjU0MDBhZDNiNDMiLCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6a3ViZS1zeXN0ZW06YWRtaW4tdXNlciJ9.qY-6JaTSqpybnhusvOnNkcw7AE1iHGkBZObO62Vo9XZUEK95NlHaaIj7v8kyNLHujpHuVgTYQPyMBvPzU5JONzdEP5U2K5Q_Z3b6f95vWHGwhNO6qdz5EOxK6-_sma61zL2uQpHb637v0ICfwgFRDE_4as0bq2i5vT-dGCv5jvDjmM-b1mjjeXXC6Z7EYLN-DYp38kIzrxFoQkX0_eNd2fIIeKZshthvGmAw5yEr6opkOnbXyEaqgiMOM9ZhVWO6UYseOEgE0GdDnXgoBeYjFXkZ1FDlkyXihNv6tEU5TQCkPt1iUdeOu_dL6OdvaH91wQjeDxeej3qVyvSJaWAjnA</span><br></pre></td></tr></table></figure>\n\n<p>其中 token 值即为对应的授权口令。</p>\n<h3 id=\"访问-Dashboard\"><a href=\"#访问-Dashboard\" class=\"headerlink\" title=\"访问 Dashboard\"></a>访问 Dashboard</h3><p>拷贝 <code>$HOME/.kube/config</code> 文件至主机的某一个目录下，比如 <code>/path/to/kube</code> ，然后使用 <code>kubectl proxy</code> 启动代理，具体命令如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl --kubeconfig=/path/to/kube/config proxy</span><br><span class=\"line\">Starting to serve on 127.0.0.1:8001</span><br></pre></td></tr></table></figure>\n\n<p>这时，访问 <a href=\"http://localhost:8001/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy/\">http://localhost:8001/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy/</a> 进入 Dashboard 并使用 上面的 Token（令牌） 进行登录：</p>\n<p><img data-src=\"/2018/10/02/install-k8s-using-kubeadm/dashboard-login.png\"></p>\n<p>点击<code>登录</code>按钮进入 Dashboard 主页，我们就可以在这里管理 Kubernetes 集群了，Dashboard 主页截图如下所示。</p>\n<p><img data-src=\"/2018/10/02/install-k8s-using-kubeadm/dashboard-home.png\"></p>\n<h2 id=\"验证-Kubernetes\"><a href=\"#验证-Kubernetes\" class=\"headerlink\" title=\"验证 Kubernetes\"></a>验证 Kubernetes</h2><p>本节将快速地向 Kubernetes 集群部署一个示例应用来验证集群是否工作正常。示例应用取自《Kubernetes 本地快速搭建指南》案例。</p>\n<h3 id=\"快速部署示例应用\"><a href=\"#快速部署示例应用\" class=\"headerlink\" title=\"快速部署示例应用\"></a>快速部署示例应用</h3><p>示例应用的 yaml 定义如下，读者可将其另存为文件 demo.yaml，以供后面使用。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ReplicationController</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">        <span class=\"attr\">containers:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\">          <span class=\"attr\">image:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\">          <span class=\"attr\">ports:</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">3306</span></span><br><span class=\"line\">          <span class=\"attr\">env:</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">MYSQL_ROOT_PASSWORD</span></span><br><span class=\"line\">            <span class=\"attr\">value:</span> <span class=\"string\">&quot;123456&quot;</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">port:</span> <span class=\"number\">3306</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ReplicationController</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">myweb</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">2</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span> </span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">myweb</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">myweb</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">myweb</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">kubeguide/tomcat-app:v1</span></span><br><span class=\"line\">        <span class=\"attr\">ports:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">8080</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">myweb</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">NodePort</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">port:</span> <span class=\"number\">8080</span></span><br><span class=\"line\">    <span class=\"attr\">nodePort:</span> <span class=\"number\">30001</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">myweb</span></span><br></pre></td></tr></table></figure>\n\n<p>使用以下命令部署应用：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl create -f /path/to/demo.yaml</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"访问应用主页\"><a href=\"#访问应用主页\" class=\"headerlink\" title=\"访问应用主页\"></a>访问应用主页</h3><p>经过以上的步骤，我们的应用就成功地部署在了 Kubernetes 集群上了，我们可以访问 http://&lt;虚拟机 IP&gt;:30001/demo/ 来验证我们的应用了。</p>\n<p><img data-src=\"/2018/10/02/install-k8s-using-kubeadm/demo.png\"></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>本教程将利用 Kubernetes 官方认为安装部署集群环境的最佳实践 - kubeadm 进行环境搭建。安装成功之后，我们仍然使用《Kubernetes 本地快速搭建指南》中所介绍的 Web 应用示例来部署至集群环境中，并以此确认集群是否可用。</p>","more":"<h3 id=\"kubeadm-简介\"><a href=\"#kubeadm-简介\" class=\"headerlink\" title=\"kubeadm 简介\"></a>kubeadm 简介</h3><p>在 CentOS / RHEL 环境中，安装 Kubernetes 的最简单的方式就是通过 <code>yum install kubernetes</code> 来完成，但仍然需要修改各个组件的启动参数，才能完成 Kubernetes 集群的设置，整个过程较为复杂，也容易出错。因此，从 Kubernetes v1.4 版本开始，官方正式引入了命令行工具 kubeadm ，致力于简化集群环境的安装和解决 Kubernetes 集群的高可用的问题。但直到 v1.9 版本，此工具还不能用于生产环境。按照官方的计划，此工具将会在 2018 年内正式面向生产环境推出。所以在现阶段，此工具比较适合初学者安装和学习 Kubernetes。</p>\n<h3 id=\"kubeadm-版本\"><a href=\"#kubeadm-版本\" class=\"headerlink\" title=\"kubeadm 版本\"></a>kubeadm 版本</h3><p>本教程将使用 kubeadm 的 <code>v1.9.2</code> 版本安装 Kubernetes 集群。在默认情况下，使用 kubeadm 安装的 Kubernetes 的主版本和 kubeadm 相一致，此处为 <code>v1.9.x</code> 。如果读者想要安装其他的版本，则使用 <code>--kubernetes-version</code> 参数来指定 Kubernetes 的版本。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubeadm init --kubernetes-version=vx.y.z</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h2><p>本教程将使用64位的 CentOS 7 操作系统作为安装环境，读者可以根据实际情况来进行准备。笔者个人推荐 VirtualBox + Vagrant 在本机快速搭建环境，具体可以参考《Kubernetes 本地快速搭建指南》，此处不再赘述。</p>\n<h2 id=\"安装-kubeadm\"><a href=\"#安装-kubeadm\" class=\"headerlink\" title=\"安装 kubeadm\"></a>安装 kubeadm</h2><p>本节将详细介绍 kubeadm 在 CentOS 7 下的安装步骤。</p>\n<h3 id=\"设置主机名称\"><a href=\"#设置主机名称\" class=\"headerlink\" title=\"设置主机名称\"></a>设置主机名称</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hostnamectl set-hostname kubeadm-master</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;127.0.0.1 kubeadm-master&quot;</span> &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"关闭-SELinux\"><a href=\"#关闭-SELinux\" class=\"headerlink\" title=\"关闭 SELinux\"></a>关闭 SELinux</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setenforce 0</span><br><span class=\"line\">sed -i <span class=\"string\">&#x27;s/SELINUX=enforcing/SELINUX=permissive/g&#x27;</span> /etc/selinux/config</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"禁用-SWAP\"><a href=\"#禁用-SWAP\" class=\"headerlink\" title=\"禁用 SWAP\"></a>禁用 SWAP</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">swapoff -a</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"禁用防火墙\"><a href=\"#禁用防火墙\" class=\"headerlink\" title=\"禁用防火墙\"></a>禁用防火墙</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl <span class=\"built_in\">disable</span> firewalld</span><br><span class=\"line\">systemctl stop firewalld</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"微调内核设置\"><a href=\"#微调内核设置\" class=\"headerlink\" title=\"微调内核设置\"></a>微调内核设置</h3><p>对于 RHEL/CentOS 系统，由于 iptables 的设置，网络流量可能被错误的路由，因此要对内核进行如下调整：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &lt;&lt;<span class=\"string\">EOF &gt;  /etc/sysctl.d/k8s.conf</span></span><br><span class=\"line\"><span class=\"string\">net.bridge.bridge-nf-call-ip6tables = 1</span></span><br><span class=\"line\"><span class=\"string\">net.bridge.bridge-nf-call-iptables = 1</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\">sysctl --system</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装依赖的程序包\"><a href=\"#安装依赖的程序包\" class=\"headerlink\" title=\"安装依赖的程序包\"></a>安装依赖的程序包</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y update &amp;&amp; yum -y upgrade</span><br><span class=\"line\">yum -y install docker socat</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"离线安装-kubeadm\"><a href=\"#离线安装-kubeadm\" class=\"headerlink\" title=\"离线安装 kubeadm\"></a>离线安装 kubeadm</h3><p>官方推荐设置 yum 源进行 kubeadm 的安装，不过在国内的网络环境下，谷歌的服务无法被正确的访问。此处采用离线安装方式安装 rpm 包。读者可以前往 <a href=\"https://pan.baidu.com/s/1kWfpPdl\">https://pan.baidu.com/s/1kWfpPdl</a> 进行下载。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -ivh /path/to/kubectl-1.9.2-0.x86_64.rpm \\</span><br><span class=\"line\">         /path/to/kubernetes-cni-0.6.0-0.x86_64.rpm \\</span><br><span class=\"line\">         /path/to/kubelet-1.9.2-0.x86_64.rpm \\</span><br><span class=\"line\">         /path/to/kubeadm-1.9.2-0.x86_64.rpm</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"启动-kubeadm\"><a href=\"#启动-kubeadm\" class=\"headerlink\" title=\"启动 kubeadm\"></a>启动 kubeadm</h2><p>本节将对 kubeadm 启动前进行参数配置，同时将 Kubernetes 的附加功 Dashboard 也同时进行部署。</p>\n<h3 id=\"设置-Docker-镜像加速器\"><a href=\"#设置-Docker-镜像加速器\" class=\"headerlink\" title=\"设置 Docker 镜像加速器\"></a>设置 Docker 镜像加速器</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &lt;&lt;<span class=\"string\">EOF &gt; /etc/docker/daemon.json</span></span><br><span class=\"line\"><span class=\"string\">&#123;</span></span><br><span class=\"line\"><span class=\"string\">  &quot;registry-mirrors&quot; : [</span></span><br><span class=\"line\"><span class=\"string\">    &quot;http://4a0fee72.m.daocloud.io&quot;</span></span><br><span class=\"line\"><span class=\"string\">  ]</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"启动-docker-和-kubelet-服务\"><a href=\"#启动-docker-和-kubelet-服务\" class=\"headerlink\" title=\"启动 docker 和 kubelet 服务\"></a>启动 docker 和 kubelet 服务</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl <span class=\"built_in\">enable</span> docker &amp;&amp; systemctl start docker</span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> kubelet &amp;&amp; systemctl start kubelet</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"导入-Docker-镜像\"><a href=\"#导入-Docker-镜像\" class=\"headerlink\" title=\"导入 Docker 镜像\"></a>导入 Docker 镜像</h3><p>由于谷歌服务无法访问，因此相关的 Docker 镜像需要通过代理提前下载好，并进行打包。读者可以从 <a href=\"https://pan.baidu.com/s/1kWfpPdl\">https://pan.baidu.com/s/1kWfpPdl</a> 进行下载。导入镜像命令如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker load -i /path/to/kubeadm/v1.9.2/docker-images.tar</span><br><span class=\"line\">Loaded image: gcr.io/google_containers/k8s-dns-sidecar-amd64:1.14.7</span><br><span class=\"line\">Loaded image: gcr.io/google_containers/k8s-dns-kube-dns-amd64:1.14.7</span><br><span class=\"line\">Loaded image: gcr.io/google_containers/k8s-dns-dnsmasq-nanny-amd64:1.14.7</span><br><span class=\"line\">Loaded image: gcr.io/google_containers/etcd-amd64:3.1.11</span><br><span class=\"line\">Loaded image: gcr.io/google_containers/kube-controller-manager-amd64:v1.9.2</span><br><span class=\"line\">Loaded image: gcr.io/google_containers/kube-scheduler-amd64:v1.9.2</span><br><span class=\"line\">Loaded image: k8s.gcr.io/kubernetes-dashboard-amd64:v1.8.2</span><br><span class=\"line\">Loaded image: gcr.io/google_containers/kube-proxy-amd64:v1.9.2</span><br><span class=\"line\">Loaded image: gcr.io/google_containers/kube-apiserver-amd64:v1.9.2</span><br><span class=\"line\">Loaded image: gcr.io/google_containers/pause-amd64:3.0</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"启动-kubeadm-1\"><a href=\"#启动-kubeadm-1\" class=\"headerlink\" title=\"启动 kubeadm\"></a>启动 kubeadm</h3><p>使用 <code>kubeadm init</code> 初始化并启动 Kubernetes 集群。其中的几个重要参数选项列示如下：</p>\n<table>\n<thead>\n<tr>\n<th>参数选项</th>\n<th>参考值</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>--kubernetes-version</code></td>\n<td>v1.9.2</td>\n<td>Kubernetes 的版本</td>\n</tr>\n<tr>\n<td><code>--pod-network-cidr</code></td>\n<td>10.244.0.0/16</td>\n<td>Pod 网络寻址范围，此处是网络插件 Flannel 用到</td>\n</tr>\n<tr>\n<td><code>--apiserver-advertise-address</code></td>\n<td>CentOS 主机的 IP</td>\n<td>Kubernetes 集群的 apiserver (主节点) 的地址</td>\n</tr>\n</tbody></table>\n<p>启动 kubeadm 的命令如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubeadm init \\</span><br><span class=\"line\">  --kubernetes-version=v1.9.2 \\</span><br><span class=\"line\">  --pod-network-cidr=10.244.0.0/16 \\</span><br><span class=\"line\">  --apiserver-advertise-address=192.168.119.101</span><br><span class=\"line\"><span class=\"comment\"># 以下是 kubeadm 初始化时的输出信息</span></span><br><span class=\"line\">[init] Using Kubernetes version: v1.9.2</span><br><span class=\"line\">[init] Using Authorization modes: [Node RBAC]</span><br><span class=\"line\">[preflight] Running pre-flight checks.</span><br><span class=\"line\">[WARNING FileExisting-crictl]: crictl not found <span class=\"keyword\">in</span> system path</span><br><span class=\"line\">[certificates] Generated ca certificate and key.</span><br><span class=\"line\">[certificates] Generated apiserver certificate and key.</span><br><span class=\"line\">[certificates] apiserver serving cert is signed <span class=\"keyword\">for</span> DNS names [kubeadm-master kubernetes kubernetes.default kubernetes.default.svc kubernetes.default.svc.cluster.local] and IPs [10.96.0.1 192.168.119.101]</span><br><span class=\"line\">[certificates] Generated apiserver-kubelet-client certificate and key.</span><br><span class=\"line\">[certificates] Generated sa key and public key.</span><br><span class=\"line\">[certificates] Generated front-proxy-ca certificate and key.</span><br><span class=\"line\">[certificates] Generated front-proxy-client certificate and key.</span><br><span class=\"line\">[certificates] Valid certificates and keys now exist <span class=\"keyword\">in</span> <span class=\"string\">&quot;/etc/kubernetes/pki&quot;</span></span><br><span class=\"line\">[kubeconfig] Wrote KubeConfig file to disk: <span class=\"string\">&quot;admin.conf&quot;</span></span><br><span class=\"line\">[kubeconfig] Wrote KubeConfig file to disk: <span class=\"string\">&quot;kubelet.conf&quot;</span></span><br><span class=\"line\">[kubeconfig] Wrote KubeConfig file to disk: <span class=\"string\">&quot;controller-manager.conf&quot;</span></span><br><span class=\"line\">[kubeconfig] Wrote KubeConfig file to disk: <span class=\"string\">&quot;scheduler.conf&quot;</span></span><br><span class=\"line\">[controlplane] Wrote Static Pod manifest <span class=\"keyword\">for</span> component kube-apiserver to <span class=\"string\">&quot;/etc/kubernetes/manifests/kube-apiserver.yaml&quot;</span></span><br><span class=\"line\">[controlplane] Wrote Static Pod manifest <span class=\"keyword\">for</span> component kube-controller-manager to <span class=\"string\">&quot;/etc/kubernetes/manifests/kube-controller-manager.yaml&quot;</span></span><br><span class=\"line\">[controlplane] Wrote Static Pod manifest <span class=\"keyword\">for</span> component kube-scheduler to <span class=\"string\">&quot;/etc/kubernetes/manifests/kube-scheduler.yaml&quot;</span></span><br><span class=\"line\">[etcd] Wrote Static Pod manifest <span class=\"keyword\">for</span> a <span class=\"built_in\">local</span> etcd instance to <span class=\"string\">&quot;/etc/kubernetes/manifests/etcd.yaml&quot;</span></span><br><span class=\"line\">[init] Waiting <span class=\"keyword\">for</span> the kubelet to boot up the control plane as Static Pods from directory <span class=\"string\">&quot;/etc/kubernetes/manifests&quot;</span>.</span><br><span class=\"line\">[init] This might take a minute or longer <span class=\"keyword\">if</span> the control plane images have to be pulled.</span><br><span class=\"line\">[apiclient] All control plane components are healthy after 30.502464 seconds</span><br><span class=\"line\">[uploadconfig] Storing the configuration used <span class=\"keyword\">in</span> ConfigMap <span class=\"string\">&quot;kubeadm-config&quot;</span> <span class=\"keyword\">in</span> the <span class=\"string\">&quot;kube-system&quot;</span> Namespace</span><br><span class=\"line\">[markmaster] Will mark node kubeadm-master as master by adding a label and a taint</span><br><span class=\"line\">[markmaster] Master kubeadm-master tainted and labelled with key/value: node-role.kubernetes.io/master=<span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">[bootstraptoken] Using token: 3a9f97.1cd340e0f34adbbb</span><br><span class=\"line\">[bootstraptoken] Configured RBAC rules to allow Node Bootstrap tokens to post CSRs <span class=\"keyword\">in</span> order <span class=\"keyword\">for</span> nodes to get long term certificate credentials</span><br><span class=\"line\">[bootstraptoken] Configured RBAC rules to allow the csrapprover controller automatically approve CSRs from a Node Bootstrap Token</span><br><span class=\"line\">[bootstraptoken] Configured RBAC rules to allow certificate rotation <span class=\"keyword\">for</span> all node client certificates <span class=\"keyword\">in</span> the cluster</span><br><span class=\"line\">[bootstraptoken] Creating the <span class=\"string\">&quot;cluster-info&quot;</span> ConfigMap <span class=\"keyword\">in</span> the <span class=\"string\">&quot;kube-public&quot;</span> namespace</span><br><span class=\"line\">[addons] Applied essential addon: kube-dns</span><br><span class=\"line\">[addons] Applied essential addon: kube-proxy</span><br><span class=\"line\"></span><br><span class=\"line\">Your Kubernetes master has initialized successfully!</span><br><span class=\"line\"></span><br><span class=\"line\">To start using your cluster, you need to run the following as a regular user:</span><br><span class=\"line\"></span><br><span class=\"line\">mkdir -p <span class=\"variable\">$HOME</span>/.kube</span><br><span class=\"line\">sudo cp -i /etc/kubernetes/admin.conf <span class=\"variable\">$HOME</span>/.kube/config</span><br><span class=\"line\">sudo chown $(id -u):$(id -g) <span class=\"variable\">$HOME</span>/.kube/config</span><br><span class=\"line\"></span><br><span class=\"line\">You should now deploy a pod network to the cluster.</span><br><span class=\"line\">Run <span class=\"string\">&quot;kubectl apply -f [podnetwork].yaml&quot;</span> with one of the options listed at:</span><br><span class=\"line\">https://kubernetes.io/docs/concepts/cluster-administration/addons/</span><br><span class=\"line\"></span><br><span class=\"line\">You can now join any number of machines by running the following on each node</span><br><span class=\"line\">as root:</span><br><span class=\"line\"></span><br><span class=\"line\">kubeadm join --token 3a9f97.1cd340e0f34adbbb 192.168.119.101:6443 --discovery-token-ca-cert-hash sha256:64111962ff9df5f566d21f5ad5e9d046487aff4553a738f5c6d1ca0fdc4c69b8</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"用户设置\"><a href=\"#用户设置\" class=\"headerlink\" title=\"用户设置\"></a>用户设置</h3><p>拷贝 Kubernetes 的配置文件至当前用户的目录下，使当前用户可以正确使用 kubectl 进行操作。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p <span class=\"variable\">$HOME</span>/.kube</span><br><span class=\"line\">sudo cp -i /etc/kubernetes/admin.conf <span class=\"variable\">$HOME</span>/.kube/config</span><br><span class=\"line\">sudo chown $(id -u):$(id -g) <span class=\"variable\">$HOME</span>/.kube/config</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置单节点集群\"><a href=\"#配置单节点集群\" class=\"headerlink\" title=\"配置单节点集群\"></a>配置单节点集群</h3><p>默认情况下，master 主节点是不参与工作负载的，如果用户在本地配置的是一个单节点集群，那么需要将 master 主节点同时设置成工作节点，命令如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl taint nodes --all node-role.kubernetes.io/master-</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>如果想配置多节点的集群，则需要在工作节点安装 kubeadm, kubelet, kubectl 和 docker，然后使用主节点运行 <code>kubeadm init</code> 命令所打印出来的 <code>join</code> 命令来加入集群：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubeadm join --token 3a9f97.1cd340e0f34adbbb 192.168.119.101:6443 --discovery-token-ca-cert-hash sha256:64111962ff9df5f566d21f5ad5e9d046487aff4553a738f5c6d1ca0fdc4c69b8</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h3 id=\"部署附加组件\"><a href=\"#部署附加组件\" class=\"headerlink\" title=\"部署附加组件\"></a>部署附加组件</h3><p>安装 Flannel 网络插件和 Dashboard 插件。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装 Flannel</span></span><br><span class=\"line\">kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</span><br><span class=\"line\"><span class=\"comment\"># 安装 Dashboard</span></span><br><span class=\"line\">kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/master/src/deploy/recommended/kubernetes-dashboard.yaml</span><br><span class=\"line\"><span class=\"comment\"># 创建 admin-user 管理员角色</span></span><br><span class=\"line\">kubectl apply -f /path/to/admin-user-role.yaml</span><br></pre></td></tr></table></figure>\n\n<p>admin-user-role.yaml 的定义如下：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ServiceAccount</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">admin-user</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kube-system</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">rbac.authorization.k8s.io/v1beta1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ClusterRoleBinding</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">admin-user</span></span><br><span class=\"line\"><span class=\"attr\">roleRef:</span></span><br><span class=\"line\">  <span class=\"attr\">apiGroup:</span> <span class=\"string\">rbac.authorization.k8s.io</span></span><br><span class=\"line\">  <span class=\"attr\">kind:</span> <span class=\"string\">ClusterRole</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">cluster-admin</span></span><br><span class=\"line\"><span class=\"attr\">subjects:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">kind:</span> <span class=\"string\">ServiceAccount</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">admin-user</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kube-system</span></span><br></pre></td></tr></table></figure>\n\n<p>使用如下命令获取 admin-user 管理员角色的访问口令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl -n kube-system describe secret $(kubectl -n kube-system get secret | grep admin-user | awk <span class=\"string\">&#x27;&#123;print $1&#125;&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\"># 输出如下</span></span><br><span class=\"line\">Name:         admin-user-token-j6rlh</span><br><span class=\"line\">Namespace:    kube-system</span><br><span class=\"line\">Labels:       &lt;none&gt;</span><br><span class=\"line\">Annotations:  kubernetes.io/service-account.name=admin-user</span><br><span class=\"line\">              kubernetes.io/service-account.uid=111eba61-0d3e-11e8-8763-525400ad3b43</span><br><span class=\"line\"></span><br><span class=\"line\">Type:  kubernetes.io/service-account-token</span><br><span class=\"line\"></span><br><span class=\"line\">Data</span><br><span class=\"line\">====</span><br><span class=\"line\">ca.crt:     1025 bytes</span><br><span class=\"line\">namespace:  11 bytes</span><br><span class=\"line\">token:      eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlLXN5c3RlbSIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJhZG1pbi11c2VyLXRva2VuLWo2cmxoIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6ImFkbWluLXVzZXIiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC51aWQiOiIxMTFlYmE2MS0wZDNlLTExZTgtODc2My01MjU0MDBhZDNiNDMiLCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6a3ViZS1zeXN0ZW06YWRtaW4tdXNlciJ9.qY-6JaTSqpybnhusvOnNkcw7AE1iHGkBZObO62Vo9XZUEK95NlHaaIj7v8kyNLHujpHuVgTYQPyMBvPzU5JONzdEP5U2K5Q_Z3b6f95vWHGwhNO6qdz5EOxK6-_sma61zL2uQpHb637v0ICfwgFRDE_4as0bq2i5vT-dGCv5jvDjmM-b1mjjeXXC6Z7EYLN-DYp38kIzrxFoQkX0_eNd2fIIeKZshthvGmAw5yEr6opkOnbXyEaqgiMOM9ZhVWO6UYseOEgE0GdDnXgoBeYjFXkZ1FDlkyXihNv6tEU5TQCkPt1iUdeOu_dL6OdvaH91wQjeDxeej3qVyvSJaWAjnA</span><br></pre></td></tr></table></figure>\n\n<p>其中 token 值即为对应的授权口令。</p>\n<h3 id=\"访问-Dashboard\"><a href=\"#访问-Dashboard\" class=\"headerlink\" title=\"访问 Dashboard\"></a>访问 Dashboard</h3><p>拷贝 <code>$HOME/.kube/config</code> 文件至主机的某一个目录下，比如 <code>/path/to/kube</code> ，然后使用 <code>kubectl proxy</code> 启动代理，具体命令如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl --kubeconfig=/path/to/kube/config proxy</span><br><span class=\"line\">Starting to serve on 127.0.0.1:8001</span><br></pre></td></tr></table></figure>\n\n<p>这时，访问 <a href=\"http://localhost:8001/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy/\">http://localhost:8001/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy/</a> 进入 Dashboard 并使用 上面的 Token（令牌） 进行登录：</p>\n<p><img data-src=\"/2018/10/02/install-k8s-using-kubeadm/dashboard-login.png\"></p>\n<p>点击<code>登录</code>按钮进入 Dashboard 主页，我们就可以在这里管理 Kubernetes 集群了，Dashboard 主页截图如下所示。</p>\n<p><img data-src=\"/2018/10/02/install-k8s-using-kubeadm/dashboard-home.png\"></p>\n<h2 id=\"验证-Kubernetes\"><a href=\"#验证-Kubernetes\" class=\"headerlink\" title=\"验证 Kubernetes\"></a>验证 Kubernetes</h2><p>本节将快速地向 Kubernetes 集群部署一个示例应用来验证集群是否工作正常。示例应用取自《Kubernetes 本地快速搭建指南》案例。</p>\n<h3 id=\"快速部署示例应用\"><a href=\"#快速部署示例应用\" class=\"headerlink\" title=\"快速部署示例应用\"></a>快速部署示例应用</h3><p>示例应用的 yaml 定义如下，读者可将其另存为文件 demo.yaml，以供后面使用。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ReplicationController</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">        <span class=\"attr\">containers:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\">          <span class=\"attr\">image:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\">          <span class=\"attr\">ports:</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">3306</span></span><br><span class=\"line\">          <span class=\"attr\">env:</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">MYSQL_ROOT_PASSWORD</span></span><br><span class=\"line\">            <span class=\"attr\">value:</span> <span class=\"string\">&quot;123456&quot;</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">port:</span> <span class=\"number\">3306</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ReplicationController</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">myweb</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">2</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span> </span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">myweb</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">myweb</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">myweb</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">kubeguide/tomcat-app:v1</span></span><br><span class=\"line\">        <span class=\"attr\">ports:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">8080</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">myweb</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">NodePort</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">port:</span> <span class=\"number\">8080</span></span><br><span class=\"line\">    <span class=\"attr\">nodePort:</span> <span class=\"number\">30001</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">myweb</span></span><br></pre></td></tr></table></figure>\n\n<p>使用以下命令部署应用：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl create -f /path/to/demo.yaml</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"访问应用主页\"><a href=\"#访问应用主页\" class=\"headerlink\" title=\"访问应用主页\"></a>访问应用主页</h3><p>经过以上的步骤，我们的应用就成功地部署在了 Kubernetes 集群上了，我们可以访问 http://&lt;虚拟机 IP&gt;:30001/demo/ 来验证我们的应用了。</p>\n<p><img data-src=\"/2018/10/02/install-k8s-using-kubeadm/demo.png\"></p>"},{"title":"HZERO 服务端选配","date":"2025-05-15T07:52:25.000Z","_content":"\n选配地址：[汉得焱牛开放平台](https://hand.open.hand-china.com/publish-center/service-match/create)\n\n## 选配步骤\n\n![](hzero-service-match/2025-05-15-22-36-39-image.png)\n\nto-do...\n","source":"_posts/hzero-service-match.md","raw":"---\ntitle: HZERO 服务端选配\ndate: 2025-05-15 15:52:25\ncategories: HZERO\ntags:\n---\n\n选配地址：[汉得焱牛开放平台](https://hand.open.hand-china.com/publish-center/service-match/create)\n\n## 选配步骤\n\n![](hzero-service-match/2025-05-15-22-36-39-image.png)\n\nto-do...\n","slug":"hzero-service-match","published":1,"updated":"2025-05-17T14:12:54.515Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmasb6npq000m7sos0670ar63","content":"<p>选配地址：<a href=\"https://hand.open.hand-china.com/publish-center/service-match/create\">汉得焱牛开放平台</a></p>\n<h2 id=\"选配步骤\"><a href=\"#选配步骤\" class=\"headerlink\" title=\"选配步骤\"></a>选配步骤</h2><p><img data-src=\"/2025/05/15/hzero-service-match/2025-05-15-22-36-39-image.png\"></p>\n<p>to-do…</p>\n","site":{"data":{}},"excerpt":"","more":"<p>选配地址：<a href=\"https://hand.open.hand-china.com/publish-center/service-match/create\">汉得焱牛开放平台</a></p>\n<h2 id=\"选配步骤\"><a href=\"#选配步骤\" class=\"headerlink\" title=\"选配步骤\"></a>选配步骤</h2><p><img data-src=\"/2025/05/15/hzero-service-match/2025-05-15-22-36-39-image.png\"></p>\n<p>to-do…</p>\n"},{"title":"iTerm2 结合 Oh My Zsh 的主题配置实践","date":"2020-03-22T11:16:20.000Z","_content":"\n## 预期效果\n\n本文将介绍结合 `iTerm2` 和 `Oh My Zsh` 来美化 macOS 下的显示效果，先放一张最终效果图：\n\n![image-20200322200414320](iterm2-omz-style-guide/image-20200322200414320.png)\n\n接下来我们来看下针对 iTerms2 终端进行美化的具体步骤。\n<!-- more -->\n\n\n## 具体步骤\n\n### 0x00 下载软件\n\n- iTerm2: https://iterm2.com/downloads.html\n- Oh My Zsh (OMZ): https://ohmyz.sh/\n\n#### 安装 OMZ\n\n```shell\n$ sh -c \"$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\"\n```\n\n\n\n### 0x01 安装 OMZ 插件\n\n#### 下载插件\n\n```shell\n# 下载 OMZ 插件 zsh-syntax-highlighting\n# https://github.com/zsh-users/zsh-syntax-highlighting/blob/master/INSTALL.md\ngit clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting\n\n# 下载 OMZ 插件 zsh-autosuggestions\n# https://github.com/zsh-users/zsh-autosuggestions/blob/master/INSTALL.md\ngit clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions\n```\n\n#### 启用插件\n\n打开 `$HOME/.zshrc` 加入以下脚本内容：\n\n```shell\nplugins=(\n  git\n  autojump\n  osx\n  zsh-syntax-highlighting\n  zsh-autosuggestions\n)\n```\n\n\n\n### 0x02 安装 Nerd Fonts\n\n整个 Nerd Font 仓库将近 1G 大小，其中 99% 部分都是我们不需要的，因此我们没必要将整个仓库克隆至本地。我这里推荐使用的字体是 Adobe 的 `Source Code Pro` 和 微软公司的 `Cascadia Code`。为支持更丰富的显示，Nerd Font 提供了这两个字体的补丁字体（Patched Font），下载地址如下：\n\n- [Sauce Code Pro Nerd Font](https://github.com/ryanoasis/nerd-fonts/blob/master/patched-fonts/SourceCodePro/Regular/complete/Sauce%20Code%20Pro%20Nerd%20Font%20Complete.ttf)\n- [Caskaydia Cove Regular Nerd Font](https://github.com/ryanoasis/nerd-fonts/blob/master/patched-fonts/CascadiaCode/complete/Caskaydia%20Cove%20Regular%20Nerd%20Font%20Complete.ttf)\n\n\n\n### 0x03 配置 iTerm2\n\n`⌘`+`,` 打开 iTerm2 的设置界面，选择你当前的配置文件，这里推荐使用 `Socialized Dark`，之后按照如图所示选择正确的补丁字体，并勾选必要的勾选项：\n\n![image-20200322231555092](iterm2-omz-style-guide/image-20200322231555092.png)\n\n\n\n### 0x04 安装和配置 powerlevel9k 主题\n\n我们根据[官方指引](https://github.com/Powerlevel9k/powerlevel9k/wiki/Install-Instructions#option-2-install-for-oh-my-zsh)来为 OMZ 安装 powerlevel9k 主题：\n\n```shell\n$ git clone https://github.com/bhilburn/powerlevel9k.git ~/.oh-my-zsh/custom/themes/powerlevel9k\n```\n\n编辑 `$HOME/.zshrc` 文件，并加入以下内容：\n\n```shell\nPOWERLEVEL9K_MODE='nerdfont-complete'\nPOWERLEVEL9K_PROMPT_ON_NEWLINE=true\nPOWERLEVEL9K_MULTILINE_LAST_PROMPT_PREFIX=\"╰▸ \"\nPOWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(os_icon dir vcs)\nZSH_THEME=\"powerlevel9k/powerlevel9k\"\n```\n\n具体的参数解释可参见 powerlevel9k 的 [Wiki](https://github.com/Powerlevel9k/powerlevel9k/wiki/Stylizing-Your-Prompt)，最后就会得到文章开头的“预期效果”！","source":"_posts/iterm2-omz-style-guide.md","raw":"---\ntitle: iTerm2 结合 Oh My Zsh 的主题配置实践\ndate: 2020-03-22 19:16:20\ntags: \n- iterm2\n- on-my-zsh\ncategories: \n- macOS\n---\n\n## 预期效果\n\n本文将介绍结合 `iTerm2` 和 `Oh My Zsh` 来美化 macOS 下的显示效果，先放一张最终效果图：\n\n![image-20200322200414320](iterm2-omz-style-guide/image-20200322200414320.png)\n\n接下来我们来看下针对 iTerms2 终端进行美化的具体步骤。\n<!-- more -->\n\n\n## 具体步骤\n\n### 0x00 下载软件\n\n- iTerm2: https://iterm2.com/downloads.html\n- Oh My Zsh (OMZ): https://ohmyz.sh/\n\n#### 安装 OMZ\n\n```shell\n$ sh -c \"$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\"\n```\n\n\n\n### 0x01 安装 OMZ 插件\n\n#### 下载插件\n\n```shell\n# 下载 OMZ 插件 zsh-syntax-highlighting\n# https://github.com/zsh-users/zsh-syntax-highlighting/blob/master/INSTALL.md\ngit clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting\n\n# 下载 OMZ 插件 zsh-autosuggestions\n# https://github.com/zsh-users/zsh-autosuggestions/blob/master/INSTALL.md\ngit clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions\n```\n\n#### 启用插件\n\n打开 `$HOME/.zshrc` 加入以下脚本内容：\n\n```shell\nplugins=(\n  git\n  autojump\n  osx\n  zsh-syntax-highlighting\n  zsh-autosuggestions\n)\n```\n\n\n\n### 0x02 安装 Nerd Fonts\n\n整个 Nerd Font 仓库将近 1G 大小，其中 99% 部分都是我们不需要的，因此我们没必要将整个仓库克隆至本地。我这里推荐使用的字体是 Adobe 的 `Source Code Pro` 和 微软公司的 `Cascadia Code`。为支持更丰富的显示，Nerd Font 提供了这两个字体的补丁字体（Patched Font），下载地址如下：\n\n- [Sauce Code Pro Nerd Font](https://github.com/ryanoasis/nerd-fonts/blob/master/patched-fonts/SourceCodePro/Regular/complete/Sauce%20Code%20Pro%20Nerd%20Font%20Complete.ttf)\n- [Caskaydia Cove Regular Nerd Font](https://github.com/ryanoasis/nerd-fonts/blob/master/patched-fonts/CascadiaCode/complete/Caskaydia%20Cove%20Regular%20Nerd%20Font%20Complete.ttf)\n\n\n\n### 0x03 配置 iTerm2\n\n`⌘`+`,` 打开 iTerm2 的设置界面，选择你当前的配置文件，这里推荐使用 `Socialized Dark`，之后按照如图所示选择正确的补丁字体，并勾选必要的勾选项：\n\n![image-20200322231555092](iterm2-omz-style-guide/image-20200322231555092.png)\n\n\n\n### 0x04 安装和配置 powerlevel9k 主题\n\n我们根据[官方指引](https://github.com/Powerlevel9k/powerlevel9k/wiki/Install-Instructions#option-2-install-for-oh-my-zsh)来为 OMZ 安装 powerlevel9k 主题：\n\n```shell\n$ git clone https://github.com/bhilburn/powerlevel9k.git ~/.oh-my-zsh/custom/themes/powerlevel9k\n```\n\n编辑 `$HOME/.zshrc` 文件，并加入以下内容：\n\n```shell\nPOWERLEVEL9K_MODE='nerdfont-complete'\nPOWERLEVEL9K_PROMPT_ON_NEWLINE=true\nPOWERLEVEL9K_MULTILINE_LAST_PROMPT_PREFIX=\"╰▸ \"\nPOWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(os_icon dir vcs)\nZSH_THEME=\"powerlevel9k/powerlevel9k\"\n```\n\n具体的参数解释可参见 powerlevel9k 的 [Wiki](https://github.com/Powerlevel9k/powerlevel9k/wiki/Stylizing-Your-Prompt)，最后就会得到文章开头的“预期效果”！","slug":"iterm2-omz-style-guide","published":1,"updated":"2020-03-23T15:35:51.003Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmasb6npq000o7sosdfyq2idg","content":"<h2 id=\"预期效果\"><a href=\"#预期效果\" class=\"headerlink\" title=\"预期效果\"></a>预期效果</h2><p>本文将介绍结合 <code>iTerm2</code> 和 <code>Oh My Zsh</code> 来美化 macOS 下的显示效果，先放一张最终效果图：</p>\n<p><img data-src=\"/2020/03/22/iterm2-omz-style-guide/image-20200322200414320.png\" alt=\"image-20200322200414320\"></p>\n<p>接下来我们来看下针对 iTerms2 终端进行美化的具体步骤。</p>\n<span id=\"more\"></span>\n\n\n<h2 id=\"具体步骤\"><a href=\"#具体步骤\" class=\"headerlink\" title=\"具体步骤\"></a>具体步骤</h2><h3 id=\"0x00-下载软件\"><a href=\"#0x00-下载软件\" class=\"headerlink\" title=\"0x00 下载软件\"></a>0x00 下载软件</h3><ul>\n<li>iTerm2: <a href=\"https://iterm2.com/downloads.html\">https://iterm2.com/downloads.html</a></li>\n<li>Oh My Zsh (OMZ): <a href=\"https://ohmyz.sh/\">https://ohmyz.sh/</a></li>\n</ul>\n<h4 id=\"安装-OMZ\"><a href=\"#安装-OMZ\" class=\"headerlink\" title=\"安装 OMZ\"></a>安装 OMZ</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sh -c <span class=\"string\">&quot;<span class=\"subst\">$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)</span>&quot;</span></span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"0x01-安装-OMZ-插件\"><a href=\"#0x01-安装-OMZ-插件\" class=\"headerlink\" title=\"0x01 安装 OMZ 插件\"></a>0x01 安装 OMZ 插件</h3><h4 id=\"下载插件\"><a href=\"#下载插件\" class=\"headerlink\" title=\"下载插件\"></a>下载插件</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 下载 OMZ 插件 zsh-syntax-highlighting</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> https://github.com/zsh-users/zsh-syntax-highlighting/blob/master/INSTALL.md</span></span><br><span class=\"line\">git clone https://github.com/zsh-users/zsh-syntax-highlighting.git $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-syntax-highlighting</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 下载 OMZ 插件 zsh-autosuggestions</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> https://github.com/zsh-users/zsh-autosuggestions/blob/master/INSTALL.md</span></span><br><span class=\"line\">git clone https://github.com/zsh-users/zsh-autosuggestions $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-autosuggestions</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"启用插件\"><a href=\"#启用插件\" class=\"headerlink\" title=\"启用插件\"></a>启用插件</h4><p>打开 <code>$HOME/.zshrc</code> 加入以下脚本内容：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plugins=(</span><br><span class=\"line\">  git</span><br><span class=\"line\">  autojump</span><br><span class=\"line\">  osx</span><br><span class=\"line\">  zsh-syntax-highlighting</span><br><span class=\"line\">  zsh-autosuggestions</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"0x02-安装-Nerd-Fonts\"><a href=\"#0x02-安装-Nerd-Fonts\" class=\"headerlink\" title=\"0x02 安装 Nerd Fonts\"></a>0x02 安装 Nerd Fonts</h3><p>整个 Nerd Font 仓库将近 1G 大小，其中 99% 部分都是我们不需要的，因此我们没必要将整个仓库克隆至本地。我这里推荐使用的字体是 Adobe 的 <code>Source Code Pro</code> 和 微软公司的 <code>Cascadia Code</code>。为支持更丰富的显示，Nerd Font 提供了这两个字体的补丁字体（Patched Font），下载地址如下：</p>\n<ul>\n<li><a href=\"https://github.com/ryanoasis/nerd-fonts/blob/master/patched-fonts/SourceCodePro/Regular/complete/Sauce%20Code%20Pro%20Nerd%20Font%20Complete.ttf\">Sauce Code Pro Nerd Font</a></li>\n<li><a href=\"https://github.com/ryanoasis/nerd-fonts/blob/master/patched-fonts/CascadiaCode/complete/Caskaydia%20Cove%20Regular%20Nerd%20Font%20Complete.ttf\">Caskaydia Cove Regular Nerd Font</a></li>\n</ul>\n<h3 id=\"0x03-配置-iTerm2\"><a href=\"#0x03-配置-iTerm2\" class=\"headerlink\" title=\"0x03 配置 iTerm2\"></a>0x03 配置 iTerm2</h3><p><code>⌘</code>+<code>,</code> 打开 iTerm2 的设置界面，选择你当前的配置文件，这里推荐使用 <code>Socialized Dark</code>，之后按照如图所示选择正确的补丁字体，并勾选必要的勾选项：</p>\n<p><img data-src=\"/2020/03/22/iterm2-omz-style-guide/image-20200322231555092.png\" alt=\"image-20200322231555092\"></p>\n<h3 id=\"0x04-安装和配置-powerlevel9k-主题\"><a href=\"#0x04-安装和配置-powerlevel9k-主题\" class=\"headerlink\" title=\"0x04 安装和配置 powerlevel9k 主题\"></a>0x04 安装和配置 powerlevel9k 主题</h3><p>我们根据<a href=\"https://github.com/Powerlevel9k/powerlevel9k/wiki/Install-Instructions#option-2-install-for-oh-my-zsh\">官方指引</a>来为 OMZ 安装 powerlevel9k 主题：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git <span class=\"built_in\">clone</span> https://github.com/bhilburn/powerlevel9k.git ~/.oh-my-zsh/custom/themes/powerlevel9k</span></span><br></pre></td></tr></table></figure>\n\n<p>编辑 <code>$HOME/.zshrc</code> 文件，并加入以下内容：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POWERLEVEL9K_MODE=&#x27;nerdfont-complete&#x27;</span><br><span class=\"line\">POWERLEVEL9K_PROMPT_ON_NEWLINE=true</span><br><span class=\"line\">POWERLEVEL9K_MULTILINE_LAST_PROMPT_PREFIX=&quot;╰▸ &quot;</span><br><span class=\"line\">POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(os_icon dir vcs)</span><br><span class=\"line\">ZSH_THEME=&quot;powerlevel9k/powerlevel9k&quot;</span><br></pre></td></tr></table></figure>\n\n<p>具体的参数解释可参见 powerlevel9k 的 <a href=\"https://github.com/Powerlevel9k/powerlevel9k/wiki/Stylizing-Your-Prompt\">Wiki</a>，最后就会得到文章开头的“预期效果”！</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"预期效果\"><a href=\"#预期效果\" class=\"headerlink\" title=\"预期效果\"></a>预期效果</h2><p>本文将介绍结合 <code>iTerm2</code> 和 <code>Oh My Zsh</code> 来美化 macOS 下的显示效果，先放一张最终效果图：</p>\n<p><img data-src=\"/2020/03/22/iterm2-omz-style-guide/image-20200322200414320.png\" alt=\"image-20200322200414320\"></p>\n<p>接下来我们来看下针对 iTerms2 终端进行美化的具体步骤。</p>","more":"<h2 id=\"具体步骤\"><a href=\"#具体步骤\" class=\"headerlink\" title=\"具体步骤\"></a>具体步骤</h2><h3 id=\"0x00-下载软件\"><a href=\"#0x00-下载软件\" class=\"headerlink\" title=\"0x00 下载软件\"></a>0x00 下载软件</h3><ul>\n<li>iTerm2: <a href=\"https://iterm2.com/downloads.html\">https://iterm2.com/downloads.html</a></li>\n<li>Oh My Zsh (OMZ): <a href=\"https://ohmyz.sh/\">https://ohmyz.sh/</a></li>\n</ul>\n<h4 id=\"安装-OMZ\"><a href=\"#安装-OMZ\" class=\"headerlink\" title=\"安装 OMZ\"></a>安装 OMZ</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sh -c <span class=\"string\">&quot;<span class=\"subst\">$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)</span>&quot;</span></span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"0x01-安装-OMZ-插件\"><a href=\"#0x01-安装-OMZ-插件\" class=\"headerlink\" title=\"0x01 安装 OMZ 插件\"></a>0x01 安装 OMZ 插件</h3><h4 id=\"下载插件\"><a href=\"#下载插件\" class=\"headerlink\" title=\"下载插件\"></a>下载插件</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 下载 OMZ 插件 zsh-syntax-highlighting</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> https://github.com/zsh-users/zsh-syntax-highlighting/blob/master/INSTALL.md</span></span><br><span class=\"line\">git clone https://github.com/zsh-users/zsh-syntax-highlighting.git $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-syntax-highlighting</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 下载 OMZ 插件 zsh-autosuggestions</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> https://github.com/zsh-users/zsh-autosuggestions/blob/master/INSTALL.md</span></span><br><span class=\"line\">git clone https://github.com/zsh-users/zsh-autosuggestions $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-autosuggestions</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"启用插件\"><a href=\"#启用插件\" class=\"headerlink\" title=\"启用插件\"></a>启用插件</h4><p>打开 <code>$HOME/.zshrc</code> 加入以下脚本内容：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plugins=(</span><br><span class=\"line\">  git</span><br><span class=\"line\">  autojump</span><br><span class=\"line\">  osx</span><br><span class=\"line\">  zsh-syntax-highlighting</span><br><span class=\"line\">  zsh-autosuggestions</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"0x02-安装-Nerd-Fonts\"><a href=\"#0x02-安装-Nerd-Fonts\" class=\"headerlink\" title=\"0x02 安装 Nerd Fonts\"></a>0x02 安装 Nerd Fonts</h3><p>整个 Nerd Font 仓库将近 1G 大小，其中 99% 部分都是我们不需要的，因此我们没必要将整个仓库克隆至本地。我这里推荐使用的字体是 Adobe 的 <code>Source Code Pro</code> 和 微软公司的 <code>Cascadia Code</code>。为支持更丰富的显示，Nerd Font 提供了这两个字体的补丁字体（Patched Font），下载地址如下：</p>\n<ul>\n<li><a href=\"https://github.com/ryanoasis/nerd-fonts/blob/master/patched-fonts/SourceCodePro/Regular/complete/Sauce%20Code%20Pro%20Nerd%20Font%20Complete.ttf\">Sauce Code Pro Nerd Font</a></li>\n<li><a href=\"https://github.com/ryanoasis/nerd-fonts/blob/master/patched-fonts/CascadiaCode/complete/Caskaydia%20Cove%20Regular%20Nerd%20Font%20Complete.ttf\">Caskaydia Cove Regular Nerd Font</a></li>\n</ul>\n<h3 id=\"0x03-配置-iTerm2\"><a href=\"#0x03-配置-iTerm2\" class=\"headerlink\" title=\"0x03 配置 iTerm2\"></a>0x03 配置 iTerm2</h3><p><code>⌘</code>+<code>,</code> 打开 iTerm2 的设置界面，选择你当前的配置文件，这里推荐使用 <code>Socialized Dark</code>，之后按照如图所示选择正确的补丁字体，并勾选必要的勾选项：</p>\n<p><img data-src=\"/2020/03/22/iterm2-omz-style-guide/image-20200322231555092.png\" alt=\"image-20200322231555092\"></p>\n<h3 id=\"0x04-安装和配置-powerlevel9k-主题\"><a href=\"#0x04-安装和配置-powerlevel9k-主题\" class=\"headerlink\" title=\"0x04 安装和配置 powerlevel9k 主题\"></a>0x04 安装和配置 powerlevel9k 主题</h3><p>我们根据<a href=\"https://github.com/Powerlevel9k/powerlevel9k/wiki/Install-Instructions#option-2-install-for-oh-my-zsh\">官方指引</a>来为 OMZ 安装 powerlevel9k 主题：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git <span class=\"built_in\">clone</span> https://github.com/bhilburn/powerlevel9k.git ~/.oh-my-zsh/custom/themes/powerlevel9k</span></span><br></pre></td></tr></table></figure>\n\n<p>编辑 <code>$HOME/.zshrc</code> 文件，并加入以下内容：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POWERLEVEL9K_MODE=&#x27;nerdfont-complete&#x27;</span><br><span class=\"line\">POWERLEVEL9K_PROMPT_ON_NEWLINE=true</span><br><span class=\"line\">POWERLEVEL9K_MULTILINE_LAST_PROMPT_PREFIX=&quot;╰▸ &quot;</span><br><span class=\"line\">POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(os_icon dir vcs)</span><br><span class=\"line\">ZSH_THEME=&quot;powerlevel9k/powerlevel9k&quot;</span><br></pre></td></tr></table></figure>\n\n<p>具体的参数解释可参见 powerlevel9k 的 <a href=\"https://github.com/Powerlevel9k/powerlevel9k/wiki/Stylizing-Your-Prompt\">Wiki</a>，最后就会得到文章开头的“预期效果”！</p>"},{"title":"K8S 应用启停通用脚本","date":"2020-05-18T20:54:19.000Z","_content":"\nKubernetes 集群中运行的应用中的每一个服务组件通常是以 Deployment 的形式存在的，本文中提供的管理脚本假设读者部署在 Kubernetes 中的应用服务的 Deployment 对象均已特定的前缀命名，比如 demo，那么集群中可能存在一下的 Deployment 对象：\n\n- demo-register\n- demo-gateway\n- demo-oauth\n- demo-config\n- demo-swagger\n- ...\n\n在这个前提下，我这里提供了一个脚本可以对这些 deployment 对象进行一键启停操作。举例说明，加绒我的脚本名称为 `k8s-apps.sh` 那么可以执行如下命令：\n\n ```shell\n# 启动所有应用，default 为命名空间\n./k8s-apps.sh start default\n\n# 停止所有应用\n./k8s-apps.sh stop default\n ```\n\n启停脚本的内容如下：\n\n<!-- more -->\n\n```shell\n#!/usr/bin/env bash\n#\n# Copyright 2020 Liu Hongyu (eliuhy@163.com)\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\nset -e\n\nprefix=\"demo\"        # pattern that names of deployment start with\nGRN=\"\\e[32m\"        # green color\nYLW=\"\\e[33m\"        # yellow color\nRED=\"\\e[91m\"        # red color\nRST=\"\\e[39m\"        # reset color\n\n# --- common functions definition ---\ninfo() { echo -e \"$GRN[INFO]$RST\" $@\n}\nwarn() { echo -e \"$YLW[WARN]$RST\" $@\n}\nfata() { echo -e \"$RED[FATA]$RST\" $@; exit 1\n}\nhas_command() { command -v $@ >/dev/null\n}\n\n# --- print help ---\nshow_help() {\necho -e \"\nUSAGE:\n  ${GRN}${PROG}${RST} ${YLW}start${RST}|${YLW}stop${RST} -n|--namespace <${YLW}namespace${RST}>\n\"\nexit 0\n}\n\n# --- Check dependencies and arguments ---\npre_check() {\n  has_command kubectl || fata \"This script needs 'kubectl' installed on your computer.\"\n  [ -n \"$action\"    ] || fata \"Need provide at least one action: start|stop\"\n  [[ $action =~ ^(start|stop)$ ]] || fata \"Invalid action '$action'. Use one of the following actions: start|stop\"\n  [ -n \"$namespace\" ] || fata \"Need provide namespace!\"\n  kubectl get ns | grep $namespace >/dev/null || fata \"'$namespace' not found in current cluster.\"\n  deployments=$(kubectl get deploy -n $namespace | grep ^$prefix | awk '{print $1}')\n}\n\nscale() {\n  kubectl -n $namespace scale --current-replicas=$2 --replicas=$3 deployment/$1\n}\n\nscale_apps() {\n  for app in $deployments; do\n    scale $app $1 $2\n  done\n}\n\n{\n  PROG=\"$(basename $0)\"\n  PARAMS=\"\"\n  while [ $# -gt 0 ]; do\n    case \"$1\" in\n      -n|--namespace)\n        namespace=$2\n        shift 2\n        ;;\n      -h|--help)\n        show_help\n        ;;\n      -*|--*)\n        fata \"Invalid option '$1'\"\n        ;;\n      *)\n        PARAMS=\"$1 $PARAMS\"\n        shift\n        ;;\n    esac\n  done\n  eval set -- \"$PARAMS\"\n  action=$1\n\n  pre_check\n\n  [[ $action = \"start\" ]] && scale_apps 0 1 # scale up replicas from 0 to 1\n  [[ $action = \"stop\"  ]] && scale_apps 1 0 # scale down replicas from 1 to 0\n  exit 0\n}\n```\n\n","source":"_posts/k8s-apps-admin.md","raw":"---\ntitle: K8S 应用启停通用脚本\ndate: 2020-05-19 04:54:19\ncategories:\n- DevOps\ntags:\n- k8s\n- kubernetes\n- deployment\n- admin\n---\n\nKubernetes 集群中运行的应用中的每一个服务组件通常是以 Deployment 的形式存在的，本文中提供的管理脚本假设读者部署在 Kubernetes 中的应用服务的 Deployment 对象均已特定的前缀命名，比如 demo，那么集群中可能存在一下的 Deployment 对象：\n\n- demo-register\n- demo-gateway\n- demo-oauth\n- demo-config\n- demo-swagger\n- ...\n\n在这个前提下，我这里提供了一个脚本可以对这些 deployment 对象进行一键启停操作。举例说明，加绒我的脚本名称为 `k8s-apps.sh` 那么可以执行如下命令：\n\n ```shell\n# 启动所有应用，default 为命名空间\n./k8s-apps.sh start default\n\n# 停止所有应用\n./k8s-apps.sh stop default\n ```\n\n启停脚本的内容如下：\n\n<!-- more -->\n\n```shell\n#!/usr/bin/env bash\n#\n# Copyright 2020 Liu Hongyu (eliuhy@163.com)\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\nset -e\n\nprefix=\"demo\"        # pattern that names of deployment start with\nGRN=\"\\e[32m\"        # green color\nYLW=\"\\e[33m\"        # yellow color\nRED=\"\\e[91m\"        # red color\nRST=\"\\e[39m\"        # reset color\n\n# --- common functions definition ---\ninfo() { echo -e \"$GRN[INFO]$RST\" $@\n}\nwarn() { echo -e \"$YLW[WARN]$RST\" $@\n}\nfata() { echo -e \"$RED[FATA]$RST\" $@; exit 1\n}\nhas_command() { command -v $@ >/dev/null\n}\n\n# --- print help ---\nshow_help() {\necho -e \"\nUSAGE:\n  ${GRN}${PROG}${RST} ${YLW}start${RST}|${YLW}stop${RST} -n|--namespace <${YLW}namespace${RST}>\n\"\nexit 0\n}\n\n# --- Check dependencies and arguments ---\npre_check() {\n  has_command kubectl || fata \"This script needs 'kubectl' installed on your computer.\"\n  [ -n \"$action\"    ] || fata \"Need provide at least one action: start|stop\"\n  [[ $action =~ ^(start|stop)$ ]] || fata \"Invalid action '$action'. Use one of the following actions: start|stop\"\n  [ -n \"$namespace\" ] || fata \"Need provide namespace!\"\n  kubectl get ns | grep $namespace >/dev/null || fata \"'$namespace' not found in current cluster.\"\n  deployments=$(kubectl get deploy -n $namespace | grep ^$prefix | awk '{print $1}')\n}\n\nscale() {\n  kubectl -n $namespace scale --current-replicas=$2 --replicas=$3 deployment/$1\n}\n\nscale_apps() {\n  for app in $deployments; do\n    scale $app $1 $2\n  done\n}\n\n{\n  PROG=\"$(basename $0)\"\n  PARAMS=\"\"\n  while [ $# -gt 0 ]; do\n    case \"$1\" in\n      -n|--namespace)\n        namespace=$2\n        shift 2\n        ;;\n      -h|--help)\n        show_help\n        ;;\n      -*|--*)\n        fata \"Invalid option '$1'\"\n        ;;\n      *)\n        PARAMS=\"$1 $PARAMS\"\n        shift\n        ;;\n    esac\n  done\n  eval set -- \"$PARAMS\"\n  action=$1\n\n  pre_check\n\n  [[ $action = \"start\" ]] && scale_apps 0 1 # scale up replicas from 0 to 1\n  [[ $action = \"stop\"  ]] && scale_apps 1 0 # scale down replicas from 1 to 0\n  exit 0\n}\n```\n\n","slug":"k8s-apps-admin","published":1,"updated":"2020-06-10T16:06:30.459Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmasb6nps000t7sos1xjfbhg8","content":"<p>Kubernetes 集群中运行的应用中的每一个服务组件通常是以 Deployment 的形式存在的，本文中提供的管理脚本假设读者部署在 Kubernetes 中的应用服务的 Deployment 对象均已特定的前缀命名，比如 demo，那么集群中可能存在一下的 Deployment 对象：</p>\n<ul>\n<li>demo-register</li>\n<li>demo-gateway</li>\n<li>demo-oauth</li>\n<li>demo-config</li>\n<li>demo-swagger</li>\n<li>…</li>\n</ul>\n<p>在这个前提下，我这里提供了一个脚本可以对这些 deployment 对象进行一键启停操作。举例说明，加绒我的脚本名称为 <code>k8s-apps.sh</code> 那么可以执行如下命令：</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 启动所有应用，default 为命名空间</span></span><br><span class=\"line\">./k8s-apps.sh start default</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 停止所有应用</span></span><br><span class=\"line\">./k8s-apps.sh stop default</span><br></pre></td></tr></table></figure>\n\n<p>启停脚本的内容如下：</p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/usr/bin/env bash</span></span><br><span class=\"line\"><span class=\"meta\">#</span></span><br><span class=\"line\"><span class=\"bash\"><span class=\"comment\"># Copyright 2020 Liu Hongyu (eliuhy@163.com)</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span></span><br><span class=\"line\"><span class=\"bash\"><span class=\"comment\"># Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> you may not use this file except <span class=\"keyword\">in</span> compliance with the License.</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> You may obtain a copy of the License at</span></span><br><span class=\"line\"><span class=\"meta\">#</span></span><br><span class=\"line\"><span class=\"bash\"><span class=\"comment\">#     http://www.apache.org/licenses/LICENSE-2.0</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span></span><br><span class=\"line\"><span class=\"bash\"><span class=\"comment\"># Unless required by applicable law or agreed to in writing, software</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> distributed under the License is distributed on an <span class=\"string\">&quot;AS IS&quot;</span> BASIS,</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> See the License <span class=\"keyword\">for</span> the specific language governing permissions and</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> limitations under the License.</span></span><br><span class=\"line\"><span class=\"meta\">#</span></span><br><span class=\"line\"><span class=\"bash\"><span class=\"built_in\">set</span> -e</span></span><br><span class=\"line\"></span><br><span class=\"line\">prefix=&quot;demo&quot;        # pattern that names of deployment start with</span><br><span class=\"line\">GRN=&quot;\\e[32m&quot;        # green color</span><br><span class=\"line\">YLW=&quot;\\e[33m&quot;        # yellow color</span><br><span class=\"line\">RED=&quot;\\e[91m&quot;        # red color</span><br><span class=\"line\">RST=&quot;\\e[39m&quot;        # reset color</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> --- common <span class=\"built_in\">functions</span> definition ---</span></span><br><span class=\"line\">info() &#123; echo -e &quot;$GRN[INFO]$RST&quot; $@</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">warn() &#123; echo -e &quot;$YLW[WARN]$RST&quot; $@</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fata() &#123; echo -e &quot;$RED[FATA]$RST&quot; $@; exit 1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">has_command() &#123; command -v $@ &gt;/dev/null</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> --- <span class=\"built_in\">print</span> <span class=\"built_in\">help</span> ---</span></span><br><span class=\"line\">show_help() &#123;</span><br><span class=\"line\">echo -e &quot;</span><br><span class=\"line\">USAGE:</span><br><span class=\"line\"><span class=\"meta\">  $</span><span class=\"bash\">&#123;GRN&#125;<span class=\"variable\">$&#123;PROG&#125;</span><span class=\"variable\">$&#123;RST&#125;</span> <span class=\"variable\">$&#123;YLW&#125;</span>start<span class=\"variable\">$&#123;RST&#125;</span>|<span class=\"variable\">$&#123;YLW&#125;</span>stop<span class=\"variable\">$&#123;RST&#125;</span> -n|--namespace &lt;<span class=\"variable\">$&#123;YLW&#125;</span>namespace<span class=\"variable\">$&#123;RST&#125;</span>&gt;</span></span><br><span class=\"line\">&quot;</span><br><span class=\"line\">exit 0</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> --- Check dependencies and arguments ---</span></span><br><span class=\"line\">pre_check() &#123;</span><br><span class=\"line\">  has_command kubectl || fata &quot;This script needs &#x27;kubectl&#x27; installed on your computer.&quot;</span><br><span class=\"line\">  [ -n &quot;$action&quot;    ] || fata &quot;Need provide at least one action: start|stop&quot;</span><br><span class=\"line\">  [[ $action =~ ^(start|stop)$ ]] || fata &quot;Invalid action &#x27;$action&#x27;. Use one of the following actions: start|stop&quot;</span><br><span class=\"line\">  [ -n &quot;$namespace&quot; ] || fata &quot;Need provide namespace!&quot;</span><br><span class=\"line\">  kubectl get ns | grep $namespace &gt;/dev/null || fata &quot;&#x27;$namespace&#x27; not found in current cluster.&quot;</span><br><span class=\"line\">  deployments=$(kubectl get deploy -n $namespace | grep ^$prefix | awk &#x27;&#123;print $1&#125;&#x27;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">scale() &#123;</span><br><span class=\"line\">  kubectl -n $namespace scale --current-replicas=$2 --replicas=$3 deployment/$1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">scale_apps() &#123;</span><br><span class=\"line\">  for app in $deployments; do</span><br><span class=\"line\">    scale $app $1 $2</span><br><span class=\"line\">  done</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  PROG=&quot;$(basename $0)&quot;</span><br><span class=\"line\">  PARAMS=&quot;&quot;</span><br><span class=\"line\">  while [ $# -gt 0 ]; do</span><br><span class=\"line\">    case &quot;$1&quot; in</span><br><span class=\"line\">      -n|--namespace)</span><br><span class=\"line\">        namespace=$2</span><br><span class=\"line\">        shift 2</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">      -h|--help)</span><br><span class=\"line\">        show_help</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">      -*|--*)</span><br><span class=\"line\">        fata &quot;Invalid option &#x27;$1&#x27;&quot;</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">      *)</span><br><span class=\"line\">        PARAMS=&quot;$1 $PARAMS&quot;</span><br><span class=\"line\">        shift</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    esac</span><br><span class=\"line\">  done</span><br><span class=\"line\">  eval set -- &quot;$PARAMS&quot;</span><br><span class=\"line\">  action=$1</span><br><span class=\"line\"></span><br><span class=\"line\">  pre_check</span><br><span class=\"line\"></span><br><span class=\"line\">  [[ $action = &quot;start&quot; ]] &amp;&amp; scale_apps 0 1 # scale up replicas from 0 to 1</span><br><span class=\"line\">  [[ $action = &quot;stop&quot;  ]] &amp;&amp; scale_apps 1 0 # scale down replicas from 1 to 0</span><br><span class=\"line\">  exit 0</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<p>Kubernetes 集群中运行的应用中的每一个服务组件通常是以 Deployment 的形式存在的，本文中提供的管理脚本假设读者部署在 Kubernetes 中的应用服务的 Deployment 对象均已特定的前缀命名，比如 demo，那么集群中可能存在一下的 Deployment 对象：</p>\n<ul>\n<li>demo-register</li>\n<li>demo-gateway</li>\n<li>demo-oauth</li>\n<li>demo-config</li>\n<li>demo-swagger</li>\n<li>…</li>\n</ul>\n<p>在这个前提下，我这里提供了一个脚本可以对这些 deployment 对象进行一键启停操作。举例说明，加绒我的脚本名称为 <code>k8s-apps.sh</code> 那么可以执行如下命令：</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 启动所有应用，default 为命名空间</span></span><br><span class=\"line\">./k8s-apps.sh start default</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 停止所有应用</span></span><br><span class=\"line\">./k8s-apps.sh stop default</span><br></pre></td></tr></table></figure>\n\n<p>启停脚本的内容如下：</p>","more":"<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/usr/bin/env bash</span></span><br><span class=\"line\"><span class=\"meta\">#</span></span><br><span class=\"line\"><span class=\"bash\"><span class=\"comment\"># Copyright 2020 Liu Hongyu (eliuhy@163.com)</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span></span><br><span class=\"line\"><span class=\"bash\"><span class=\"comment\"># Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> you may not use this file except <span class=\"keyword\">in</span> compliance with the License.</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> You may obtain a copy of the License at</span></span><br><span class=\"line\"><span class=\"meta\">#</span></span><br><span class=\"line\"><span class=\"bash\"><span class=\"comment\">#     http://www.apache.org/licenses/LICENSE-2.0</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span></span><br><span class=\"line\"><span class=\"bash\"><span class=\"comment\"># Unless required by applicable law or agreed to in writing, software</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> distributed under the License is distributed on an <span class=\"string\">&quot;AS IS&quot;</span> BASIS,</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> See the License <span class=\"keyword\">for</span> the specific language governing permissions and</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> limitations under the License.</span></span><br><span class=\"line\"><span class=\"meta\">#</span></span><br><span class=\"line\"><span class=\"bash\"><span class=\"built_in\">set</span> -e</span></span><br><span class=\"line\"></span><br><span class=\"line\">prefix=&quot;demo&quot;        # pattern that names of deployment start with</span><br><span class=\"line\">GRN=&quot;\\e[32m&quot;        # green color</span><br><span class=\"line\">YLW=&quot;\\e[33m&quot;        # yellow color</span><br><span class=\"line\">RED=&quot;\\e[91m&quot;        # red color</span><br><span class=\"line\">RST=&quot;\\e[39m&quot;        # reset color</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> --- common <span class=\"built_in\">functions</span> definition ---</span></span><br><span class=\"line\">info() &#123; echo -e &quot;$GRN[INFO]$RST&quot; $@</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">warn() &#123; echo -e &quot;$YLW[WARN]$RST&quot; $@</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fata() &#123; echo -e &quot;$RED[FATA]$RST&quot; $@; exit 1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">has_command() &#123; command -v $@ &gt;/dev/null</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> --- <span class=\"built_in\">print</span> <span class=\"built_in\">help</span> ---</span></span><br><span class=\"line\">show_help() &#123;</span><br><span class=\"line\">echo -e &quot;</span><br><span class=\"line\">USAGE:</span><br><span class=\"line\"><span class=\"meta\">  $</span><span class=\"bash\">&#123;GRN&#125;<span class=\"variable\">$&#123;PROG&#125;</span><span class=\"variable\">$&#123;RST&#125;</span> <span class=\"variable\">$&#123;YLW&#125;</span>start<span class=\"variable\">$&#123;RST&#125;</span>|<span class=\"variable\">$&#123;YLW&#125;</span>stop<span class=\"variable\">$&#123;RST&#125;</span> -n|--namespace &lt;<span class=\"variable\">$&#123;YLW&#125;</span>namespace<span class=\"variable\">$&#123;RST&#125;</span>&gt;</span></span><br><span class=\"line\">&quot;</span><br><span class=\"line\">exit 0</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> --- Check dependencies and arguments ---</span></span><br><span class=\"line\">pre_check() &#123;</span><br><span class=\"line\">  has_command kubectl || fata &quot;This script needs &#x27;kubectl&#x27; installed on your computer.&quot;</span><br><span class=\"line\">  [ -n &quot;$action&quot;    ] || fata &quot;Need provide at least one action: start|stop&quot;</span><br><span class=\"line\">  [[ $action =~ ^(start|stop)$ ]] || fata &quot;Invalid action &#x27;$action&#x27;. Use one of the following actions: start|stop&quot;</span><br><span class=\"line\">  [ -n &quot;$namespace&quot; ] || fata &quot;Need provide namespace!&quot;</span><br><span class=\"line\">  kubectl get ns | grep $namespace &gt;/dev/null || fata &quot;&#x27;$namespace&#x27; not found in current cluster.&quot;</span><br><span class=\"line\">  deployments=$(kubectl get deploy -n $namespace | grep ^$prefix | awk &#x27;&#123;print $1&#125;&#x27;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">scale() &#123;</span><br><span class=\"line\">  kubectl -n $namespace scale --current-replicas=$2 --replicas=$3 deployment/$1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">scale_apps() &#123;</span><br><span class=\"line\">  for app in $deployments; do</span><br><span class=\"line\">    scale $app $1 $2</span><br><span class=\"line\">  done</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  PROG=&quot;$(basename $0)&quot;</span><br><span class=\"line\">  PARAMS=&quot;&quot;</span><br><span class=\"line\">  while [ $# -gt 0 ]; do</span><br><span class=\"line\">    case &quot;$1&quot; in</span><br><span class=\"line\">      -n|--namespace)</span><br><span class=\"line\">        namespace=$2</span><br><span class=\"line\">        shift 2</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">      -h|--help)</span><br><span class=\"line\">        show_help</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">      -*|--*)</span><br><span class=\"line\">        fata &quot;Invalid option &#x27;$1&#x27;&quot;</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">      *)</span><br><span class=\"line\">        PARAMS=&quot;$1 $PARAMS&quot;</span><br><span class=\"line\">        shift</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    esac</span><br><span class=\"line\">  done</span><br><span class=\"line\">  eval set -- &quot;$PARAMS&quot;</span><br><span class=\"line\">  action=$1</span><br><span class=\"line\"></span><br><span class=\"line\">  pre_check</span><br><span class=\"line\"></span><br><span class=\"line\">  [[ $action = &quot;start&quot; ]] &amp;&amp; scale_apps 0 1 # scale up replicas from 0 to 1</span><br><span class=\"line\">  [[ $action = &quot;stop&quot;  ]] &amp;&amp; scale_apps 1 0 # scale down replicas from 1 to 0</span><br><span class=\"line\">  exit 0</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"使用 kubectl 管理 kubeconfig 配置文件","date":"2020-03-28T02:55:12.000Z","_content":"\n## 前言\n\nKubernetes 集群在服务器搭建部署成功之后，通常我们都会通过 `kubectl` 命令行工具与集群互动、发送操作指令来管理集群。`kubectl` 主要依赖于集群配置文件 `kubeconfig` 与集群进行通讯，这个文件通常在 Kubernetes 集群的 master 节点服务器的 `$HOME/.kube/config` 目录下。开发者可以从服务器获取改配置文件到开发者本地电脑上的相同目录位置上即可。\n\n本篇文章主要介绍一下我们如何管理这个配置文件。如果熟悉 `kubeconfig` 文件的结构，读者当然可以使用文本编辑器自行修改，不过手工修改难免会有错误和不便。所以这里介绍一下如何利用 `kubectl` 工具来帮助我们管理和调整配置文件。\n\n\n\n<!-- more -->\n\n## kubeconfig 的结构\n\nkubeconfig 是一个 Kubernetes 中的一个资源对象，叫做 `Config` , 内容格式是 YAML 。这个文件中主要包含了集群（clusters）、上下文（contexts）和用户（users）信息，他们的层次结构和关系如下图所示：\n\n![kubeconfig 结构关系图](manage-kubeconfig/kubeconfig-structure.png)\n\n如图所示，上下文 context 是建立集群、用户和命名空间之间关系的桥梁和纽带，我们在本地切换所谓的“环境”其实就是将一个指定的上下文为当前激活的上下文（current-context）。再通俗点讲，这个上下文指的就是你当前是以什么身份（user) 在连接哪个集群（cluster），连接后自动切换到哪一个命名空间（namespace）下。\n\n## kubectl config\n\n`kubectl` 中的 `config` 子命令可以帮助我们维护存储在本地的配置文件，我们先来看下它的帮助说明：\n\n```shell\n$ kubectl config --help\nModify kubeconfig files using subcommands like \"kubectl config set current-context my-context\"\n\n The loading order follows these rules:\n\n  1.  If the --kubeconfig flag is set, then only that file is loaded. The flag may only be set once and no merging takes\nplace.\n  2.  If $KUBECONFIG environment variable is set, then it is used as a list of paths (normal path delimiting rules for\nyour system). These paths are merged. When a value is modified, it is modified in the file that defines the stanza. When\na value is created, it is created in the first file that exists. If no files in the chain exist, then it creates the\nlast file in the list.\n  3.  Otherwise, ${HOME}/.kube/config is used and no merging takes place.\n\nAvailable Commands:\n  current-context Displays the current-context\n  delete-cluster  Delete the specified cluster from the kubeconfig\n  delete-context  Delete the specified context from the kubeconfig\n  get-clusters    Display clusters defined in the kubeconfig\n  get-contexts    Describe one or many contexts\n  rename-context  Renames a context from the kubeconfig file.\n  set             Sets an individual value in a kubeconfig file\n  set-cluster     Sets a cluster entry in kubeconfig\n  set-context     Sets a context entry in kubeconfig\n  set-credentials Sets a user entry in kubeconfig\n  unset           Unsets an individual value in a kubeconfig file\n  use-context     Sets the current-context in a kubeconfig file\n  view            Display merged kubeconfig settings or a specified kubeconfig file\n\nUsage:\n  kubectl config SUBCOMMAND [options]\n\nUse \"kubectl <command> --help\" for more information about a given command.\nUse \"kubectl options\" for a list of global command-line options (applies to all commands).\n```\n\n这里简要说明一下config下几个主要的子命令：\n\n| 子命令            | 说明                                                        | 备注       |\n| ----------------- | ----------------------------------------------------------- | ---------- |\n| `current-context` | 显示当前的上下文名称                                        |            |\n| `use-context`     | 指定某个上下文为当前激活的上下文                            |            |\n| `rename-context`  | 重命名一个上下文                                            |            |\n| `delete-context`  | 从 kubeconfig 中删除指定的上下文                            |            |\n| `delete-cluster`  | 从 kubeconfig 中删除指定的集群                              |            |\n| `set`             | 设置 kubeconfig 中一个具体的属性的值                        |            |\n| `set-cluster`     | 设置指定集群的属性                                          |            |\n| `set-context`     | 设置指定上下文的属性                                        |            |\n| `set-credentials` | 设置指定用户的属性                                          | 无法删除   |\n| `unset`           | 删除 kubeconfig 中一个具体的属性的值                        | 可用于删除 |\n| `view`            | 输出合并后的kubeconfig的内容，格式为 YAML，密文内容不会显示 |            |\n| `get-clusters`    | 输出所有的集群信息                                          |            |\n| `get-contexts`    | 输出所有的上下文信息，同时会标记哪一个是当前的上下文        |            |\n\n\n\n## 常见任务场景\n\n接下来我们列举一些常见的任务场景。\n\n### 0x01 查看当前所有的集群\n\n```shell\n$ kubectl config get-clusters\nNAME\nkubernetes\n```\n\n\n\n### 0x02 修改集群服务器地址\n\n首先我们使用以下命令来看下集群 kubernetes 的 server 属性的值：\n\n```shell\n$ kubectl config view -o jsonpath='{.clusters[?(@.name == \"kubernetes\")].cluster.server}'\nhttp://127.0.0.1:8443\n```\n\n接下来我们是用 `set-cluster` 子命令来修改服务器的地址：\n\n```shell\n# 修改集群服务器地址为 https://192.168.1.10:8443\n$ kubectl config set-cluster kubernetes --server=https://192.168.1.10:8443\nCluster \"kubernetes\" set.\n\n# 再次查看集群的服务器地址\n$ kubectl config view -o jsonpath='{.clusters[?(@.name == \"kubernetes\")].cluster.server}'\nhttps://192.168.1.10:8443\n```\n\n\n\n### 0x03 删除一个集群\n\n```shell\n# 删除集群 docker-desktop\n$ kubectl config delete-cluster docker-desktop\ndeleted cluster docker-desktop from /Users/eliuhy/.kube/config\n```\n\n\n\n### 0x04 删除一个用户\n\n`kubectl config` 未直接提供的删除用户的子命令，所以我们找不到类似于 `delete-user` 之类的选项。不过我们可以使用 `unset` 子命令来完成这个任务：\n\n```shell\n# 删除用户 docker-desktop\n$ kubectl config unset users.docker-desktop\nProperty \"users.docker-desktop\" unset.\n```\n\n\n\n### 0x05 查看当前所有的上下文\n\n```shell\n$ kubectl config get-contexts\nCURRENT   NAME                          CLUSTER      AUTHINFO           NAMESPACE\n*         kt-connect@kubernetes         kubernetes   kt-connect         default\n          kubernetes-admin@kubernetes   kubernetes   kubernetes-admin   kube-system\n```\n\n\n\n### 0x06 删除上下文信息\n\n```shell\n# 删除上下文 docker-desktop\n$ kubectl config delete-context docker-desktop\ndeleted context docker-desktop from /Users/eliuhy/.kube/config\n```\n\n\n\n### 0x07 更新上下文的命名空间\n\n```shell\n# 查看上下文 kubernetes-admin@kubernetes 的详细信息\n$ kubectl config get-contexts kubernetes-admin@kubernetes\nCURRENT   NAME                          CLUSTER      AUTHINFO           NAMESPACE\n          kubernetes-admin@kubernetes   kubernetes   kubernetes-admin   default\n\n# 修改上下文的命名空间为 kube-system\n$ kubectl config set-context kubernetes-admin@kubernetes --namespace=kube-system\nContext \"kubernetes-admin@kubernetes\" modified.\n\n# 再次查看上下文信息\n$ kubectl config get-contexts kubernetes-admin@kubernetes\nCURRENT   NAME                          CLUSTER      AUTHINFO           NAMESPACE\n          kubernetes-admin@kubernetes   kubernetes   kubernetes-admin   kube-system\n```\n\n\n\n### 0x08 修改当前激活的上下文\n\n```shell\n# 查看当前激活的上下文，CURRENT 列标记星号的为当前激活的上下文\n$ kubectl config get-contexts\nCURRENT   NAME                          CLUSTER      AUTHINFO           NAMESPACE\n*         kt-connect@kubernetes         kubernetes   kt-connect         default\n          kubernetes-admin@kubernetes   kubernetes   kubernetes-admin   kube-system\n\n# 修改当前激活的上下文为 kubernetes-admin@kubernetes\n$ kubectl config use-context kubernetes-admin@kubernetes\nSwitched to context \"kubernetes-admin@kubernetes\".\n\n# 再次确认是否激活成功\n$ kubectl config get-contexts\nCURRENT   NAME                          CLUSTER      AUTHINFO           NAMESPACE\n          kt-connect@kubernetes         kubernetes   kt-connect         default\n*         kubernetes-admin@kubernetes   kubernetes   kubernetes-admin   kube-system\n```\n\n\n\n## 总结\n\n建议大家使用 `kubectl config` 的方式来配置 `kubeconfig` 文件，避免了手工修改的麻烦和误配置之外，对于自动化管理也可以更加规范和统一。\n\n","source":"_posts/manage-kubeconfig.md","raw":"---\ntitle: 使用 kubectl 管理 kubeconfig 配置文件\ndate: 2020-03-28 10:55:12\ncategories: \n- DevOps\ntags:\n- Kubernetes\n- K8S\n- kubeconfig\n- kubectl config\n---\n\n## 前言\n\nKubernetes 集群在服务器搭建部署成功之后，通常我们都会通过 `kubectl` 命令行工具与集群互动、发送操作指令来管理集群。`kubectl` 主要依赖于集群配置文件 `kubeconfig` 与集群进行通讯，这个文件通常在 Kubernetes 集群的 master 节点服务器的 `$HOME/.kube/config` 目录下。开发者可以从服务器获取改配置文件到开发者本地电脑上的相同目录位置上即可。\n\n本篇文章主要介绍一下我们如何管理这个配置文件。如果熟悉 `kubeconfig` 文件的结构，读者当然可以使用文本编辑器自行修改，不过手工修改难免会有错误和不便。所以这里介绍一下如何利用 `kubectl` 工具来帮助我们管理和调整配置文件。\n\n\n\n<!-- more -->\n\n## kubeconfig 的结构\n\nkubeconfig 是一个 Kubernetes 中的一个资源对象，叫做 `Config` , 内容格式是 YAML 。这个文件中主要包含了集群（clusters）、上下文（contexts）和用户（users）信息，他们的层次结构和关系如下图所示：\n\n![kubeconfig 结构关系图](manage-kubeconfig/kubeconfig-structure.png)\n\n如图所示，上下文 context 是建立集群、用户和命名空间之间关系的桥梁和纽带，我们在本地切换所谓的“环境”其实就是将一个指定的上下文为当前激活的上下文（current-context）。再通俗点讲，这个上下文指的就是你当前是以什么身份（user) 在连接哪个集群（cluster），连接后自动切换到哪一个命名空间（namespace）下。\n\n## kubectl config\n\n`kubectl` 中的 `config` 子命令可以帮助我们维护存储在本地的配置文件，我们先来看下它的帮助说明：\n\n```shell\n$ kubectl config --help\nModify kubeconfig files using subcommands like \"kubectl config set current-context my-context\"\n\n The loading order follows these rules:\n\n  1.  If the --kubeconfig flag is set, then only that file is loaded. The flag may only be set once and no merging takes\nplace.\n  2.  If $KUBECONFIG environment variable is set, then it is used as a list of paths (normal path delimiting rules for\nyour system). These paths are merged. When a value is modified, it is modified in the file that defines the stanza. When\na value is created, it is created in the first file that exists. If no files in the chain exist, then it creates the\nlast file in the list.\n  3.  Otherwise, ${HOME}/.kube/config is used and no merging takes place.\n\nAvailable Commands:\n  current-context Displays the current-context\n  delete-cluster  Delete the specified cluster from the kubeconfig\n  delete-context  Delete the specified context from the kubeconfig\n  get-clusters    Display clusters defined in the kubeconfig\n  get-contexts    Describe one or many contexts\n  rename-context  Renames a context from the kubeconfig file.\n  set             Sets an individual value in a kubeconfig file\n  set-cluster     Sets a cluster entry in kubeconfig\n  set-context     Sets a context entry in kubeconfig\n  set-credentials Sets a user entry in kubeconfig\n  unset           Unsets an individual value in a kubeconfig file\n  use-context     Sets the current-context in a kubeconfig file\n  view            Display merged kubeconfig settings or a specified kubeconfig file\n\nUsage:\n  kubectl config SUBCOMMAND [options]\n\nUse \"kubectl <command> --help\" for more information about a given command.\nUse \"kubectl options\" for a list of global command-line options (applies to all commands).\n```\n\n这里简要说明一下config下几个主要的子命令：\n\n| 子命令            | 说明                                                        | 备注       |\n| ----------------- | ----------------------------------------------------------- | ---------- |\n| `current-context` | 显示当前的上下文名称                                        |            |\n| `use-context`     | 指定某个上下文为当前激活的上下文                            |            |\n| `rename-context`  | 重命名一个上下文                                            |            |\n| `delete-context`  | 从 kubeconfig 中删除指定的上下文                            |            |\n| `delete-cluster`  | 从 kubeconfig 中删除指定的集群                              |            |\n| `set`             | 设置 kubeconfig 中一个具体的属性的值                        |            |\n| `set-cluster`     | 设置指定集群的属性                                          |            |\n| `set-context`     | 设置指定上下文的属性                                        |            |\n| `set-credentials` | 设置指定用户的属性                                          | 无法删除   |\n| `unset`           | 删除 kubeconfig 中一个具体的属性的值                        | 可用于删除 |\n| `view`            | 输出合并后的kubeconfig的内容，格式为 YAML，密文内容不会显示 |            |\n| `get-clusters`    | 输出所有的集群信息                                          |            |\n| `get-contexts`    | 输出所有的上下文信息，同时会标记哪一个是当前的上下文        |            |\n\n\n\n## 常见任务场景\n\n接下来我们列举一些常见的任务场景。\n\n### 0x01 查看当前所有的集群\n\n```shell\n$ kubectl config get-clusters\nNAME\nkubernetes\n```\n\n\n\n### 0x02 修改集群服务器地址\n\n首先我们使用以下命令来看下集群 kubernetes 的 server 属性的值：\n\n```shell\n$ kubectl config view -o jsonpath='{.clusters[?(@.name == \"kubernetes\")].cluster.server}'\nhttp://127.0.0.1:8443\n```\n\n接下来我们是用 `set-cluster` 子命令来修改服务器的地址：\n\n```shell\n# 修改集群服务器地址为 https://192.168.1.10:8443\n$ kubectl config set-cluster kubernetes --server=https://192.168.1.10:8443\nCluster \"kubernetes\" set.\n\n# 再次查看集群的服务器地址\n$ kubectl config view -o jsonpath='{.clusters[?(@.name == \"kubernetes\")].cluster.server}'\nhttps://192.168.1.10:8443\n```\n\n\n\n### 0x03 删除一个集群\n\n```shell\n# 删除集群 docker-desktop\n$ kubectl config delete-cluster docker-desktop\ndeleted cluster docker-desktop from /Users/eliuhy/.kube/config\n```\n\n\n\n### 0x04 删除一个用户\n\n`kubectl config` 未直接提供的删除用户的子命令，所以我们找不到类似于 `delete-user` 之类的选项。不过我们可以使用 `unset` 子命令来完成这个任务：\n\n```shell\n# 删除用户 docker-desktop\n$ kubectl config unset users.docker-desktop\nProperty \"users.docker-desktop\" unset.\n```\n\n\n\n### 0x05 查看当前所有的上下文\n\n```shell\n$ kubectl config get-contexts\nCURRENT   NAME                          CLUSTER      AUTHINFO           NAMESPACE\n*         kt-connect@kubernetes         kubernetes   kt-connect         default\n          kubernetes-admin@kubernetes   kubernetes   kubernetes-admin   kube-system\n```\n\n\n\n### 0x06 删除上下文信息\n\n```shell\n# 删除上下文 docker-desktop\n$ kubectl config delete-context docker-desktop\ndeleted context docker-desktop from /Users/eliuhy/.kube/config\n```\n\n\n\n### 0x07 更新上下文的命名空间\n\n```shell\n# 查看上下文 kubernetes-admin@kubernetes 的详细信息\n$ kubectl config get-contexts kubernetes-admin@kubernetes\nCURRENT   NAME                          CLUSTER      AUTHINFO           NAMESPACE\n          kubernetes-admin@kubernetes   kubernetes   kubernetes-admin   default\n\n# 修改上下文的命名空间为 kube-system\n$ kubectl config set-context kubernetes-admin@kubernetes --namespace=kube-system\nContext \"kubernetes-admin@kubernetes\" modified.\n\n# 再次查看上下文信息\n$ kubectl config get-contexts kubernetes-admin@kubernetes\nCURRENT   NAME                          CLUSTER      AUTHINFO           NAMESPACE\n          kubernetes-admin@kubernetes   kubernetes   kubernetes-admin   kube-system\n```\n\n\n\n### 0x08 修改当前激活的上下文\n\n```shell\n# 查看当前激活的上下文，CURRENT 列标记星号的为当前激活的上下文\n$ kubectl config get-contexts\nCURRENT   NAME                          CLUSTER      AUTHINFO           NAMESPACE\n*         kt-connect@kubernetes         kubernetes   kt-connect         default\n          kubernetes-admin@kubernetes   kubernetes   kubernetes-admin   kube-system\n\n# 修改当前激活的上下文为 kubernetes-admin@kubernetes\n$ kubectl config use-context kubernetes-admin@kubernetes\nSwitched to context \"kubernetes-admin@kubernetes\".\n\n# 再次确认是否激活成功\n$ kubectl config get-contexts\nCURRENT   NAME                          CLUSTER      AUTHINFO           NAMESPACE\n          kt-connect@kubernetes         kubernetes   kt-connect         default\n*         kubernetes-admin@kubernetes   kubernetes   kubernetes-admin   kube-system\n```\n\n\n\n## 总结\n\n建议大家使用 `kubectl config` 的方式来配置 `kubeconfig` 文件，避免了手工修改的麻烦和误配置之外，对于自动化管理也可以更加规范和统一。\n\n","slug":"manage-kubeconfig","published":1,"updated":"2020-03-28T06:36:42.233Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmasb6npt000v7sosfzctdlcv","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>Kubernetes 集群在服务器搭建部署成功之后，通常我们都会通过 <code>kubectl</code> 命令行工具与集群互动、发送操作指令来管理集群。<code>kubectl</code> 主要依赖于集群配置文件 <code>kubeconfig</code> 与集群进行通讯，这个文件通常在 Kubernetes 集群的 master 节点服务器的 <code>$HOME/.kube/config</code> 目录下。开发者可以从服务器获取改配置文件到开发者本地电脑上的相同目录位置上即可。</p>\n<p>本篇文章主要介绍一下我们如何管理这个配置文件。如果熟悉 <code>kubeconfig</code> 文件的结构，读者当然可以使用文本编辑器自行修改，不过手工修改难免会有错误和不便。所以这里介绍一下如何利用 <code>kubectl</code> 工具来帮助我们管理和调整配置文件。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"kubeconfig-的结构\"><a href=\"#kubeconfig-的结构\" class=\"headerlink\" title=\"kubeconfig 的结构\"></a>kubeconfig 的结构</h2><p>kubeconfig 是一个 Kubernetes 中的一个资源对象，叫做 <code>Config</code> , 内容格式是 YAML 。这个文件中主要包含了集群（clusters）、上下文（contexts）和用户（users）信息，他们的层次结构和关系如下图所示：</p>\n<p><img data-src=\"/2020/03/28/manage-kubeconfig/kubeconfig-structure.png\" alt=\"kubeconfig 结构关系图\"></p>\n<p>如图所示，上下文 context 是建立集群、用户和命名空间之间关系的桥梁和纽带，我们在本地切换所谓的“环境”其实就是将一个指定的上下文为当前激活的上下文（current-context）。再通俗点讲，这个上下文指的就是你当前是以什么身份（user) 在连接哪个集群（cluster），连接后自动切换到哪一个命名空间（namespace）下。</p>\n<h2 id=\"kubectl-config\"><a href=\"#kubectl-config\" class=\"headerlink\" title=\"kubectl config\"></a>kubectl config</h2><p><code>kubectl</code> 中的 <code>config</code> 子命令可以帮助我们维护存储在本地的配置文件，我们先来看下它的帮助说明：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> kubectl config --<span class=\"built_in\">help</span></span></span><br><span class=\"line\">Modify kubeconfig files using subcommands like &quot;kubectl config set current-context my-context&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"> The loading order follows these rules:</span><br><span class=\"line\"></span><br><span class=\"line\">  1.  If the --kubeconfig flag is set, then only that file is loaded. The flag may only be set once and no merging takes</span><br><span class=\"line\">place.</span><br><span class=\"line\">  2.  If $KUBECONFIG environment variable is set, then it is used as a list of paths (normal path delimiting rules for</span><br><span class=\"line\">your system). These paths are merged. When a value is modified, it is modified in the file that defines the stanza. When</span><br><span class=\"line\">a value is created, it is created in the first file that exists. If no files in the chain exist, then it creates the</span><br><span class=\"line\">last file in the list.</span><br><span class=\"line\">  3.  Otherwise, $&#123;HOME&#125;/.kube/config is used and no merging takes place.</span><br><span class=\"line\"></span><br><span class=\"line\">Available Commands:</span><br><span class=\"line\">  current-context Displays the current-context</span><br><span class=\"line\">  delete-cluster  Delete the specified cluster from the kubeconfig</span><br><span class=\"line\">  delete-context  Delete the specified context from the kubeconfig</span><br><span class=\"line\">  get-clusters    Display clusters defined in the kubeconfig</span><br><span class=\"line\">  get-contexts    Describe one or many contexts</span><br><span class=\"line\">  rename-context  Renames a context from the kubeconfig file.</span><br><span class=\"line\">  set             Sets an individual value in a kubeconfig file</span><br><span class=\"line\">  set-cluster     Sets a cluster entry in kubeconfig</span><br><span class=\"line\">  set-context     Sets a context entry in kubeconfig</span><br><span class=\"line\">  set-credentials Sets a user entry in kubeconfig</span><br><span class=\"line\">  unset           Unsets an individual value in a kubeconfig file</span><br><span class=\"line\">  use-context     Sets the current-context in a kubeconfig file</span><br><span class=\"line\">  view            Display merged kubeconfig settings or a specified kubeconfig file</span><br><span class=\"line\"></span><br><span class=\"line\">Usage:</span><br><span class=\"line\">  kubectl config SUBCOMMAND [options]</span><br><span class=\"line\"></span><br><span class=\"line\">Use &quot;kubectl &lt;command&gt; --help&quot; for more information about a given command.</span><br><span class=\"line\">Use &quot;kubectl options&quot; for a list of global command-line options (applies to all commands).</span><br></pre></td></tr></table></figure>\n\n<p>这里简要说明一下config下几个主要的子命令：</p>\n<table>\n<thead>\n<tr>\n<th>子命令</th>\n<th>说明</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>current-context</code></td>\n<td>显示当前的上下文名称</td>\n<td></td>\n</tr>\n<tr>\n<td><code>use-context</code></td>\n<td>指定某个上下文为当前激活的上下文</td>\n<td></td>\n</tr>\n<tr>\n<td><code>rename-context</code></td>\n<td>重命名一个上下文</td>\n<td></td>\n</tr>\n<tr>\n<td><code>delete-context</code></td>\n<td>从 kubeconfig 中删除指定的上下文</td>\n<td></td>\n</tr>\n<tr>\n<td><code>delete-cluster</code></td>\n<td>从 kubeconfig 中删除指定的集群</td>\n<td></td>\n</tr>\n<tr>\n<td><code>set</code></td>\n<td>设置 kubeconfig 中一个具体的属性的值</td>\n<td></td>\n</tr>\n<tr>\n<td><code>set-cluster</code></td>\n<td>设置指定集群的属性</td>\n<td></td>\n</tr>\n<tr>\n<td><code>set-context</code></td>\n<td>设置指定上下文的属性</td>\n<td></td>\n</tr>\n<tr>\n<td><code>set-credentials</code></td>\n<td>设置指定用户的属性</td>\n<td>无法删除</td>\n</tr>\n<tr>\n<td><code>unset</code></td>\n<td>删除 kubeconfig 中一个具体的属性的值</td>\n<td>可用于删除</td>\n</tr>\n<tr>\n<td><code>view</code></td>\n<td>输出合并后的kubeconfig的内容，格式为 YAML，密文内容不会显示</td>\n<td></td>\n</tr>\n<tr>\n<td><code>get-clusters</code></td>\n<td>输出所有的集群信息</td>\n<td></td>\n</tr>\n<tr>\n<td><code>get-contexts</code></td>\n<td>输出所有的上下文信息，同时会标记哪一个是当前的上下文</td>\n<td></td>\n</tr>\n</tbody></table>\n<h2 id=\"常见任务场景\"><a href=\"#常见任务场景\" class=\"headerlink\" title=\"常见任务场景\"></a>常见任务场景</h2><p>接下来我们列举一些常见的任务场景。</p>\n<h3 id=\"0x01-查看当前所有的集群\"><a href=\"#0x01-查看当前所有的集群\" class=\"headerlink\" title=\"0x01 查看当前所有的集群\"></a>0x01 查看当前所有的集群</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> kubectl config get-clusters</span></span><br><span class=\"line\">NAME</span><br><span class=\"line\">kubernetes</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"0x02-修改集群服务器地址\"><a href=\"#0x02-修改集群服务器地址\" class=\"headerlink\" title=\"0x02 修改集群服务器地址\"></a>0x02 修改集群服务器地址</h3><p>首先我们使用以下命令来看下集群 kubernetes 的 server 属性的值：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> kubectl config view -o jsonpath=<span class=\"string\">&#x27;&#123;.clusters[?(@.name == &quot;kubernetes&quot;)].cluster.server&#125;&#x27;</span></span></span><br><span class=\"line\">http://127.0.0.1:8443</span><br></pre></td></tr></table></figure>\n\n<p>接下来我们是用 <code>set-cluster</code> 子命令来修改服务器的地址：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 修改集群服务器地址为 https://192.168.1.10:8443</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> kubectl config set-cluster kubernetes --server=https://192.168.1.10:8443</span></span><br><span class=\"line\">Cluster &quot;kubernetes&quot; set.</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 再次查看集群的服务器地址</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> kubectl config view -o jsonpath=<span class=\"string\">&#x27;&#123;.clusters[?(@.name == &quot;kubernetes&quot;)].cluster.server&#125;&#x27;</span></span></span><br><span class=\"line\">https://192.168.1.10:8443</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"0x03-删除一个集群\"><a href=\"#0x03-删除一个集群\" class=\"headerlink\" title=\"0x03 删除一个集群\"></a>0x03 删除一个集群</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 删除集群 docker-desktop</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> kubectl config delete-cluster docker-desktop</span></span><br><span class=\"line\">deleted cluster docker-desktop from /Users/eliuhy/.kube/config</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"0x04-删除一个用户\"><a href=\"#0x04-删除一个用户\" class=\"headerlink\" title=\"0x04 删除一个用户\"></a>0x04 删除一个用户</h3><p><code>kubectl config</code> 未直接提供的删除用户的子命令，所以我们找不到类似于 <code>delete-user</code> 之类的选项。不过我们可以使用 <code>unset</code> 子命令来完成这个任务：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 删除用户 docker-desktop</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> kubectl config <span class=\"built_in\">unset</span> users.docker-desktop</span></span><br><span class=\"line\">Property &quot;users.docker-desktop&quot; unset.</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"0x05-查看当前所有的上下文\"><a href=\"#0x05-查看当前所有的上下文\" class=\"headerlink\" title=\"0x05 查看当前所有的上下文\"></a>0x05 查看当前所有的上下文</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> kubectl config get-contexts</span></span><br><span class=\"line\">CURRENT   NAME                          CLUSTER      AUTHINFO           NAMESPACE</span><br><span class=\"line\">*         kt-connect@kubernetes         kubernetes   kt-connect         default</span><br><span class=\"line\">          kubernetes-admin@kubernetes   kubernetes   kubernetes-admin   kube-system</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"0x06-删除上下文信息\"><a href=\"#0x06-删除上下文信息\" class=\"headerlink\" title=\"0x06 删除上下文信息\"></a>0x06 删除上下文信息</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 删除上下文 docker-desktop</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> kubectl config delete-context docker-desktop</span></span><br><span class=\"line\">deleted context docker-desktop from /Users/eliuhy/.kube/config</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"0x07-更新上下文的命名空间\"><a href=\"#0x07-更新上下文的命名空间\" class=\"headerlink\" title=\"0x07 更新上下文的命名空间\"></a>0x07 更新上下文的命名空间</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看上下文 kubernetes-admin@kubernetes 的详细信息</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> kubectl config get-contexts kubernetes-admin@kubernetes</span></span><br><span class=\"line\">CURRENT   NAME                          CLUSTER      AUTHINFO           NAMESPACE</span><br><span class=\"line\">          kubernetes-admin@kubernetes   kubernetes   kubernetes-admin   default</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 修改上下文的命名空间为 kube-system</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> kubectl config set-context kubernetes-admin@kubernetes --namespace=kube-system</span></span><br><span class=\"line\">Context &quot;kubernetes-admin@kubernetes&quot; modified.</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 再次查看上下文信息</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> kubectl config get-contexts kubernetes-admin@kubernetes</span></span><br><span class=\"line\">CURRENT   NAME                          CLUSTER      AUTHINFO           NAMESPACE</span><br><span class=\"line\">          kubernetes-admin@kubernetes   kubernetes   kubernetes-admin   kube-system</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"0x08-修改当前激活的上下文\"><a href=\"#0x08-修改当前激活的上下文\" class=\"headerlink\" title=\"0x08 修改当前激活的上下文\"></a>0x08 修改当前激活的上下文</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看当前激活的上下文，CURRENT 列标记星号的为当前激活的上下文</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> kubectl config get-contexts</span></span><br><span class=\"line\">CURRENT   NAME                          CLUSTER      AUTHINFO           NAMESPACE</span><br><span class=\"line\">*         kt-connect@kubernetes         kubernetes   kt-connect         default</span><br><span class=\"line\">          kubernetes-admin@kubernetes   kubernetes   kubernetes-admin   kube-system</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 修改当前激活的上下文为 kubernetes-admin@kubernetes</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> kubectl config use-context kubernetes-admin@kubernetes</span></span><br><span class=\"line\">Switched to context &quot;kubernetes-admin@kubernetes&quot;.</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 再次确认是否激活成功</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> kubectl config get-contexts</span></span><br><span class=\"line\">CURRENT   NAME                          CLUSTER      AUTHINFO           NAMESPACE</span><br><span class=\"line\">          kt-connect@kubernetes         kubernetes   kt-connect         default</span><br><span class=\"line\">*         kubernetes-admin@kubernetes   kubernetes   kubernetes-admin   kube-system</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>建议大家使用 <code>kubectl config</code> 的方式来配置 <code>kubeconfig</code> 文件，避免了手工修改的麻烦和误配置之外，对于自动化管理也可以更加规范和统一。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>Kubernetes 集群在服务器搭建部署成功之后，通常我们都会通过 <code>kubectl</code> 命令行工具与集群互动、发送操作指令来管理集群。<code>kubectl</code> 主要依赖于集群配置文件 <code>kubeconfig</code> 与集群进行通讯，这个文件通常在 Kubernetes 集群的 master 节点服务器的 <code>$HOME/.kube/config</code> 目录下。开发者可以从服务器获取改配置文件到开发者本地电脑上的相同目录位置上即可。</p>\n<p>本篇文章主要介绍一下我们如何管理这个配置文件。如果熟悉 <code>kubeconfig</code> 文件的结构，读者当然可以使用文本编辑器自行修改，不过手工修改难免会有错误和不便。所以这里介绍一下如何利用 <code>kubectl</code> 工具来帮助我们管理和调整配置文件。</p>","more":"<h2 id=\"kubeconfig-的结构\"><a href=\"#kubeconfig-的结构\" class=\"headerlink\" title=\"kubeconfig 的结构\"></a>kubeconfig 的结构</h2><p>kubeconfig 是一个 Kubernetes 中的一个资源对象，叫做 <code>Config</code> , 内容格式是 YAML 。这个文件中主要包含了集群（clusters）、上下文（contexts）和用户（users）信息，他们的层次结构和关系如下图所示：</p>\n<p><img data-src=\"/2020/03/28/manage-kubeconfig/kubeconfig-structure.png\" alt=\"kubeconfig 结构关系图\"></p>\n<p>如图所示，上下文 context 是建立集群、用户和命名空间之间关系的桥梁和纽带，我们在本地切换所谓的“环境”其实就是将一个指定的上下文为当前激活的上下文（current-context）。再通俗点讲，这个上下文指的就是你当前是以什么身份（user) 在连接哪个集群（cluster），连接后自动切换到哪一个命名空间（namespace）下。</p>\n<h2 id=\"kubectl-config\"><a href=\"#kubectl-config\" class=\"headerlink\" title=\"kubectl config\"></a>kubectl config</h2><p><code>kubectl</code> 中的 <code>config</code> 子命令可以帮助我们维护存储在本地的配置文件，我们先来看下它的帮助说明：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> kubectl config --<span class=\"built_in\">help</span></span></span><br><span class=\"line\">Modify kubeconfig files using subcommands like &quot;kubectl config set current-context my-context&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"> The loading order follows these rules:</span><br><span class=\"line\"></span><br><span class=\"line\">  1.  If the --kubeconfig flag is set, then only that file is loaded. The flag may only be set once and no merging takes</span><br><span class=\"line\">place.</span><br><span class=\"line\">  2.  If $KUBECONFIG environment variable is set, then it is used as a list of paths (normal path delimiting rules for</span><br><span class=\"line\">your system). These paths are merged. When a value is modified, it is modified in the file that defines the stanza. When</span><br><span class=\"line\">a value is created, it is created in the first file that exists. If no files in the chain exist, then it creates the</span><br><span class=\"line\">last file in the list.</span><br><span class=\"line\">  3.  Otherwise, $&#123;HOME&#125;/.kube/config is used and no merging takes place.</span><br><span class=\"line\"></span><br><span class=\"line\">Available Commands:</span><br><span class=\"line\">  current-context Displays the current-context</span><br><span class=\"line\">  delete-cluster  Delete the specified cluster from the kubeconfig</span><br><span class=\"line\">  delete-context  Delete the specified context from the kubeconfig</span><br><span class=\"line\">  get-clusters    Display clusters defined in the kubeconfig</span><br><span class=\"line\">  get-contexts    Describe one or many contexts</span><br><span class=\"line\">  rename-context  Renames a context from the kubeconfig file.</span><br><span class=\"line\">  set             Sets an individual value in a kubeconfig file</span><br><span class=\"line\">  set-cluster     Sets a cluster entry in kubeconfig</span><br><span class=\"line\">  set-context     Sets a context entry in kubeconfig</span><br><span class=\"line\">  set-credentials Sets a user entry in kubeconfig</span><br><span class=\"line\">  unset           Unsets an individual value in a kubeconfig file</span><br><span class=\"line\">  use-context     Sets the current-context in a kubeconfig file</span><br><span class=\"line\">  view            Display merged kubeconfig settings or a specified kubeconfig file</span><br><span class=\"line\"></span><br><span class=\"line\">Usage:</span><br><span class=\"line\">  kubectl config SUBCOMMAND [options]</span><br><span class=\"line\"></span><br><span class=\"line\">Use &quot;kubectl &lt;command&gt; --help&quot; for more information about a given command.</span><br><span class=\"line\">Use &quot;kubectl options&quot; for a list of global command-line options (applies to all commands).</span><br></pre></td></tr></table></figure>\n\n<p>这里简要说明一下config下几个主要的子命令：</p>\n<table>\n<thead>\n<tr>\n<th>子命令</th>\n<th>说明</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>current-context</code></td>\n<td>显示当前的上下文名称</td>\n<td></td>\n</tr>\n<tr>\n<td><code>use-context</code></td>\n<td>指定某个上下文为当前激活的上下文</td>\n<td></td>\n</tr>\n<tr>\n<td><code>rename-context</code></td>\n<td>重命名一个上下文</td>\n<td></td>\n</tr>\n<tr>\n<td><code>delete-context</code></td>\n<td>从 kubeconfig 中删除指定的上下文</td>\n<td></td>\n</tr>\n<tr>\n<td><code>delete-cluster</code></td>\n<td>从 kubeconfig 中删除指定的集群</td>\n<td></td>\n</tr>\n<tr>\n<td><code>set</code></td>\n<td>设置 kubeconfig 中一个具体的属性的值</td>\n<td></td>\n</tr>\n<tr>\n<td><code>set-cluster</code></td>\n<td>设置指定集群的属性</td>\n<td></td>\n</tr>\n<tr>\n<td><code>set-context</code></td>\n<td>设置指定上下文的属性</td>\n<td></td>\n</tr>\n<tr>\n<td><code>set-credentials</code></td>\n<td>设置指定用户的属性</td>\n<td>无法删除</td>\n</tr>\n<tr>\n<td><code>unset</code></td>\n<td>删除 kubeconfig 中一个具体的属性的值</td>\n<td>可用于删除</td>\n</tr>\n<tr>\n<td><code>view</code></td>\n<td>输出合并后的kubeconfig的内容，格式为 YAML，密文内容不会显示</td>\n<td></td>\n</tr>\n<tr>\n<td><code>get-clusters</code></td>\n<td>输出所有的集群信息</td>\n<td></td>\n</tr>\n<tr>\n<td><code>get-contexts</code></td>\n<td>输出所有的上下文信息，同时会标记哪一个是当前的上下文</td>\n<td></td>\n</tr>\n</tbody></table>\n<h2 id=\"常见任务场景\"><a href=\"#常见任务场景\" class=\"headerlink\" title=\"常见任务场景\"></a>常见任务场景</h2><p>接下来我们列举一些常见的任务场景。</p>\n<h3 id=\"0x01-查看当前所有的集群\"><a href=\"#0x01-查看当前所有的集群\" class=\"headerlink\" title=\"0x01 查看当前所有的集群\"></a>0x01 查看当前所有的集群</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> kubectl config get-clusters</span></span><br><span class=\"line\">NAME</span><br><span class=\"line\">kubernetes</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"0x02-修改集群服务器地址\"><a href=\"#0x02-修改集群服务器地址\" class=\"headerlink\" title=\"0x02 修改集群服务器地址\"></a>0x02 修改集群服务器地址</h3><p>首先我们使用以下命令来看下集群 kubernetes 的 server 属性的值：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> kubectl config view -o jsonpath=<span class=\"string\">&#x27;&#123;.clusters[?(@.name == &quot;kubernetes&quot;)].cluster.server&#125;&#x27;</span></span></span><br><span class=\"line\">http://127.0.0.1:8443</span><br></pre></td></tr></table></figure>\n\n<p>接下来我们是用 <code>set-cluster</code> 子命令来修改服务器的地址：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 修改集群服务器地址为 https://192.168.1.10:8443</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> kubectl config set-cluster kubernetes --server=https://192.168.1.10:8443</span></span><br><span class=\"line\">Cluster &quot;kubernetes&quot; set.</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 再次查看集群的服务器地址</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> kubectl config view -o jsonpath=<span class=\"string\">&#x27;&#123;.clusters[?(@.name == &quot;kubernetes&quot;)].cluster.server&#125;&#x27;</span></span></span><br><span class=\"line\">https://192.168.1.10:8443</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"0x03-删除一个集群\"><a href=\"#0x03-删除一个集群\" class=\"headerlink\" title=\"0x03 删除一个集群\"></a>0x03 删除一个集群</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 删除集群 docker-desktop</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> kubectl config delete-cluster docker-desktop</span></span><br><span class=\"line\">deleted cluster docker-desktop from /Users/eliuhy/.kube/config</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"0x04-删除一个用户\"><a href=\"#0x04-删除一个用户\" class=\"headerlink\" title=\"0x04 删除一个用户\"></a>0x04 删除一个用户</h3><p><code>kubectl config</code> 未直接提供的删除用户的子命令，所以我们找不到类似于 <code>delete-user</code> 之类的选项。不过我们可以使用 <code>unset</code> 子命令来完成这个任务：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 删除用户 docker-desktop</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> kubectl config <span class=\"built_in\">unset</span> users.docker-desktop</span></span><br><span class=\"line\">Property &quot;users.docker-desktop&quot; unset.</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"0x05-查看当前所有的上下文\"><a href=\"#0x05-查看当前所有的上下文\" class=\"headerlink\" title=\"0x05 查看当前所有的上下文\"></a>0x05 查看当前所有的上下文</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> kubectl config get-contexts</span></span><br><span class=\"line\">CURRENT   NAME                          CLUSTER      AUTHINFO           NAMESPACE</span><br><span class=\"line\">*         kt-connect@kubernetes         kubernetes   kt-connect         default</span><br><span class=\"line\">          kubernetes-admin@kubernetes   kubernetes   kubernetes-admin   kube-system</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"0x06-删除上下文信息\"><a href=\"#0x06-删除上下文信息\" class=\"headerlink\" title=\"0x06 删除上下文信息\"></a>0x06 删除上下文信息</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 删除上下文 docker-desktop</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> kubectl config delete-context docker-desktop</span></span><br><span class=\"line\">deleted context docker-desktop from /Users/eliuhy/.kube/config</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"0x07-更新上下文的命名空间\"><a href=\"#0x07-更新上下文的命名空间\" class=\"headerlink\" title=\"0x07 更新上下文的命名空间\"></a>0x07 更新上下文的命名空间</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看上下文 kubernetes-admin@kubernetes 的详细信息</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> kubectl config get-contexts kubernetes-admin@kubernetes</span></span><br><span class=\"line\">CURRENT   NAME                          CLUSTER      AUTHINFO           NAMESPACE</span><br><span class=\"line\">          kubernetes-admin@kubernetes   kubernetes   kubernetes-admin   default</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 修改上下文的命名空间为 kube-system</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> kubectl config set-context kubernetes-admin@kubernetes --namespace=kube-system</span></span><br><span class=\"line\">Context &quot;kubernetes-admin@kubernetes&quot; modified.</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 再次查看上下文信息</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> kubectl config get-contexts kubernetes-admin@kubernetes</span></span><br><span class=\"line\">CURRENT   NAME                          CLUSTER      AUTHINFO           NAMESPACE</span><br><span class=\"line\">          kubernetes-admin@kubernetes   kubernetes   kubernetes-admin   kube-system</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"0x08-修改当前激活的上下文\"><a href=\"#0x08-修改当前激活的上下文\" class=\"headerlink\" title=\"0x08 修改当前激活的上下文\"></a>0x08 修改当前激活的上下文</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看当前激活的上下文，CURRENT 列标记星号的为当前激活的上下文</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> kubectl config get-contexts</span></span><br><span class=\"line\">CURRENT   NAME                          CLUSTER      AUTHINFO           NAMESPACE</span><br><span class=\"line\">*         kt-connect@kubernetes         kubernetes   kt-connect         default</span><br><span class=\"line\">          kubernetes-admin@kubernetes   kubernetes   kubernetes-admin   kube-system</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 修改当前激活的上下文为 kubernetes-admin@kubernetes</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> kubectl config use-context kubernetes-admin@kubernetes</span></span><br><span class=\"line\">Switched to context &quot;kubernetes-admin@kubernetes&quot;.</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 再次确认是否激活成功</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> kubectl config get-contexts</span></span><br><span class=\"line\">CURRENT   NAME                          CLUSTER      AUTHINFO           NAMESPACE</span><br><span class=\"line\">          kt-connect@kubernetes         kubernetes   kt-connect         default</span><br><span class=\"line\">*         kubernetes-admin@kubernetes   kubernetes   kubernetes-admin   kube-system</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>建议大家使用 <code>kubectl config</code> 的方式来配置 <code>kubeconfig</code> 文件，避免了手工修改的麻烦和误配置之外，对于自动化管理也可以更加规范和统一。</p>"},{"title":"国内软件和镜像源集合","date":"2023-11-21T13:48:27.000Z","_content":"\n本文将持续更新目前已知的可以设置的国内软件源以及镜像源的设置方法，方便作者自己备查和减轻开发人员搭建环境的阻碍。\n\n## GNU/Linux 发行版软件源\n\n### CentOS 7\n\n```shell\n# run as root or sudo\nrm -fr /etc/yum.repos.d/*.repo\ncurl -sSL https://mirrors.aliyun.com/repo/Centos-7.repo -o /etc/yum.repos.d/CentOS-Base.repo\nsed -i -e '/mirrors.cloud.aliyuncs.com/d' \\\n       -e '/mirrors.aliyuncs.com/d' \\\n       /etc/yum.repos.d/CentOS-Base.repo\ncurl -sSL https://mirrors.aliyun.com/repo/epel-7.repo -o /etc/yum.repos.d/epel.repo\ncurl -sSL https://mirrors.aliyun.com/ius/ius-7.repo -o /etc/yum.repos.d/ius.repo\nsed -i 's repo.ius.io mirrors.aliyun.com/ius/ g' /etc/yum.repos.d/ius.repo\nyum clean all\nyum makecache fast\n```\n\n<!-- more -->\n\n### RockyLinux\n\n适用 RockyLinux 所有主流版本\n\n配置指引：https://developer.aliyun.com/mirror/rockylinux\n\n```shell\n# run as root or sudo\nsed -i.bak \\\n    -e 's|^mirrorlist=|#mirrorlist=|g' \\\n    -e 's|^#baseurl=http://dl.rockylinux.org/$contentdir|baseurl=https://mirrors.aliyun.com/rockylinux|g' \\\n    /etc/yum.repos.d/rocky*.repo\n```\n\n之后运行 `sudo dnf makecache` 更新缓存。\n\n### AlmaLinux\n\n```shell\n# https://developer.aliyun.com/mirror/almalinux\nsed -i.bak \\\n\t-e 's|^mirrorlist=|#mirrorlist=|g' \\\n\t-e 's|^#\\s*baseurl=https\\?://repo.almalinux.org|baseurl=https://mirrors.aliyun.com|g' \\\n\t/etc/yum.repos.d/almalinux*.repo\n```\n\n之后运行 `sudo dnf makecache` 更新缓存。\n\n## 设置 DNS\n\n刚刚安装完某个 GNU/Linux 发行版之后，发现软件包安装时跑不动或者经常超时，这时我们需要设置一下上网的网卡的DNS。\n\n```shell\n# run as root or sudo\nnetwork_uuid=\n\n# 找到自动上网的那个网卡\nfor uuid in $(nmcli -get-values UUID conn show --active); do\n  if [ \"auto\" = \"$(nmcli -terse conn show uuid $uuid | grep ipv4.method | awk -F '[:/]' '{print $2}')\" ]; then\n    network_uuid=$uuid\n  fi\ndone\n\n# 增加 DNS\nnmcli con mod $network_uuid +ipv4.dns 114.114.114.114\nnmcli con mod $network_uuid +ipv4.dns 8.8.8.8\n# 重启网络\nsystemctl restart NetworkManager\n```\n\n## npm 软件源\n\n```shell\n$ npm config set registry https://registry.npmmirror.com\n```\n\n## Python PIP 软件源\n\n安装的软件包的时候直接用 `-i` 制定源即可：\n\n```shell\n$ pip3 install some-package -i https://mirrors.aliyun.com/pypi/simple\n```\n\n## Maven 仓库\n\n阿里开源镜像站：[apache-maven安装包下载_开源镜像站-阿里云 (aliyun.com)](https://mirrors.aliyun.com/apache/maven/)\n\n## 容器相关\n\n### Podman\n\n```shell\n# run as root or sudo\nmv /etc/containers/registries.conf /etc/containers/registries.conf.bak\ncat > /etc/containers/registries.conf <<< EOF\nunqualified-search-registries = [\"docker.io\"]\n\n[[registry]]\nprefix = \"docker.io\"\ninsecure = false\nblocked = false\nlocation = \"docker.io\"\n[[registry.mirror]]\nlocation = \"hub-mirror.c.163.com\"\n[[registry.mirror]]\nlocation = \"registry.docker-cn.com\"\nEOF\n```\n\n### Docker\n\n```shell\n# run as root or sudo\n# 使用阿里云镜像源安装 docker\n# https://yq.aliyun.com/articles/110806?spm=a2c4e.11153940.0.0.108e435aDMp0n2&p=4#comments\n{\n\texport VERSION=\"17.09\" # docker ce version\n\tcurl -sSL https://get.docker.com | bash -s docker --mirror Aliyun\t\n}\n\n# 设置国内 docker 镜像源\nmv /etc/docker/daemon.json /etc/docker/daemon.json.bak\ncat > /etc/docker/daemon.json <<< EOF\n{\n    \"registry-mirrors\": [\n        \"https://8km017g6.mirror.aliyuncs.com\",\n        \"https://hub-mirror.c.163.com\",\n        \"https://registry.docker-cn.com\"\n    ]\n}\nEOF\n```\n\n### Minikube\n\n[AliyunContainerService/minikube: 普大喜奔，官方Minikube提供了完整对国内用户支持，完美支持Addon组件。 建议参考 https://yq.aliyun.com/articles/221687 或 https://github.com/AliyunContainerService/minikube/wiki 最新支持minikube v1.24.0](https://github.com/AliyunContainerService/minikube)\n\nWiki: [Home · AliyunContainerService/minikube Wiki (github.com)](https://github.com/AliyunContainerService/minikube/wiki)\n\n引用 Wiki 的一段话：\n\n> 为了方便大家开发和体验Kubernetes，社区提供了可以在本地部署的开发环境 [Minikube](https://github.com/kubernetes/minikube)。由于网络访问原因，很多朋友无法直接使用minikube进行实验。在v1.24.0的官方 Minikube 中，已经合并了由阿里云团队支持的方案，可以帮助大家利用阿里云的服务来获取所需Docker镜像，二进制文件和配置，也可以完美支持 Minikube 丰富的 addon 组件！\n\n### Kubernetes\n\n适用国内网络环境下安装 K8S 集群的工具：[TimeBye/kubeadm-ha](https://github.com/TimeBye/kubeadm-ha)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/mirrors-collection.md","raw":"---\ntitle: 国内软件和镜像源集合\ndate: 2023-11-21 21:48:27\ncategories:\n- DevOps\ntags:\n- 国内源\n- 镜像源\n---\n\n本文将持续更新目前已知的可以设置的国内软件源以及镜像源的设置方法，方便作者自己备查和减轻开发人员搭建环境的阻碍。\n\n## GNU/Linux 发行版软件源\n\n### CentOS 7\n\n```shell\n# run as root or sudo\nrm -fr /etc/yum.repos.d/*.repo\ncurl -sSL https://mirrors.aliyun.com/repo/Centos-7.repo -o /etc/yum.repos.d/CentOS-Base.repo\nsed -i -e '/mirrors.cloud.aliyuncs.com/d' \\\n       -e '/mirrors.aliyuncs.com/d' \\\n       /etc/yum.repos.d/CentOS-Base.repo\ncurl -sSL https://mirrors.aliyun.com/repo/epel-7.repo -o /etc/yum.repos.d/epel.repo\ncurl -sSL https://mirrors.aliyun.com/ius/ius-7.repo -o /etc/yum.repos.d/ius.repo\nsed -i 's repo.ius.io mirrors.aliyun.com/ius/ g' /etc/yum.repos.d/ius.repo\nyum clean all\nyum makecache fast\n```\n\n<!-- more -->\n\n### RockyLinux\n\n适用 RockyLinux 所有主流版本\n\n配置指引：https://developer.aliyun.com/mirror/rockylinux\n\n```shell\n# run as root or sudo\nsed -i.bak \\\n    -e 's|^mirrorlist=|#mirrorlist=|g' \\\n    -e 's|^#baseurl=http://dl.rockylinux.org/$contentdir|baseurl=https://mirrors.aliyun.com/rockylinux|g' \\\n    /etc/yum.repos.d/rocky*.repo\n```\n\n之后运行 `sudo dnf makecache` 更新缓存。\n\n### AlmaLinux\n\n```shell\n# https://developer.aliyun.com/mirror/almalinux\nsed -i.bak \\\n\t-e 's|^mirrorlist=|#mirrorlist=|g' \\\n\t-e 's|^#\\s*baseurl=https\\?://repo.almalinux.org|baseurl=https://mirrors.aliyun.com|g' \\\n\t/etc/yum.repos.d/almalinux*.repo\n```\n\n之后运行 `sudo dnf makecache` 更新缓存。\n\n## 设置 DNS\n\n刚刚安装完某个 GNU/Linux 发行版之后，发现软件包安装时跑不动或者经常超时，这时我们需要设置一下上网的网卡的DNS。\n\n```shell\n# run as root or sudo\nnetwork_uuid=\n\n# 找到自动上网的那个网卡\nfor uuid in $(nmcli -get-values UUID conn show --active); do\n  if [ \"auto\" = \"$(nmcli -terse conn show uuid $uuid | grep ipv4.method | awk -F '[:/]' '{print $2}')\" ]; then\n    network_uuid=$uuid\n  fi\ndone\n\n# 增加 DNS\nnmcli con mod $network_uuid +ipv4.dns 114.114.114.114\nnmcli con mod $network_uuid +ipv4.dns 8.8.8.8\n# 重启网络\nsystemctl restart NetworkManager\n```\n\n## npm 软件源\n\n```shell\n$ npm config set registry https://registry.npmmirror.com\n```\n\n## Python PIP 软件源\n\n安装的软件包的时候直接用 `-i` 制定源即可：\n\n```shell\n$ pip3 install some-package -i https://mirrors.aliyun.com/pypi/simple\n```\n\n## Maven 仓库\n\n阿里开源镜像站：[apache-maven安装包下载_开源镜像站-阿里云 (aliyun.com)](https://mirrors.aliyun.com/apache/maven/)\n\n## 容器相关\n\n### Podman\n\n```shell\n# run as root or sudo\nmv /etc/containers/registries.conf /etc/containers/registries.conf.bak\ncat > /etc/containers/registries.conf <<< EOF\nunqualified-search-registries = [\"docker.io\"]\n\n[[registry]]\nprefix = \"docker.io\"\ninsecure = false\nblocked = false\nlocation = \"docker.io\"\n[[registry.mirror]]\nlocation = \"hub-mirror.c.163.com\"\n[[registry.mirror]]\nlocation = \"registry.docker-cn.com\"\nEOF\n```\n\n### Docker\n\n```shell\n# run as root or sudo\n# 使用阿里云镜像源安装 docker\n# https://yq.aliyun.com/articles/110806?spm=a2c4e.11153940.0.0.108e435aDMp0n2&p=4#comments\n{\n\texport VERSION=\"17.09\" # docker ce version\n\tcurl -sSL https://get.docker.com | bash -s docker --mirror Aliyun\t\n}\n\n# 设置国内 docker 镜像源\nmv /etc/docker/daemon.json /etc/docker/daemon.json.bak\ncat > /etc/docker/daemon.json <<< EOF\n{\n    \"registry-mirrors\": [\n        \"https://8km017g6.mirror.aliyuncs.com\",\n        \"https://hub-mirror.c.163.com\",\n        \"https://registry.docker-cn.com\"\n    ]\n}\nEOF\n```\n\n### Minikube\n\n[AliyunContainerService/minikube: 普大喜奔，官方Minikube提供了完整对国内用户支持，完美支持Addon组件。 建议参考 https://yq.aliyun.com/articles/221687 或 https://github.com/AliyunContainerService/minikube/wiki 最新支持minikube v1.24.0](https://github.com/AliyunContainerService/minikube)\n\nWiki: [Home · AliyunContainerService/minikube Wiki (github.com)](https://github.com/AliyunContainerService/minikube/wiki)\n\n引用 Wiki 的一段话：\n\n> 为了方便大家开发和体验Kubernetes，社区提供了可以在本地部署的开发环境 [Minikube](https://github.com/kubernetes/minikube)。由于网络访问原因，很多朋友无法直接使用minikube进行实验。在v1.24.0的官方 Minikube 中，已经合并了由阿里云团队支持的方案，可以帮助大家利用阿里云的服务来获取所需Docker镜像，二进制文件和配置，也可以完美支持 Minikube 丰富的 addon 组件！\n\n### Kubernetes\n\n适用国内网络环境下安装 K8S 集群的工具：[TimeBye/kubeadm-ha](https://github.com/TimeBye/kubeadm-ha)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"mirrors-collection","published":1,"updated":"2024-01-03T13:13:37.015Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmasb6npu000y7sosg79a1bcj","content":"<p>本文将持续更新目前已知的可以设置的国内软件源以及镜像源的设置方法，方便作者自己备查和减轻开发人员搭建环境的阻碍。</p>\n<h2 id=\"GNU-Linux-发行版软件源\"><a href=\"#GNU-Linux-发行版软件源\" class=\"headerlink\" title=\"GNU/Linux 发行版软件源\"></a>GNU/Linux 发行版软件源</h2><h3 id=\"CentOS-7\"><a href=\"#CentOS-7\" class=\"headerlink\" title=\"CentOS 7\"></a>CentOS 7</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> run as root or sudo</span></span><br><span class=\"line\">rm -fr /etc/yum.repos.d/*.repo</span><br><span class=\"line\">curl -sSL https://mirrors.aliyun.com/repo/Centos-7.repo -o /etc/yum.repos.d/CentOS-Base.repo</span><br><span class=\"line\">sed -i -e &#x27;/mirrors.cloud.aliyuncs.com/d&#x27; \\</span><br><span class=\"line\">       -e &#x27;/mirrors.aliyuncs.com/d&#x27; \\</span><br><span class=\"line\">       /etc/yum.repos.d/CentOS-Base.repo</span><br><span class=\"line\">curl -sSL https://mirrors.aliyun.com/repo/epel-7.repo -o /etc/yum.repos.d/epel.repo</span><br><span class=\"line\">curl -sSL https://mirrors.aliyun.com/ius/ius-7.repo -o /etc/yum.repos.d/ius.repo</span><br><span class=\"line\">sed -i &#x27;s repo.ius.io mirrors.aliyun.com/ius/ g&#x27; /etc/yum.repos.d/ius.repo</span><br><span class=\"line\">yum clean all</span><br><span class=\"line\">yum makecache fast</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<h3 id=\"RockyLinux\"><a href=\"#RockyLinux\" class=\"headerlink\" title=\"RockyLinux\"></a>RockyLinux</h3><p>适用 RockyLinux 所有主流版本</p>\n<p>配置指引：<a href=\"https://developer.aliyun.com/mirror/rockylinux\">https://developer.aliyun.com/mirror/rockylinux</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> run as root or sudo</span></span><br><span class=\"line\">sed -i.bak \\</span><br><span class=\"line\">    -e &#x27;s|^mirrorlist=|#mirrorlist=|g&#x27; \\</span><br><span class=\"line\">    -e &#x27;s|^#baseurl=http://dl.rockylinux.org/$contentdir|baseurl=https://mirrors.aliyun.com/rockylinux|g&#x27; \\</span><br><span class=\"line\">    /etc/yum.repos.d/rocky*.repo</span><br></pre></td></tr></table></figure>\n\n<p>之后运行 <code>sudo dnf makecache</code> 更新缓存。</p>\n<h3 id=\"AlmaLinux\"><a href=\"#AlmaLinux\" class=\"headerlink\" title=\"AlmaLinux\"></a>AlmaLinux</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> https://developer.aliyun.com/mirror/almalinux</span></span><br><span class=\"line\">sed -i.bak \\</span><br><span class=\"line\">\t-e &#x27;s|^mirrorlist=|#mirrorlist=|g&#x27; \\</span><br><span class=\"line\">\t-e &#x27;s|^#\\s*baseurl=https\\?://repo.almalinux.org|baseurl=https://mirrors.aliyun.com|g&#x27; \\</span><br><span class=\"line\">\t/etc/yum.repos.d/almalinux*.repo</span><br></pre></td></tr></table></figure>\n\n<p>之后运行 <code>sudo dnf makecache</code> 更新缓存。</p>\n<h2 id=\"设置-DNS\"><a href=\"#设置-DNS\" class=\"headerlink\" title=\"设置 DNS\"></a>设置 DNS</h2><p>刚刚安装完某个 GNU/Linux 发行版之后，发现软件包安装时跑不动或者经常超时，这时我们需要设置一下上网的网卡的DNS。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> run as root or sudo</span></span><br><span class=\"line\">network_uuid=</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 找到自动上网的那个网卡</span></span><br><span class=\"line\">for uuid in $(nmcli -get-values UUID conn show --active); do</span><br><span class=\"line\">  if [ &quot;auto&quot; = &quot;$(nmcli -terse conn show uuid $uuid | grep ipv4.method | awk -F &#x27;[:/]&#x27; &#x27;&#123;print $2&#125;&#x27;)&quot; ]; then</span><br><span class=\"line\">    network_uuid=$uuid</span><br><span class=\"line\">  fi</span><br><span class=\"line\">done</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 增加 DNS</span></span><br><span class=\"line\">nmcli con mod $network_uuid +ipv4.dns 114.114.114.114</span><br><span class=\"line\">nmcli con mod $network_uuid +ipv4.dns 8.8.8.8</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 重启网络</span></span><br><span class=\"line\">systemctl restart NetworkManager</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"npm-软件源\"><a href=\"#npm-软件源\" class=\"headerlink\" title=\"npm 软件源\"></a>npm 软件源</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm config <span class=\"built_in\">set</span> registry https://registry.npmmirror.com</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Python-PIP-软件源\"><a href=\"#Python-PIP-软件源\" class=\"headerlink\" title=\"Python PIP 软件源\"></a>Python PIP 软件源</h2><p>安装的软件包的时候直接用 <code>-i</code> 制定源即可：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> pip3 install some-package -i https://mirrors.aliyun.com/pypi/simple</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Maven-仓库\"><a href=\"#Maven-仓库\" class=\"headerlink\" title=\"Maven 仓库\"></a>Maven 仓库</h2><p>阿里开源镜像站：<a href=\"https://mirrors.aliyun.com/apache/maven/\">apache-maven安装包下载_开源镜像站-阿里云 (aliyun.com)</a></p>\n<h2 id=\"容器相关\"><a href=\"#容器相关\" class=\"headerlink\" title=\"容器相关\"></a>容器相关</h2><h3 id=\"Podman\"><a href=\"#Podman\" class=\"headerlink\" title=\"Podman\"></a>Podman</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> run as root or sudo</span></span><br><span class=\"line\">mv /etc/containers/registries.conf /etc/containers/registries.conf.bak</span><br><span class=\"line\">cat &gt; /etc/containers/registries.conf &lt;&lt;&lt; EOF</span><br><span class=\"line\">unqualified-search-registries = [&quot;docker.io&quot;]</span><br><span class=\"line\"></span><br><span class=\"line\">[[registry]]</span><br><span class=\"line\">prefix = &quot;docker.io&quot;</span><br><span class=\"line\">insecure = false</span><br><span class=\"line\">blocked = false</span><br><span class=\"line\">location = &quot;docker.io&quot;</span><br><span class=\"line\">[[registry.mirror]]</span><br><span class=\"line\">location = &quot;hub-mirror.c.163.com&quot;</span><br><span class=\"line\">[[registry.mirror]]</span><br><span class=\"line\">location = &quot;registry.docker-cn.com&quot;</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Docker\"><a href=\"#Docker\" class=\"headerlink\" title=\"Docker\"></a>Docker</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> run as root or sudo</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 使用阿里云镜像源安装 docker</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> https://yq.aliyun.com/articles/110806?spm=a2c4e.11153940.0.0.108e435aDMp0n2&amp;p=4<span class=\"comment\">#comments</span></span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\texport VERSION=&quot;17.09&quot; # docker ce version</span><br><span class=\"line\">\tcurl -sSL https://get.docker.com | bash -s docker --mirror Aliyun\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 设置国内 docker 镜像源</span></span><br><span class=\"line\">mv /etc/docker/daemon.json /etc/docker/daemon.json.bak</span><br><span class=\"line\">cat &gt; /etc/docker/daemon.json &lt;&lt;&lt; EOF</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;registry-mirrors&quot;: [</span><br><span class=\"line\">        &quot;https://8km017g6.mirror.aliyuncs.com&quot;,</span><br><span class=\"line\">        &quot;https://hub-mirror.c.163.com&quot;,</span><br><span class=\"line\">        &quot;https://registry.docker-cn.com&quot;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Minikube\"><a href=\"#Minikube\" class=\"headerlink\" title=\"Minikube\"></a>Minikube</h3><p><a href=\"https://github.com/AliyunContainerService/minikube\">AliyunContainerService/minikube: 普大喜奔，官方Minikube提供了完整对国内用户支持，完美支持Addon组件。 建议参考 https://yq.aliyun.com/articles/221687 或 https://github.com/AliyunContainerService/minikube/wiki 最新支持minikube v1.24.0</a></p>\n<p>Wiki: <a href=\"https://github.com/AliyunContainerService/minikube/wiki\">Home · AliyunContainerService/minikube Wiki (github.com)</a></p>\n<p>引用 Wiki 的一段话：</p>\n<blockquote>\n<p>为了方便大家开发和体验Kubernetes，社区提供了可以在本地部署的开发环境 <a href=\"https://github.com/kubernetes/minikube\">Minikube</a>。由于网络访问原因，很多朋友无法直接使用minikube进行实验。在v1.24.0的官方 Minikube 中，已经合并了由阿里云团队支持的方案，可以帮助大家利用阿里云的服务来获取所需Docker镜像，二进制文件和配置，也可以完美支持 Minikube 丰富的 addon 组件！</p>\n</blockquote>\n<h3 id=\"Kubernetes\"><a href=\"#Kubernetes\" class=\"headerlink\" title=\"Kubernetes\"></a>Kubernetes</h3><p>适用国内网络环境下安装 K8S 集群的工具：<a href=\"https://github.com/TimeBye/kubeadm-ha\">TimeBye/kubeadm-ha</a></p>\n","site":{"data":{}},"excerpt":"<p>本文将持续更新目前已知的可以设置的国内软件源以及镜像源的设置方法，方便作者自己备查和减轻开发人员搭建环境的阻碍。</p>\n<h2 id=\"GNU-Linux-发行版软件源\"><a href=\"#GNU-Linux-发行版软件源\" class=\"headerlink\" title=\"GNU/Linux 发行版软件源\"></a>GNU/Linux 发行版软件源</h2><h3 id=\"CentOS-7\"><a href=\"#CentOS-7\" class=\"headerlink\" title=\"CentOS 7\"></a>CentOS 7</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> run as root or sudo</span></span><br><span class=\"line\">rm -fr /etc/yum.repos.d/*.repo</span><br><span class=\"line\">curl -sSL https://mirrors.aliyun.com/repo/Centos-7.repo -o /etc/yum.repos.d/CentOS-Base.repo</span><br><span class=\"line\">sed -i -e &#x27;/mirrors.cloud.aliyuncs.com/d&#x27; \\</span><br><span class=\"line\">       -e &#x27;/mirrors.aliyuncs.com/d&#x27; \\</span><br><span class=\"line\">       /etc/yum.repos.d/CentOS-Base.repo</span><br><span class=\"line\">curl -sSL https://mirrors.aliyun.com/repo/epel-7.repo -o /etc/yum.repos.d/epel.repo</span><br><span class=\"line\">curl -sSL https://mirrors.aliyun.com/ius/ius-7.repo -o /etc/yum.repos.d/ius.repo</span><br><span class=\"line\">sed -i &#x27;s repo.ius.io mirrors.aliyun.com/ius/ g&#x27; /etc/yum.repos.d/ius.repo</span><br><span class=\"line\">yum clean all</span><br><span class=\"line\">yum makecache fast</span><br></pre></td></tr></table></figure>","more":"<h3 id=\"RockyLinux\"><a href=\"#RockyLinux\" class=\"headerlink\" title=\"RockyLinux\"></a>RockyLinux</h3><p>适用 RockyLinux 所有主流版本</p>\n<p>配置指引：<a href=\"https://developer.aliyun.com/mirror/rockylinux\">https://developer.aliyun.com/mirror/rockylinux</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> run as root or sudo</span></span><br><span class=\"line\">sed -i.bak \\</span><br><span class=\"line\">    -e &#x27;s|^mirrorlist=|#mirrorlist=|g&#x27; \\</span><br><span class=\"line\">    -e &#x27;s|^#baseurl=http://dl.rockylinux.org/$contentdir|baseurl=https://mirrors.aliyun.com/rockylinux|g&#x27; \\</span><br><span class=\"line\">    /etc/yum.repos.d/rocky*.repo</span><br></pre></td></tr></table></figure>\n\n<p>之后运行 <code>sudo dnf makecache</code> 更新缓存。</p>\n<h3 id=\"AlmaLinux\"><a href=\"#AlmaLinux\" class=\"headerlink\" title=\"AlmaLinux\"></a>AlmaLinux</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> https://developer.aliyun.com/mirror/almalinux</span></span><br><span class=\"line\">sed -i.bak \\</span><br><span class=\"line\">\t-e &#x27;s|^mirrorlist=|#mirrorlist=|g&#x27; \\</span><br><span class=\"line\">\t-e &#x27;s|^#\\s*baseurl=https\\?://repo.almalinux.org|baseurl=https://mirrors.aliyun.com|g&#x27; \\</span><br><span class=\"line\">\t/etc/yum.repos.d/almalinux*.repo</span><br></pre></td></tr></table></figure>\n\n<p>之后运行 <code>sudo dnf makecache</code> 更新缓存。</p>\n<h2 id=\"设置-DNS\"><a href=\"#设置-DNS\" class=\"headerlink\" title=\"设置 DNS\"></a>设置 DNS</h2><p>刚刚安装完某个 GNU/Linux 发行版之后，发现软件包安装时跑不动或者经常超时，这时我们需要设置一下上网的网卡的DNS。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> run as root or sudo</span></span><br><span class=\"line\">network_uuid=</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 找到自动上网的那个网卡</span></span><br><span class=\"line\">for uuid in $(nmcli -get-values UUID conn show --active); do</span><br><span class=\"line\">  if [ &quot;auto&quot; = &quot;$(nmcli -terse conn show uuid $uuid | grep ipv4.method | awk -F &#x27;[:/]&#x27; &#x27;&#123;print $2&#125;&#x27;)&quot; ]; then</span><br><span class=\"line\">    network_uuid=$uuid</span><br><span class=\"line\">  fi</span><br><span class=\"line\">done</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 增加 DNS</span></span><br><span class=\"line\">nmcli con mod $network_uuid +ipv4.dns 114.114.114.114</span><br><span class=\"line\">nmcli con mod $network_uuid +ipv4.dns 8.8.8.8</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 重启网络</span></span><br><span class=\"line\">systemctl restart NetworkManager</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"npm-软件源\"><a href=\"#npm-软件源\" class=\"headerlink\" title=\"npm 软件源\"></a>npm 软件源</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm config <span class=\"built_in\">set</span> registry https://registry.npmmirror.com</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Python-PIP-软件源\"><a href=\"#Python-PIP-软件源\" class=\"headerlink\" title=\"Python PIP 软件源\"></a>Python PIP 软件源</h2><p>安装的软件包的时候直接用 <code>-i</code> 制定源即可：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> pip3 install some-package -i https://mirrors.aliyun.com/pypi/simple</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Maven-仓库\"><a href=\"#Maven-仓库\" class=\"headerlink\" title=\"Maven 仓库\"></a>Maven 仓库</h2><p>阿里开源镜像站：<a href=\"https://mirrors.aliyun.com/apache/maven/\">apache-maven安装包下载_开源镜像站-阿里云 (aliyun.com)</a></p>\n<h2 id=\"容器相关\"><a href=\"#容器相关\" class=\"headerlink\" title=\"容器相关\"></a>容器相关</h2><h3 id=\"Podman\"><a href=\"#Podman\" class=\"headerlink\" title=\"Podman\"></a>Podman</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> run as root or sudo</span></span><br><span class=\"line\">mv /etc/containers/registries.conf /etc/containers/registries.conf.bak</span><br><span class=\"line\">cat &gt; /etc/containers/registries.conf &lt;&lt;&lt; EOF</span><br><span class=\"line\">unqualified-search-registries = [&quot;docker.io&quot;]</span><br><span class=\"line\"></span><br><span class=\"line\">[[registry]]</span><br><span class=\"line\">prefix = &quot;docker.io&quot;</span><br><span class=\"line\">insecure = false</span><br><span class=\"line\">blocked = false</span><br><span class=\"line\">location = &quot;docker.io&quot;</span><br><span class=\"line\">[[registry.mirror]]</span><br><span class=\"line\">location = &quot;hub-mirror.c.163.com&quot;</span><br><span class=\"line\">[[registry.mirror]]</span><br><span class=\"line\">location = &quot;registry.docker-cn.com&quot;</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Docker\"><a href=\"#Docker\" class=\"headerlink\" title=\"Docker\"></a>Docker</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> run as root or sudo</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 使用阿里云镜像源安装 docker</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> https://yq.aliyun.com/articles/110806?spm=a2c4e.11153940.0.0.108e435aDMp0n2&amp;p=4<span class=\"comment\">#comments</span></span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\texport VERSION=&quot;17.09&quot; # docker ce version</span><br><span class=\"line\">\tcurl -sSL https://get.docker.com | bash -s docker --mirror Aliyun\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 设置国内 docker 镜像源</span></span><br><span class=\"line\">mv /etc/docker/daemon.json /etc/docker/daemon.json.bak</span><br><span class=\"line\">cat &gt; /etc/docker/daemon.json &lt;&lt;&lt; EOF</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;registry-mirrors&quot;: [</span><br><span class=\"line\">        &quot;https://8km017g6.mirror.aliyuncs.com&quot;,</span><br><span class=\"line\">        &quot;https://hub-mirror.c.163.com&quot;,</span><br><span class=\"line\">        &quot;https://registry.docker-cn.com&quot;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Minikube\"><a href=\"#Minikube\" class=\"headerlink\" title=\"Minikube\"></a>Minikube</h3><p><a href=\"https://github.com/AliyunContainerService/minikube\">AliyunContainerService/minikube: 普大喜奔，官方Minikube提供了完整对国内用户支持，完美支持Addon组件。 建议参考 https://yq.aliyun.com/articles/221687 或 https://github.com/AliyunContainerService/minikube/wiki 最新支持minikube v1.24.0</a></p>\n<p>Wiki: <a href=\"https://github.com/AliyunContainerService/minikube/wiki\">Home · AliyunContainerService/minikube Wiki (github.com)</a></p>\n<p>引用 Wiki 的一段话：</p>\n<blockquote>\n<p>为了方便大家开发和体验Kubernetes，社区提供了可以在本地部署的开发环境 <a href=\"https://github.com/kubernetes/minikube\">Minikube</a>。由于网络访问原因，很多朋友无法直接使用minikube进行实验。在v1.24.0的官方 Minikube 中，已经合并了由阿里云团队支持的方案，可以帮助大家利用阿里云的服务来获取所需Docker镜像，二进制文件和配置，也可以完美支持 Minikube 丰富的 addon 组件！</p>\n</blockquote>\n<h3 id=\"Kubernetes\"><a href=\"#Kubernetes\" class=\"headerlink\" title=\"Kubernetes\"></a>Kubernetes</h3><p>适用国内网络环境下安装 K8S 集群的工具：<a href=\"https://github.com/TimeBye/kubeadm-ha\">TimeBye/kubeadm-ha</a></p>"},{"title":"memories-part-1","date":"2024-10-21T14:10:51.000Z","_content":"","source":"_posts/memories-part-1.md","raw":"---\ntitle: memories-part-1\ndate: 2024-10-21 22:10:51\ncategories:\ntags:\n---\n","slug":"memories-part-1","published":1,"updated":"2024-10-21T14:10:51.286Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmasb6npv00117sos7fd149t6","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"macOS 下 node-gyp rebuild failed 的解决方法","date":"2020-02-27T11:36:29.000Z","_content":"\n\n\n## 0x00 环境信息\n\n在 macOS Catalina 操作系统下（多数是从 High Sierra 升级过来的）\n\n```bash\n$ sw_vers\nProductName:\tMac OS X\nProductVersion:\t10.15.3\nBuildVersion:\t19D76\n$ node -v\nv13.8.0\n$ npm -v\n6.13.7\n```\n\n<!-- more -->\n\n## 0x01 现象和错误信息\n\n执行 `npm install -g xxxx` 或者 `yarn` 命令的时候出现如下面类似的报错信息：\n\n```\n> fsevents@1.2.11 install /usr/local/lib/node_modules/hzero-cli/node_modules/fork-ts-checker-webpack-plugin-alt/node_modules/fsevents\n> node-gyp rebuild\n\nNo receipt for 'com.apple.pkg.CLTools_Executables' found at '/'.\n\nNo receipt for 'com.apple.pkg.DeveloperToolsCLILeo' found at '/'.\n\nNo receipt for 'com.apple.pkg.DeveloperToolsCLI' found at '/'.\n\ngyp: No Xcode or CLT version detected!\ngyp ERR! configure error\ngyp ERR! stack Error: `gyp` failed with exit code: 1\ngyp ERR! stack     at ChildProcess.onCpExit (/usr/local/lib/node_modules/npm/node_modules/node-gyp/lib/configure.js:351:16)\ngyp ERR! stack     at ChildProcess.emit (events.js:321:20)\ngyp ERR! stack     at Process.ChildProcess._handle.onexit (internal/child_process.js:275:12)\ngyp ERR! System Darwin 19.3.0\ngyp ERR! command \"/usr/local/Cellar/node/13.8.0/bin/node\" \"/usr/local/lib/node_modules/npm/node_modules/node-gyp/bin/node-gyp.js\" \"rebuild\"\ngyp ERR! cwd /usr/local/lib/node_modules/hzero-cli/node_modules/fork-ts-checker-webpack-plugin-alt/node_modules/fsevents\ngyp ERR! node -v v13.8.0\ngyp ERR! node-gyp -v v5.0.7\ngyp ERR! not ok\n```\n\n\n\n## 0x02 分析和解决办法\n\n以上错误大概率是 `Xcode Command Line Tools` 没有安装或者升级到 `macOS Catalina` 之后 `Xcode Command Line Tools` 安装异常所致。 所以接下来我们来检查一下这个命令行工具的安装情况。\n\n### 检查 Xcode 命令行工具\n\n首先，运行以下命令检查命令行工具是否已安装：\n\n```bash\nxcode-select --install\n```\n\n若返回以下信息，说明已经安装，否则会提示你继续完成这个命令行工具的安装过程。\n\n```\nxcode-select: error: command line tools are already installed, use \"Software Update\" to install updates\n```\n\n接下来，运行以下命令来确认已安装的命令行工具是否正常：\n\n```bash\n/usr/sbin/pkgutil --packages | grep CL\n```\n\n若返回以下信息，则说明以满足 `node-gyp` 的要求，如果`没有返回任何信息`，则可判断 Xcode 命令行工具出现了异常。\n\n```\ncom.apple.pkg.CLTools_Executables\ncom.apple.pkg.CLTools_SDK_macOS1015\ncom.apple.pkg.CLTools_SDK_macOS1014\ncom.apple.pkg.CLTools_macOS_SDK\n```\n\n### 修复 Xcode 命令行工具\n\n若以上检查步骤出现异常情况，则尝试以下步骤重新安装 Xcode 命令行工具，之后重复执行检查的步骤确认有信息返回。\n\n```bash\nsudo rm -rf $(xcode-select -print-path)\nxcode-select --install\n```\n\n最后重新执行你的 npm 或者 yarn 命令，理论上就可以恢复正常了，如果以上步骤仍无法解决你的问题，请直接打开 https://github.com/nodejs/node-gyp/blob/master/macOS_Catalina.md 文档详细阅读 `node-gyp` 的作者所介绍的诊断方法。\n\n\n\n## 0x03 参考链接\n\n- https://github.com/nodejs/node-gyp#on-macos\n- https://github.com/nodejs/node-gyp/blob/master/macOS_Catalina.md","source":"_posts/node-gyp-rebuild-failed-on-catalina.md","raw":"---\ntitle: macOS 下 node-gyp rebuild failed 的解决方法\ndate: 2020-02-27 19:36:29\ntags: \n- 'macOS Catalina'\n- 'node-gyp rebuild'\n- 'No Xcode or CLT version detected'\n---\n\n\n\n## 0x00 环境信息\n\n在 macOS Catalina 操作系统下（多数是从 High Sierra 升级过来的）\n\n```bash\n$ sw_vers\nProductName:\tMac OS X\nProductVersion:\t10.15.3\nBuildVersion:\t19D76\n$ node -v\nv13.8.0\n$ npm -v\n6.13.7\n```\n\n<!-- more -->\n\n## 0x01 现象和错误信息\n\n执行 `npm install -g xxxx` 或者 `yarn` 命令的时候出现如下面类似的报错信息：\n\n```\n> fsevents@1.2.11 install /usr/local/lib/node_modules/hzero-cli/node_modules/fork-ts-checker-webpack-plugin-alt/node_modules/fsevents\n> node-gyp rebuild\n\nNo receipt for 'com.apple.pkg.CLTools_Executables' found at '/'.\n\nNo receipt for 'com.apple.pkg.DeveloperToolsCLILeo' found at '/'.\n\nNo receipt for 'com.apple.pkg.DeveloperToolsCLI' found at '/'.\n\ngyp: No Xcode or CLT version detected!\ngyp ERR! configure error\ngyp ERR! stack Error: `gyp` failed with exit code: 1\ngyp ERR! stack     at ChildProcess.onCpExit (/usr/local/lib/node_modules/npm/node_modules/node-gyp/lib/configure.js:351:16)\ngyp ERR! stack     at ChildProcess.emit (events.js:321:20)\ngyp ERR! stack     at Process.ChildProcess._handle.onexit (internal/child_process.js:275:12)\ngyp ERR! System Darwin 19.3.0\ngyp ERR! command \"/usr/local/Cellar/node/13.8.0/bin/node\" \"/usr/local/lib/node_modules/npm/node_modules/node-gyp/bin/node-gyp.js\" \"rebuild\"\ngyp ERR! cwd /usr/local/lib/node_modules/hzero-cli/node_modules/fork-ts-checker-webpack-plugin-alt/node_modules/fsevents\ngyp ERR! node -v v13.8.0\ngyp ERR! node-gyp -v v5.0.7\ngyp ERR! not ok\n```\n\n\n\n## 0x02 分析和解决办法\n\n以上错误大概率是 `Xcode Command Line Tools` 没有安装或者升级到 `macOS Catalina` 之后 `Xcode Command Line Tools` 安装异常所致。 所以接下来我们来检查一下这个命令行工具的安装情况。\n\n### 检查 Xcode 命令行工具\n\n首先，运行以下命令检查命令行工具是否已安装：\n\n```bash\nxcode-select --install\n```\n\n若返回以下信息，说明已经安装，否则会提示你继续完成这个命令行工具的安装过程。\n\n```\nxcode-select: error: command line tools are already installed, use \"Software Update\" to install updates\n```\n\n接下来，运行以下命令来确认已安装的命令行工具是否正常：\n\n```bash\n/usr/sbin/pkgutil --packages | grep CL\n```\n\n若返回以下信息，则说明以满足 `node-gyp` 的要求，如果`没有返回任何信息`，则可判断 Xcode 命令行工具出现了异常。\n\n```\ncom.apple.pkg.CLTools_Executables\ncom.apple.pkg.CLTools_SDK_macOS1015\ncom.apple.pkg.CLTools_SDK_macOS1014\ncom.apple.pkg.CLTools_macOS_SDK\n```\n\n### 修复 Xcode 命令行工具\n\n若以上检查步骤出现异常情况，则尝试以下步骤重新安装 Xcode 命令行工具，之后重复执行检查的步骤确认有信息返回。\n\n```bash\nsudo rm -rf $(xcode-select -print-path)\nxcode-select --install\n```\n\n最后重新执行你的 npm 或者 yarn 命令，理论上就可以恢复正常了，如果以上步骤仍无法解决你的问题，请直接打开 https://github.com/nodejs/node-gyp/blob/master/macOS_Catalina.md 文档详细阅读 `node-gyp` 的作者所介绍的诊断方法。\n\n\n\n## 0x03 参考链接\n\n- https://github.com/nodejs/node-gyp#on-macos\n- https://github.com/nodejs/node-gyp/blob/master/macOS_Catalina.md","slug":"node-gyp-rebuild-failed-on-catalina","published":1,"updated":"2020-03-23T15:37:20.205Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmasb6npv00157sosbus57o25","content":"<h2 id=\"0x00-环境信息\"><a href=\"#0x00-环境信息\" class=\"headerlink\" title=\"0x00 环境信息\"></a>0x00 环境信息</h2><p>在 macOS Catalina 操作系统下（多数是从 High Sierra 升级过来的）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sw_vers</span><br><span class=\"line\">ProductName:\tMac OS X</span><br><span class=\"line\">ProductVersion:\t10.15.3</span><br><span class=\"line\">BuildVersion:\t19D76</span><br><span class=\"line\">$ node -v</span><br><span class=\"line\">v13.8.0</span><br><span class=\"line\">$ npm -v</span><br><span class=\"line\">6.13.7</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"0x01-现象和错误信息\"><a href=\"#0x01-现象和错误信息\" class=\"headerlink\" title=\"0x01 现象和错误信息\"></a>0x01 现象和错误信息</h2><p>执行 <code>npm install -g xxxx</code> 或者 <code>yarn</code> 命令的时候出现如下面类似的报错信息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; fsevents@1.2.11 install &#x2F;usr&#x2F;local&#x2F;lib&#x2F;node_modules&#x2F;hzero-cli&#x2F;node_modules&#x2F;fork-ts-checker-webpack-plugin-alt&#x2F;node_modules&#x2F;fsevents</span><br><span class=\"line\">&gt; node-gyp rebuild</span><br><span class=\"line\"></span><br><span class=\"line\">No receipt for &#39;com.apple.pkg.CLTools_Executables&#39; found at &#39;&#x2F;&#39;.</span><br><span class=\"line\"></span><br><span class=\"line\">No receipt for &#39;com.apple.pkg.DeveloperToolsCLILeo&#39; found at &#39;&#x2F;&#39;.</span><br><span class=\"line\"></span><br><span class=\"line\">No receipt for &#39;com.apple.pkg.DeveloperToolsCLI&#39; found at &#39;&#x2F;&#39;.</span><br><span class=\"line\"></span><br><span class=\"line\">gyp: No Xcode or CLT version detected!</span><br><span class=\"line\">gyp ERR! configure error</span><br><span class=\"line\">gyp ERR! stack Error: &#96;gyp&#96; failed with exit code: 1</span><br><span class=\"line\">gyp ERR! stack     at ChildProcess.onCpExit (&#x2F;usr&#x2F;local&#x2F;lib&#x2F;node_modules&#x2F;npm&#x2F;node_modules&#x2F;node-gyp&#x2F;lib&#x2F;configure.js:351:16)</span><br><span class=\"line\">gyp ERR! stack     at ChildProcess.emit (events.js:321:20)</span><br><span class=\"line\">gyp ERR! stack     at Process.ChildProcess._handle.onexit (internal&#x2F;child_process.js:275:12)</span><br><span class=\"line\">gyp ERR! System Darwin 19.3.0</span><br><span class=\"line\">gyp ERR! command &quot;&#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;node&#x2F;13.8.0&#x2F;bin&#x2F;node&quot; &quot;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;node_modules&#x2F;npm&#x2F;node_modules&#x2F;node-gyp&#x2F;bin&#x2F;node-gyp.js&quot; &quot;rebuild&quot;</span><br><span class=\"line\">gyp ERR! cwd &#x2F;usr&#x2F;local&#x2F;lib&#x2F;node_modules&#x2F;hzero-cli&#x2F;node_modules&#x2F;fork-ts-checker-webpack-plugin-alt&#x2F;node_modules&#x2F;fsevents</span><br><span class=\"line\">gyp ERR! node -v v13.8.0</span><br><span class=\"line\">gyp ERR! node-gyp -v v5.0.7</span><br><span class=\"line\">gyp ERR! not ok</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"0x02-分析和解决办法\"><a href=\"#0x02-分析和解决办法\" class=\"headerlink\" title=\"0x02 分析和解决办法\"></a>0x02 分析和解决办法</h2><p>以上错误大概率是 <code>Xcode Command Line Tools</code> 没有安装或者升级到 <code>macOS Catalina</code> 之后 <code>Xcode Command Line Tools</code> 安装异常所致。 所以接下来我们来检查一下这个命令行工具的安装情况。</p>\n<h3 id=\"检查-Xcode-命令行工具\"><a href=\"#检查-Xcode-命令行工具\" class=\"headerlink\" title=\"检查 Xcode 命令行工具\"></a>检查 Xcode 命令行工具</h3><p>首先，运行以下命令检查命令行工具是否已安装：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xcode-select --install</span><br></pre></td></tr></table></figure>\n\n<p>若返回以下信息，说明已经安装，否则会提示你继续完成这个命令行工具的安装过程。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xcode-select: error: command line tools are already installed, use &quot;Software Update&quot; to install updates</span><br></pre></td></tr></table></figure>\n\n<p>接下来，运行以下命令来确认已安装的命令行工具是否正常：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/sbin/pkgutil --packages | grep CL</span><br></pre></td></tr></table></figure>\n\n<p>若返回以下信息，则说明以满足 <code>node-gyp</code> 的要求，如果<code>没有返回任何信息</code>，则可判断 Xcode 命令行工具出现了异常。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">com.apple.pkg.CLTools_Executables</span><br><span class=\"line\">com.apple.pkg.CLTools_SDK_macOS1015</span><br><span class=\"line\">com.apple.pkg.CLTools_SDK_macOS1014</span><br><span class=\"line\">com.apple.pkg.CLTools_macOS_SDK</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"修复-Xcode-命令行工具\"><a href=\"#修复-Xcode-命令行工具\" class=\"headerlink\" title=\"修复 Xcode 命令行工具\"></a>修复 Xcode 命令行工具</h3><p>若以上检查步骤出现异常情况，则尝试以下步骤重新安装 Xcode 命令行工具，之后重复执行检查的步骤确认有信息返回。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo rm -rf $(xcode-select -print-path)</span><br><span class=\"line\">xcode-select --install</span><br></pre></td></tr></table></figure>\n\n<p>最后重新执行你的 npm 或者 yarn 命令，理论上就可以恢复正常了，如果以上步骤仍无法解决你的问题，请直接打开 <a href=\"https://github.com/nodejs/node-gyp/blob/master/macOS_Catalina.md\">https://github.com/nodejs/node-gyp/blob/master/macOS_Catalina.md</a> 文档详细阅读 <code>node-gyp</code> 的作者所介绍的诊断方法。</p>\n<h2 id=\"0x03-参考链接\"><a href=\"#0x03-参考链接\" class=\"headerlink\" title=\"0x03 参考链接\"></a>0x03 参考链接</h2><ul>\n<li><a href=\"https://github.com/nodejs/node-gyp#on-macos\">https://github.com/nodejs/node-gyp#on-macos</a></li>\n<li><a href=\"https://github.com/nodejs/node-gyp/blob/master/macOS_Catalina.md\">https://github.com/nodejs/node-gyp/blob/master/macOS_Catalina.md</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"0x00-环境信息\"><a href=\"#0x00-环境信息\" class=\"headerlink\" title=\"0x00 环境信息\"></a>0x00 环境信息</h2><p>在 macOS Catalina 操作系统下（多数是从 High Sierra 升级过来的）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sw_vers</span><br><span class=\"line\">ProductName:\tMac OS X</span><br><span class=\"line\">ProductVersion:\t10.15.3</span><br><span class=\"line\">BuildVersion:\t19D76</span><br><span class=\"line\">$ node -v</span><br><span class=\"line\">v13.8.0</span><br><span class=\"line\">$ npm -v</span><br><span class=\"line\">6.13.7</span><br></pre></td></tr></table></figure>","more":"<h2 id=\"0x01-现象和错误信息\"><a href=\"#0x01-现象和错误信息\" class=\"headerlink\" title=\"0x01 现象和错误信息\"></a>0x01 现象和错误信息</h2><p>执行 <code>npm install -g xxxx</code> 或者 <code>yarn</code> 命令的时候出现如下面类似的报错信息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; fsevents@1.2.11 install &#x2F;usr&#x2F;local&#x2F;lib&#x2F;node_modules&#x2F;hzero-cli&#x2F;node_modules&#x2F;fork-ts-checker-webpack-plugin-alt&#x2F;node_modules&#x2F;fsevents</span><br><span class=\"line\">&gt; node-gyp rebuild</span><br><span class=\"line\"></span><br><span class=\"line\">No receipt for &#39;com.apple.pkg.CLTools_Executables&#39; found at &#39;&#x2F;&#39;.</span><br><span class=\"line\"></span><br><span class=\"line\">No receipt for &#39;com.apple.pkg.DeveloperToolsCLILeo&#39; found at &#39;&#x2F;&#39;.</span><br><span class=\"line\"></span><br><span class=\"line\">No receipt for &#39;com.apple.pkg.DeveloperToolsCLI&#39; found at &#39;&#x2F;&#39;.</span><br><span class=\"line\"></span><br><span class=\"line\">gyp: No Xcode or CLT version detected!</span><br><span class=\"line\">gyp ERR! configure error</span><br><span class=\"line\">gyp ERR! stack Error: &#96;gyp&#96; failed with exit code: 1</span><br><span class=\"line\">gyp ERR! stack     at ChildProcess.onCpExit (&#x2F;usr&#x2F;local&#x2F;lib&#x2F;node_modules&#x2F;npm&#x2F;node_modules&#x2F;node-gyp&#x2F;lib&#x2F;configure.js:351:16)</span><br><span class=\"line\">gyp ERR! stack     at ChildProcess.emit (events.js:321:20)</span><br><span class=\"line\">gyp ERR! stack     at Process.ChildProcess._handle.onexit (internal&#x2F;child_process.js:275:12)</span><br><span class=\"line\">gyp ERR! System Darwin 19.3.0</span><br><span class=\"line\">gyp ERR! command &quot;&#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;node&#x2F;13.8.0&#x2F;bin&#x2F;node&quot; &quot;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;node_modules&#x2F;npm&#x2F;node_modules&#x2F;node-gyp&#x2F;bin&#x2F;node-gyp.js&quot; &quot;rebuild&quot;</span><br><span class=\"line\">gyp ERR! cwd &#x2F;usr&#x2F;local&#x2F;lib&#x2F;node_modules&#x2F;hzero-cli&#x2F;node_modules&#x2F;fork-ts-checker-webpack-plugin-alt&#x2F;node_modules&#x2F;fsevents</span><br><span class=\"line\">gyp ERR! node -v v13.8.0</span><br><span class=\"line\">gyp ERR! node-gyp -v v5.0.7</span><br><span class=\"line\">gyp ERR! not ok</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"0x02-分析和解决办法\"><a href=\"#0x02-分析和解决办法\" class=\"headerlink\" title=\"0x02 分析和解决办法\"></a>0x02 分析和解决办法</h2><p>以上错误大概率是 <code>Xcode Command Line Tools</code> 没有安装或者升级到 <code>macOS Catalina</code> 之后 <code>Xcode Command Line Tools</code> 安装异常所致。 所以接下来我们来检查一下这个命令行工具的安装情况。</p>\n<h3 id=\"检查-Xcode-命令行工具\"><a href=\"#检查-Xcode-命令行工具\" class=\"headerlink\" title=\"检查 Xcode 命令行工具\"></a>检查 Xcode 命令行工具</h3><p>首先，运行以下命令检查命令行工具是否已安装：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xcode-select --install</span><br></pre></td></tr></table></figure>\n\n<p>若返回以下信息，说明已经安装，否则会提示你继续完成这个命令行工具的安装过程。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xcode-select: error: command line tools are already installed, use &quot;Software Update&quot; to install updates</span><br></pre></td></tr></table></figure>\n\n<p>接下来，运行以下命令来确认已安装的命令行工具是否正常：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/sbin/pkgutil --packages | grep CL</span><br></pre></td></tr></table></figure>\n\n<p>若返回以下信息，则说明以满足 <code>node-gyp</code> 的要求，如果<code>没有返回任何信息</code>，则可判断 Xcode 命令行工具出现了异常。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">com.apple.pkg.CLTools_Executables</span><br><span class=\"line\">com.apple.pkg.CLTools_SDK_macOS1015</span><br><span class=\"line\">com.apple.pkg.CLTools_SDK_macOS1014</span><br><span class=\"line\">com.apple.pkg.CLTools_macOS_SDK</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"修复-Xcode-命令行工具\"><a href=\"#修复-Xcode-命令行工具\" class=\"headerlink\" title=\"修复 Xcode 命令行工具\"></a>修复 Xcode 命令行工具</h3><p>若以上检查步骤出现异常情况，则尝试以下步骤重新安装 Xcode 命令行工具，之后重复执行检查的步骤确认有信息返回。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo rm -rf $(xcode-select -print-path)</span><br><span class=\"line\">xcode-select --install</span><br></pre></td></tr></table></figure>\n\n<p>最后重新执行你的 npm 或者 yarn 命令，理论上就可以恢复正常了，如果以上步骤仍无法解决你的问题，请直接打开 <a href=\"https://github.com/nodejs/node-gyp/blob/master/macOS_Catalina.md\">https://github.com/nodejs/node-gyp/blob/master/macOS_Catalina.md</a> 文档详细阅读 <code>node-gyp</code> 的作者所介绍的诊断方法。</p>\n<h2 id=\"0x03-参考链接\"><a href=\"#0x03-参考链接\" class=\"headerlink\" title=\"0x03 参考链接\"></a>0x03 参考链接</h2><ul>\n<li><a href=\"https://github.com/nodejs/node-gyp#on-macos\">https://github.com/nodejs/node-gyp#on-macos</a></li>\n<li><a href=\"https://github.com/nodejs/node-gyp/blob/master/macOS_Catalina.md\">https://github.com/nodejs/node-gyp/blob/master/macOS_Catalina.md</a></li>\n</ul>"},{"title":"个人日记001-上班与下班","date":"2022-05-12T13:59:27.000Z","_content":"\n这周搞错框架升级上线的日期，以为是本周六上线，这两天拼命的适配框架，闹了个乌龙。不过也好，手上的任务早做完早轻松（不知是否真的如此~）。今天下班前问了同事，才知本周不上线，看了一下时间，已经是晚上 9 点多了。。\n\n大厂真的是人尽其用，每天安排给你的任务差不多到了 24 小时轮轴转也没法完成的地步。每周各种进度例会，每天被各种业务同事拉会看问题，问题种类五花八门。与此同时，自己手上还有开发要做，有仓库要守护，简直忙的不亦乐乎。\n\n得知任务无需本周完成之后，反手就是起身打卡下班。外面下着雨，回去的路上突然被一个电话会议拉了进去，上来直接跟我说 UAT 测试有问题，让我上线跟他们看问题。不好意思，我已经下班了，有事明天再说，谢谢~\n\n- 看问题非要赶在晚上九点多看么\n- 有测试问题处理要不要打提前量\n\n累过之后，渐渐学会区分上班和下班，也要学会说不。\n","source":"_posts/personal-notes-001.md","raw":"---\ntitle: 个人日记001-上班与下班\ndate: 2022-05-12 21:59:27\ncategories:\n- 技术无关\ntags:\n- 吐槽\n---\n\n这周搞错框架升级上线的日期，以为是本周六上线，这两天拼命的适配框架，闹了个乌龙。不过也好，手上的任务早做完早轻松（不知是否真的如此~）。今天下班前问了同事，才知本周不上线，看了一下时间，已经是晚上 9 点多了。。\n\n大厂真的是人尽其用，每天安排给你的任务差不多到了 24 小时轮轴转也没法完成的地步。每周各种进度例会，每天被各种业务同事拉会看问题，问题种类五花八门。与此同时，自己手上还有开发要做，有仓库要守护，简直忙的不亦乐乎。\n\n得知任务无需本周完成之后，反手就是起身打卡下班。外面下着雨，回去的路上突然被一个电话会议拉了进去，上来直接跟我说 UAT 测试有问题，让我上线跟他们看问题。不好意思，我已经下班了，有事明天再说，谢谢~\n\n- 看问题非要赶在晚上九点多看么\n- 有测试问题处理要不要打提前量\n\n累过之后，渐渐学会区分上班和下班，也要学会说不。\n","slug":"personal-notes-001","published":1,"updated":"2022-05-12T14:19:32.918Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmasb6npw00177sosgvl2g2cc","content":"<p>这周搞错框架升级上线的日期，以为是本周六上线，这两天拼命的适配框架，闹了个乌龙。不过也好，手上的任务早做完早轻松（不知是否真的如此~）。今天下班前问了同事，才知本周不上线，看了一下时间，已经是晚上 9 点多了。。</p>\n<p>大厂真的是人尽其用，每天安排给你的任务差不多到了 24 小时轮轴转也没法完成的地步。每周各种进度例会，每天被各种业务同事拉会看问题，问题种类五花八门。与此同时，自己手上还有开发要做，有仓库要守护，简直忙的不亦乐乎。</p>\n<p>得知任务无需本周完成之后，反手就是起身打卡下班。外面下着雨，回去的路上突然被一个电话会议拉了进去，上来直接跟我说 UAT 测试有问题，让我上线跟他们看问题。不好意思，我已经下班了，有事明天再说，谢谢~</p>\n<ul>\n<li>看问题非要赶在晚上九点多看么</li>\n<li>有测试问题处理要不要打提前量</li>\n</ul>\n<p>累过之后，渐渐学会区分上班和下班，也要学会说不。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>这周搞错框架升级上线的日期，以为是本周六上线，这两天拼命的适配框架，闹了个乌龙。不过也好，手上的任务早做完早轻松（不知是否真的如此~）。今天下班前问了同事，才知本周不上线，看了一下时间，已经是晚上 9 点多了。。</p>\n<p>大厂真的是人尽其用，每天安排给你的任务差不多到了 24 小时轮轴转也没法完成的地步。每周各种进度例会，每天被各种业务同事拉会看问题，问题种类五花八门。与此同时，自己手上还有开发要做，有仓库要守护，简直忙的不亦乐乎。</p>\n<p>得知任务无需本周完成之后，反手就是起身打卡下班。外面下着雨，回去的路上突然被一个电话会议拉了进去，上来直接跟我说 UAT 测试有问题，让我上线跟他们看问题。不好意思，我已经下班了，有事明天再说，谢谢~</p>\n<ul>\n<li>看问题非要赶在晚上九点多看么</li>\n<li>有测试问题处理要不要打提前量</li>\n</ul>\n<p>累过之后，渐渐学会区分上班和下班，也要学会说不。</p>\n"},{"title":"关于疫情","date":"2023-01-11T13:04:14.000Z","_content":"\n2022年12月8日，中国的疫情政策全面放开，逐步取消了健康码和行程吗的查验。老百姓被允许自由出入，之后有人🐑了，杨过了，杨康了，王重阳了。。。我也🐑了。\n\n<!-- more -->\n\n## 过程\n\n第一天下午觉得肌肉有些酸痛，头有些晕。问了同事，同事说也有同感，感觉自己要🐑。当天晚上开始发烧。\n\n第二天全天肌肉酸痛、发烧、头痛并伴随咳嗽，无食欲，在床上躺了一天。\n\n第三天退烧，开始咳痰，可以吃点东西了，但失去味觉和嗅觉，双肺和腰疼痛。\n\n第四天至第七天逐步恢复，但伴随咳嗽多痰和失去味觉和嗅觉。\n\n第八天杨康，但味觉和嗅觉依然不工作，回到公司继续搬砖。\n\n\n\n在此期间，我的家人无一幸免，全🐑，但也同样很快就康复了。我周边的同事和朋友没有听说得白肺的。\n\n\n\n## 悲伤\n\n就这样过去了一个月，也听说大家基本都🐑过了一次且康复时，老家相继传来了噩耗。\n\n- 2023年1月9日，姥爷在老家病逝\n\n- 2023年1月11日，大爷在老家病逝\n\n无比悲伤的同时，感叹老年人一旦得了新冠病毒，身体通常都会引发一系列的基础病，这些往往都是致命的因素。后来听说全国很多年纪大的人都被新冠夺走了生命，也感叹病毒的强大和生命的脆弱。\n\n\n\n## 向前看\n\n转眼间到了2023年，回想自疫情爆发以来所经历过的这三年，很多事情早已物是人非。慨叹过，无奈过，迷茫过也无助过，甚至有时都在想人活着的意义究竟是什么。希望未来能有一座灯塔能照亮迷茫着的我。\n","source":"_posts/personal-notes-002.md","raw":"---\ntitle: 关于疫情\ndate: 2023-01-11 21:04:14\ncategories:\n- 个人日记\n- 技术无关\ntags:\n---\n\n2022年12月8日，中国的疫情政策全面放开，逐步取消了健康码和行程吗的查验。老百姓被允许自由出入，之后有人🐑了，杨过了，杨康了，王重阳了。。。我也🐑了。\n\n<!-- more -->\n\n## 过程\n\n第一天下午觉得肌肉有些酸痛，头有些晕。问了同事，同事说也有同感，感觉自己要🐑。当天晚上开始发烧。\n\n第二天全天肌肉酸痛、发烧、头痛并伴随咳嗽，无食欲，在床上躺了一天。\n\n第三天退烧，开始咳痰，可以吃点东西了，但失去味觉和嗅觉，双肺和腰疼痛。\n\n第四天至第七天逐步恢复，但伴随咳嗽多痰和失去味觉和嗅觉。\n\n第八天杨康，但味觉和嗅觉依然不工作，回到公司继续搬砖。\n\n\n\n在此期间，我的家人无一幸免，全🐑，但也同样很快就康复了。我周边的同事和朋友没有听说得白肺的。\n\n\n\n## 悲伤\n\n就这样过去了一个月，也听说大家基本都🐑过了一次且康复时，老家相继传来了噩耗。\n\n- 2023年1月9日，姥爷在老家病逝\n\n- 2023年1月11日，大爷在老家病逝\n\n无比悲伤的同时，感叹老年人一旦得了新冠病毒，身体通常都会引发一系列的基础病，这些往往都是致命的因素。后来听说全国很多年纪大的人都被新冠夺走了生命，也感叹病毒的强大和生命的脆弱。\n\n\n\n## 向前看\n\n转眼间到了2023年，回想自疫情爆发以来所经历过的这三年，很多事情早已物是人非。慨叹过，无奈过，迷茫过也无助过，甚至有时都在想人活着的意义究竟是什么。希望未来能有一座灯塔能照亮迷茫着的我。\n","slug":"personal-notes-002","published":1,"updated":"2023-12-26T13:50:03.992Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmasb6npx00197sos7ayaf199","content":"<p>2022年12月8日，中国的疫情政策全面放开，逐步取消了健康码和行程吗的查验。老百姓被允许自由出入，之后有人🐑了，杨过了，杨康了，王重阳了。。。我也🐑了。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"过程\"><a href=\"#过程\" class=\"headerlink\" title=\"过程\"></a>过程</h2><p>第一天下午觉得肌肉有些酸痛，头有些晕。问了同事，同事说也有同感，感觉自己要🐑。当天晚上开始发烧。</p>\n<p>第二天全天肌肉酸痛、发烧、头痛并伴随咳嗽，无食欲，在床上躺了一天。</p>\n<p>第三天退烧，开始咳痰，可以吃点东西了，但失去味觉和嗅觉，双肺和腰疼痛。</p>\n<p>第四天至第七天逐步恢复，但伴随咳嗽多痰和失去味觉和嗅觉。</p>\n<p>第八天杨康，但味觉和嗅觉依然不工作，回到公司继续搬砖。</p>\n<p>在此期间，我的家人无一幸免，全🐑，但也同样很快就康复了。我周边的同事和朋友没有听说得白肺的。</p>\n<h2 id=\"悲伤\"><a href=\"#悲伤\" class=\"headerlink\" title=\"悲伤\"></a>悲伤</h2><p>就这样过去了一个月，也听说大家基本都🐑过了一次且康复时，老家相继传来了噩耗。</p>\n<ul>\n<li><p>2023年1月9日，姥爷在老家病逝</p>\n</li>\n<li><p>2023年1月11日，大爷在老家病逝</p>\n</li>\n</ul>\n<p>无比悲伤的同时，感叹老年人一旦得了新冠病毒，身体通常都会引发一系列的基础病，这些往往都是致命的因素。后来听说全国很多年纪大的人都被新冠夺走了生命，也感叹病毒的强大和生命的脆弱。</p>\n<h2 id=\"向前看\"><a href=\"#向前看\" class=\"headerlink\" title=\"向前看\"></a>向前看</h2><p>转眼间到了2023年，回想自疫情爆发以来所经历过的这三年，很多事情早已物是人非。慨叹过，无奈过，迷茫过也无助过，甚至有时都在想人活着的意义究竟是什么。希望未来能有一座灯塔能照亮迷茫着的我。</p>\n","site":{"data":{}},"excerpt":"<p>2022年12月8日，中国的疫情政策全面放开，逐步取消了健康码和行程吗的查验。老百姓被允许自由出入，之后有人🐑了，杨过了，杨康了，王重阳了。。。我也🐑了。</p>","more":"<h2 id=\"过程\"><a href=\"#过程\" class=\"headerlink\" title=\"过程\"></a>过程</h2><p>第一天下午觉得肌肉有些酸痛，头有些晕。问了同事，同事说也有同感，感觉自己要🐑。当天晚上开始发烧。</p>\n<p>第二天全天肌肉酸痛、发烧、头痛并伴随咳嗽，无食欲，在床上躺了一天。</p>\n<p>第三天退烧，开始咳痰，可以吃点东西了，但失去味觉和嗅觉，双肺和腰疼痛。</p>\n<p>第四天至第七天逐步恢复，但伴随咳嗽多痰和失去味觉和嗅觉。</p>\n<p>第八天杨康，但味觉和嗅觉依然不工作，回到公司继续搬砖。</p>\n<p>在此期间，我的家人无一幸免，全🐑，但也同样很快就康复了。我周边的同事和朋友没有听说得白肺的。</p>\n<h2 id=\"悲伤\"><a href=\"#悲伤\" class=\"headerlink\" title=\"悲伤\"></a>悲伤</h2><p>就这样过去了一个月，也听说大家基本都🐑过了一次且康复时，老家相继传来了噩耗。</p>\n<ul>\n<li><p>2023年1月9日，姥爷在老家病逝</p>\n</li>\n<li><p>2023年1月11日，大爷在老家病逝</p>\n</li>\n</ul>\n<p>无比悲伤的同时，感叹老年人一旦得了新冠病毒，身体通常都会引发一系列的基础病，这些往往都是致命的因素。后来听说全国很多年纪大的人都被新冠夺走了生命，也感叹病毒的强大和生命的脆弱。</p>\n<h2 id=\"向前看\"><a href=\"#向前看\" class=\"headerlink\" title=\"向前看\"></a>向前看</h2><p>转眼间到了2023年，回想自疫情爆发以来所经历过的这三年，很多事情早已物是人非。慨叹过，无奈过，迷茫过也无助过，甚至有时都在想人活着的意义究竟是什么。希望未来能有一座灯塔能照亮迷茫着的我。</p>"},{"title":"在 Bash 中如何读取配置文件","date":"2023-12-20T15:41:00.000Z","_content":"\n## Properties 文件\n\n一种简单的键值对配置文件形式是 properties 文件，可以被 Java 语言原生支持读取。我们可以使用它为项目进行简单的配置管理，典型的 Properties 文件如下所示：\n\n```properties\n# config.properties\n# Valid values are info, verbose, debug\nlogging.level=info\n\nsetup.hosts.enabled=false\n\ninstaller.maven.enabled=true\ninstaller.git.enabled=true\n```\n\n那么像这种文件，我们如何在 Bash 环境下进行读取和使用呢？本文接下来将逐步分析实现的过程。\n\n<!-- more -->\n\n## 思路分析\n\n我们以刚刚所展示的 Properties 文件实例来进行分析，不难发现这种文件一般包含以下几个特点：\n\n1. 允许有注释行，该行以 `#` 开头且不包含实际的配置项\n2. 允许有空行\n3. 配置项以等号 `=` 作为分割符，左侧为属性名称，右侧为值\n3. `=` 两边去除空白字符（可选实现）\n\n好了，知道所有的特征之后，接下来我们着手进行代码的实现。\n\n## 代码实现\n\n### 过滤注释行和空行\n\n这两种情况都属于无效行，应该被过滤剔除。由于我们是在 GNU/Linux 和 Bash 环境下进行实现，那么可以想到的方法是先把文件读到内存或者管道中，然后逐层进行过滤。读取文件我们可以使用 `cat` 命令，而对于过滤无效行这种任务的话，GNU/Linux 下有很多工具可以用，如 `grep` 和  `sed` 等等。我们此处选择的是 `sed` 因为它允许通过 `-e` 参数来指定多条正则表达式条件进行操作。接下来我们对正则表达式进行逐个击破。\n\n判断注释行：以 `#` 开头的全部删除，正则表达式为 `/^#/`\n\n<div style=\"background-color:#EEE;text-align:center\"><img src=\"properties_pattern_01.png\" /></div>\n\n判断空行：仅包含0个或多个空格符的行，正则表达式为 `/^\\s*$/`\n\n<div style=\"background-color:#EEE;text-align:center\"><img src=\"properties_pattern_02.png\" /></div>\n\n最后，在 sed 中剔除命中的行时使用操作符 `d` ，例如删除注释行，我们可以写成 `/^#/d`，以下就是我们的最终的命令：\n\n```bash\ncat config.properties | sed -e '/^#/d' -e '/^\\s*$/d'\n```\n\n验证结论：\n\n```bash\n$ cat config.properties | sed -e '/^#/d' -e '/^\\s*$/d'\nlogging.level=info\nsetup.hosts.enabled=false\ninstaller.maven.enabled=true\ninstaller.git.enabled=true\n```\n\n\n\n### 解析配置项\n\n配置项是 `key=value` 形式，我们可以循环管道中过滤后的结果中的每一行，然后按等号 `=` 进行分割。我们可以利用 `while` 和 `read` 结合起来进行读取，read 命令可以以环境变量 `IFS` 的值作为分隔符进行拆解和读取到指定的变量中。例如下面的代码：\n\n```bash\n$ IFS='=' read -r prop value\n# 输入 a=b 然后回车\n$ echo \"$prop -> $value\"\na -> b\n```\n\n结合前面的成果和 while 循环，我们目前的解析过程可以写成：\n\n```bash\n$ cat config.properties \\\n| sed -e '/^#/d' -e '/^\\s*$/d' \\\n| while IFS='=' read -r prop value; do echo \"$prop -> $value\"; done\n```\n\n输出结果为：\n\n```\nlogging.level -> info\nsetup.hosts.enabled -> false\ninstaller.maven.enabled -> true\ninstaller.git.enabled -> true\n```\n\n看起来符合我们的预期，因为我们使用 `echo` 已经输出了我们想要的读取的值，完美！然而，真的是这样么？到目前为止，我们只是解析出来了配置项的值，但是还没有进行存储以备其他过程进一步使用。\n\n\n\n### 值不见了？\n\n接下来我们来声明一个关联数组，我们准备用它来存储所有的配置项到内存中，以便随时使用。以下是我们的代码：\n\n```bash\n#!/bin/bash\ndeclare -A config\n\ncat config.properties \\\n| sed -e '/^#/d' -e '/^\\s*$/d' \\\n| while IFS='=' read -r prop value; do\n\tconfig[$prop]=$value\ndo\n\necho ${config[@]}\n\n```\n\n读者可以实际执行一下，结果竟然是**没有任何信息输出**！这里给出根因：\n\n> 根因：`...| while ... do; ... done` 管道命令 `|` 会调用内核的 fork 产生一个子进程，在子进程中所进行的while 循环中的任何的变量赋值操作的作用域仅在子进程内部，语句执行完之后，子进程也随之被销毁。所以尝试在此处进行的赋值操作没有任何效果。\n\n好了，根因我们知道了，那么我们要如何解决呢？对，我们不用管道，我们要使用 bash 中的“输入转向”功能来实现我们的目的，结构如下所示：\n\n```bash\nwhile ...; do\n  ...\ndone < /path/to/file\n```\n\n但是这里 while 循环读取的是输入设备是文件，而我们在读取文件之后是要做系列过滤加工的，上面的这种形式显然不能满足要求。别着急，Bash 还为我们提供了另外一种产生“输入”的方式：`<(command)`，那么改造后的形式就是：\n\n```bash\nwhile ...; do\n  ...\ndone < <(command)\n```\n\n### 去除等号两边的空白字符\n\n这是一个可选需求，因为正常的属性文件格式要求属性名称、等号和值之间不能有空格。不过笔者习惯使用自由度大一点的配置格式，允许有些空白字符来美化一下格式。为了更直观的展示这个场景，我们假设用 `#` 来表示空白字符话，目标字符串就是 `###foo##`。如果我们要去除两边的空白字符（此处是符号#）的话，下面的正则表达式可以完成：\n\n```bash\n# 先剔除左边的符号#，再剔除右侧的符号#\n$ echo \"###foo##\" | sed -e 's/^#*//' -e 's/#*$//'\nfoo\n```\n\n整理成函数的话就是如下形式，函数接受一个带处理的字符串 $1，返回去除空白字符的值。\n\n```bash\n# ----------------------------------------------------------------\n# Trim both leading and trailing whitespaces\n# Parameters\n# $1 -> string to be trimmed\n# ----------------------------------------------------------------\nfunction trimspaces() {\n  echo $1 | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//'\n}\n```\n\n \n\n### 完整代码\n\n套用到我们的需求之后，最终形成的代码如下：\n\n```bash\n#!/bin/bash\ndeclare -A config\n\nfunction trimspaces() {\n  echo $1 | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//'\n}\n\nwhile IFS='=' read -r prop value; do\n  config[$(trimspaces $prop)]=$(trimspaces $value)\ndone < <(cat config.properties | sed -e '/^\\s*$/d' -e '/^#/d')\n\necho ${!config[@]}\n# 输出结果：installer.git.enabled logging.level setup.hosts.enabled installer.maven.enabled\necho ${config[@]}\n# 输出结果：true info false true\n```\n\n至此，所有问题都已解决。在我的项目 [devbox](https://github/eliu/devbox) 中，配置管理模块 `config.sh` 就是使用上面的解决方案读取的配置文件。\n\n[devbox/lib/modules/config.sh at master · eliu/devbox (github.com)](https://github.com/eliu/devbox/blob/master/lib/modules/config.sh)\n\n\n\n## 鸣谢\n\n正则表达式可视化图片由 [Regulex - JavaScript Regular Expression Visualizer](https://jex.im/regulex/#) 生成，特此感谢 (R.I.P Jex)！\n\nEnd~\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/read-property-file-in-bash.md","raw":"---\ntitle: 在 Bash 中如何读取配置文件\ndate: 2023-12-20 23:41:00\ncategories:\n- Linux\ntags:\n- Bash\n- Shell\n---\n\n## Properties 文件\n\n一种简单的键值对配置文件形式是 properties 文件，可以被 Java 语言原生支持读取。我们可以使用它为项目进行简单的配置管理，典型的 Properties 文件如下所示：\n\n```properties\n# config.properties\n# Valid values are info, verbose, debug\nlogging.level=info\n\nsetup.hosts.enabled=false\n\ninstaller.maven.enabled=true\ninstaller.git.enabled=true\n```\n\n那么像这种文件，我们如何在 Bash 环境下进行读取和使用呢？本文接下来将逐步分析实现的过程。\n\n<!-- more -->\n\n## 思路分析\n\n我们以刚刚所展示的 Properties 文件实例来进行分析，不难发现这种文件一般包含以下几个特点：\n\n1. 允许有注释行，该行以 `#` 开头且不包含实际的配置项\n2. 允许有空行\n3. 配置项以等号 `=` 作为分割符，左侧为属性名称，右侧为值\n3. `=` 两边去除空白字符（可选实现）\n\n好了，知道所有的特征之后，接下来我们着手进行代码的实现。\n\n## 代码实现\n\n### 过滤注释行和空行\n\n这两种情况都属于无效行，应该被过滤剔除。由于我们是在 GNU/Linux 和 Bash 环境下进行实现，那么可以想到的方法是先把文件读到内存或者管道中，然后逐层进行过滤。读取文件我们可以使用 `cat` 命令，而对于过滤无效行这种任务的话，GNU/Linux 下有很多工具可以用，如 `grep` 和  `sed` 等等。我们此处选择的是 `sed` 因为它允许通过 `-e` 参数来指定多条正则表达式条件进行操作。接下来我们对正则表达式进行逐个击破。\n\n判断注释行：以 `#` 开头的全部删除，正则表达式为 `/^#/`\n\n<div style=\"background-color:#EEE;text-align:center\"><img src=\"properties_pattern_01.png\" /></div>\n\n判断空行：仅包含0个或多个空格符的行，正则表达式为 `/^\\s*$/`\n\n<div style=\"background-color:#EEE;text-align:center\"><img src=\"properties_pattern_02.png\" /></div>\n\n最后，在 sed 中剔除命中的行时使用操作符 `d` ，例如删除注释行，我们可以写成 `/^#/d`，以下就是我们的最终的命令：\n\n```bash\ncat config.properties | sed -e '/^#/d' -e '/^\\s*$/d'\n```\n\n验证结论：\n\n```bash\n$ cat config.properties | sed -e '/^#/d' -e '/^\\s*$/d'\nlogging.level=info\nsetup.hosts.enabled=false\ninstaller.maven.enabled=true\ninstaller.git.enabled=true\n```\n\n\n\n### 解析配置项\n\n配置项是 `key=value` 形式，我们可以循环管道中过滤后的结果中的每一行，然后按等号 `=` 进行分割。我们可以利用 `while` 和 `read` 结合起来进行读取，read 命令可以以环境变量 `IFS` 的值作为分隔符进行拆解和读取到指定的变量中。例如下面的代码：\n\n```bash\n$ IFS='=' read -r prop value\n# 输入 a=b 然后回车\n$ echo \"$prop -> $value\"\na -> b\n```\n\n结合前面的成果和 while 循环，我们目前的解析过程可以写成：\n\n```bash\n$ cat config.properties \\\n| sed -e '/^#/d' -e '/^\\s*$/d' \\\n| while IFS='=' read -r prop value; do echo \"$prop -> $value\"; done\n```\n\n输出结果为：\n\n```\nlogging.level -> info\nsetup.hosts.enabled -> false\ninstaller.maven.enabled -> true\ninstaller.git.enabled -> true\n```\n\n看起来符合我们的预期，因为我们使用 `echo` 已经输出了我们想要的读取的值，完美！然而，真的是这样么？到目前为止，我们只是解析出来了配置项的值，但是还没有进行存储以备其他过程进一步使用。\n\n\n\n### 值不见了？\n\n接下来我们来声明一个关联数组，我们准备用它来存储所有的配置项到内存中，以便随时使用。以下是我们的代码：\n\n```bash\n#!/bin/bash\ndeclare -A config\n\ncat config.properties \\\n| sed -e '/^#/d' -e '/^\\s*$/d' \\\n| while IFS='=' read -r prop value; do\n\tconfig[$prop]=$value\ndo\n\necho ${config[@]}\n\n```\n\n读者可以实际执行一下，结果竟然是**没有任何信息输出**！这里给出根因：\n\n> 根因：`...| while ... do; ... done` 管道命令 `|` 会调用内核的 fork 产生一个子进程，在子进程中所进行的while 循环中的任何的变量赋值操作的作用域仅在子进程内部，语句执行完之后，子进程也随之被销毁。所以尝试在此处进行的赋值操作没有任何效果。\n\n好了，根因我们知道了，那么我们要如何解决呢？对，我们不用管道，我们要使用 bash 中的“输入转向”功能来实现我们的目的，结构如下所示：\n\n```bash\nwhile ...; do\n  ...\ndone < /path/to/file\n```\n\n但是这里 while 循环读取的是输入设备是文件，而我们在读取文件之后是要做系列过滤加工的，上面的这种形式显然不能满足要求。别着急，Bash 还为我们提供了另外一种产生“输入”的方式：`<(command)`，那么改造后的形式就是：\n\n```bash\nwhile ...; do\n  ...\ndone < <(command)\n```\n\n### 去除等号两边的空白字符\n\n这是一个可选需求，因为正常的属性文件格式要求属性名称、等号和值之间不能有空格。不过笔者习惯使用自由度大一点的配置格式，允许有些空白字符来美化一下格式。为了更直观的展示这个场景，我们假设用 `#` 来表示空白字符话，目标字符串就是 `###foo##`。如果我们要去除两边的空白字符（此处是符号#）的话，下面的正则表达式可以完成：\n\n```bash\n# 先剔除左边的符号#，再剔除右侧的符号#\n$ echo \"###foo##\" | sed -e 's/^#*//' -e 's/#*$//'\nfoo\n```\n\n整理成函数的话就是如下形式，函数接受一个带处理的字符串 $1，返回去除空白字符的值。\n\n```bash\n# ----------------------------------------------------------------\n# Trim both leading and trailing whitespaces\n# Parameters\n# $1 -> string to be trimmed\n# ----------------------------------------------------------------\nfunction trimspaces() {\n  echo $1 | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//'\n}\n```\n\n \n\n### 完整代码\n\n套用到我们的需求之后，最终形成的代码如下：\n\n```bash\n#!/bin/bash\ndeclare -A config\n\nfunction trimspaces() {\n  echo $1 | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//'\n}\n\nwhile IFS='=' read -r prop value; do\n  config[$(trimspaces $prop)]=$(trimspaces $value)\ndone < <(cat config.properties | sed -e '/^\\s*$/d' -e '/^#/d')\n\necho ${!config[@]}\n# 输出结果：installer.git.enabled logging.level setup.hosts.enabled installer.maven.enabled\necho ${config[@]}\n# 输出结果：true info false true\n```\n\n至此，所有问题都已解决。在我的项目 [devbox](https://github/eliu/devbox) 中，配置管理模块 `config.sh` 就是使用上面的解决方案读取的配置文件。\n\n[devbox/lib/modules/config.sh at master · eliu/devbox (github.com)](https://github.com/eliu/devbox/blob/master/lib/modules/config.sh)\n\n\n\n## 鸣谢\n\n正则表达式可视化图片由 [Regulex - JavaScript Regular Expression Visualizer](https://jex.im/regulex/#) 生成，特此感谢 (R.I.P Jex)！\n\nEnd~\n\n\n\n\n\n\n\n\n\n\n\n","slug":"read-property-file-in-bash","published":1,"updated":"2024-01-24T14:56:11.353Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmasb6npx001c7sos0mcw528c","content":"<h2 id=\"Properties-文件\"><a href=\"#Properties-文件\" class=\"headerlink\" title=\"Properties 文件\"></a>Properties 文件</h2><p>一种简单的键值对配置文件形式是 properties 文件，可以被 Java 语言原生支持读取。我们可以使用它为项目进行简单的配置管理，典型的 Properties 文件如下所示：</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># config.properties</span></span><br><span class=\"line\"><span class=\"comment\"># Valid values are info, verbose, debug</span></span><br><span class=\"line\"><span class=\"meta\">logging.level</span>=<span class=\"string\">info</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">setup.hosts.enabled</span>=<span class=\"string\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">installer.maven.enabled</span>=<span class=\"string\">true</span></span><br><span class=\"line\"><span class=\"meta\">installer.git.enabled</span>=<span class=\"string\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>那么像这种文件，我们如何在 Bash 环境下进行读取和使用呢？本文接下来将逐步分析实现的过程。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"思路分析\"><a href=\"#思路分析\" class=\"headerlink\" title=\"思路分析\"></a>思路分析</h2><p>我们以刚刚所展示的 Properties 文件实例来进行分析，不难发现这种文件一般包含以下几个特点：</p>\n<ol>\n<li>允许有注释行，该行以 <code>#</code> 开头且不包含实际的配置项</li>\n<li>允许有空行</li>\n<li>配置项以等号 <code>=</code> 作为分割符，左侧为属性名称，右侧为值</li>\n<li><code>=</code> 两边去除空白字符（可选实现）</li>\n</ol>\n<p>好了，知道所有的特征之后，接下来我们着手进行代码的实现。</p>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><h3 id=\"过滤注释行和空行\"><a href=\"#过滤注释行和空行\" class=\"headerlink\" title=\"过滤注释行和空行\"></a>过滤注释行和空行</h3><p>这两种情况都属于无效行，应该被过滤剔除。由于我们是在 GNU/Linux 和 Bash 环境下进行实现，那么可以想到的方法是先把文件读到内存或者管道中，然后逐层进行过滤。读取文件我们可以使用 <code>cat</code> 命令，而对于过滤无效行这种任务的话，GNU/Linux 下有很多工具可以用，如 <code>grep</code> 和  <code>sed</code> 等等。我们此处选择的是 <code>sed</code> 因为它允许通过 <code>-e</code> 参数来指定多条正则表达式条件进行操作。接下来我们对正则表达式进行逐个击破。</p>\n<p>判断注释行：以 <code>#</code> 开头的全部删除，正则表达式为 <code>/^#/</code></p>\n<div style=\"background-color:#EEE;text-align:center\"><img data-src=\"properties_pattern_01.png\" /></div>\n\n<p>判断空行：仅包含0个或多个空格符的行，正则表达式为 <code>/^\\s*$/</code></p>\n<div style=\"background-color:#EEE;text-align:center\"><img data-src=\"properties_pattern_02.png\" /></div>\n\n<p>最后，在 sed 中剔除命中的行时使用操作符 <code>d</code> ，例如删除注释行，我们可以写成 <code>/^#/d</code>，以下就是我们的最终的命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat config.properties | sed -e <span class=\"string\">&#x27;/^#/d&#x27;</span> -e <span class=\"string\">&#x27;/^\\s*$/d&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>验证结论：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat config.properties | sed -e <span class=\"string\">&#x27;/^#/d&#x27;</span> -e <span class=\"string\">&#x27;/^\\s*$/d&#x27;</span></span><br><span class=\"line\">logging.level=info</span><br><span class=\"line\">setup.hosts.enabled=<span class=\"literal\">false</span></span><br><span class=\"line\">installer.maven.enabled=<span class=\"literal\">true</span></span><br><span class=\"line\">installer.git.enabled=<span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"解析配置项\"><a href=\"#解析配置项\" class=\"headerlink\" title=\"解析配置项\"></a>解析配置项</h3><p>配置项是 <code>key=value</code> 形式，我们可以循环管道中过滤后的结果中的每一行，然后按等号 <code>=</code> 进行分割。我们可以利用 <code>while</code> 和 <code>read</code> 结合起来进行读取，read 命令可以以环境变量 <code>IFS</code> 的值作为分隔符进行拆解和读取到指定的变量中。例如下面的代码：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ IFS=<span class=\"string\">&#x27;=&#x27;</span> <span class=\"built_in\">read</span> -r prop value</span><br><span class=\"line\"><span class=\"comment\"># 输入 a=b 然后回车</span></span><br><span class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$prop</span> -&gt; <span class=\"variable\">$value</span>&quot;</span></span><br><span class=\"line\">a -&gt; b</span><br></pre></td></tr></table></figure>\n\n<p>结合前面的成果和 while 循环，我们目前的解析过程可以写成：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat config.properties \\</span><br><span class=\"line\">| sed -e <span class=\"string\">&#x27;/^#/d&#x27;</span> -e <span class=\"string\">&#x27;/^\\s*$/d&#x27;</span> \\</span><br><span class=\"line\">| <span class=\"keyword\">while</span> IFS=<span class=\"string\">&#x27;=&#x27;</span> <span class=\"built_in\">read</span> -r prop value; <span class=\"keyword\">do</span> <span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$prop</span> -&gt; <span class=\"variable\">$value</span>&quot;</span>; <span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n\n<p>输出结果为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">logging.level -&gt; info</span><br><span class=\"line\">setup.hosts.enabled -&gt; false</span><br><span class=\"line\">installer.maven.enabled -&gt; true</span><br><span class=\"line\">installer.git.enabled -&gt; true</span><br></pre></td></tr></table></figure>\n\n<p>看起来符合我们的预期，因为我们使用 <code>echo</code> 已经输出了我们想要的读取的值，完美！然而，真的是这样么？到目前为止，我们只是解析出来了配置项的值，但是还没有进行存储以备其他过程进一步使用。</p>\n<h3 id=\"值不见了？\"><a href=\"#值不见了？\" class=\"headerlink\" title=\"值不见了？\"></a>值不见了？</h3><p>接下来我们来声明一个关联数组，我们准备用它来存储所有的配置项到内存中，以便随时使用。以下是我们的代码：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"built_in\">declare</span> -A config</span><br><span class=\"line\"></span><br><span class=\"line\">cat config.properties \\</span><br><span class=\"line\">| sed -e <span class=\"string\">&#x27;/^#/d&#x27;</span> -e <span class=\"string\">&#x27;/^\\s*$/d&#x27;</span> \\</span><br><span class=\"line\">| <span class=\"keyword\">while</span> IFS=<span class=\"string\">&#x27;=&#x27;</span> <span class=\"built_in\">read</span> -r prop value; <span class=\"keyword\">do</span></span><br><span class=\"line\">\tconfig[<span class=\"variable\">$prop</span>]=<span class=\"variable\">$value</span></span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;config[@]&#125;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>读者可以实际执行一下，结果竟然是<strong>没有任何信息输出</strong>！这里给出根因：</p>\n<blockquote>\n<p>根因：<code>...| while ... do; ... done</code> 管道命令 <code>|</code> 会调用内核的 fork 产生一个子进程，在子进程中所进行的while 循环中的任何的变量赋值操作的作用域仅在子进程内部，语句执行完之后，子进程也随之被销毁。所以尝试在此处进行的赋值操作没有任何效果。</p>\n</blockquote>\n<p>好了，根因我们知道了，那么我们要如何解决呢？对，我们不用管道，我们要使用 bash 中的“输入转向”功能来实现我们的目的，结构如下所示：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> ...; <span class=\"keyword\">do</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\"><span class=\"keyword\">done</span> &lt; /path/to/file</span><br></pre></td></tr></table></figure>\n\n<p>但是这里 while 循环读取的是输入设备是文件，而我们在读取文件之后是要做系列过滤加工的，上面的这种形式显然不能满足要求。别着急，Bash 还为我们提供了另外一种产生“输入”的方式：<code>&lt;(command)</code>，那么改造后的形式就是：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> ...; <span class=\"keyword\">do</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\"><span class=\"keyword\">done</span> &lt; &lt;(<span class=\"built_in\">command</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"去除等号两边的空白字符\"><a href=\"#去除等号两边的空白字符\" class=\"headerlink\" title=\"去除等号两边的空白字符\"></a>去除等号两边的空白字符</h3><p>这是一个可选需求，因为正常的属性文件格式要求属性名称、等号和值之间不能有空格。不过笔者习惯使用自由度大一点的配置格式，允许有些空白字符来美化一下格式。为了更直观的展示这个场景，我们假设用 <code>#</code> 来表示空白字符话，目标字符串就是 <code>###foo##</code>。如果我们要去除两边的空白字符（此处是符号#）的话，下面的正则表达式可以完成：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 先剔除左边的符号#，再剔除右侧的符号#</span></span><br><span class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"string\">&quot;###foo##&quot;</span> | sed -e <span class=\"string\">&#x27;s/^#*//&#x27;</span> -e <span class=\"string\">&#x27;s/#*$//&#x27;</span></span><br><span class=\"line\">foo</span><br></pre></td></tr></table></figure>\n\n<p>整理成函数的话就是如下形式，函数接受一个带处理的字符串 $1，返回去除空白字符的值。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ----------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\"># Trim both leading and trailing whitespaces</span></span><br><span class=\"line\"><span class=\"comment\"># Parameters</span></span><br><span class=\"line\"><span class=\"comment\"># $1 -&gt; string to be trimmed</span></span><br><span class=\"line\"><span class=\"comment\"># ----------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">trimspaces</span></span>() &#123;</span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"variable\">$1</span> | sed -e <span class=\"string\">&#x27;s/^[[:space:]]*//&#x27;</span> -e <span class=\"string\">&#x27;s/[[:space:]]*$//&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h3><p>套用到我们的需求之后，最终形成的代码如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"built_in\">declare</span> -A config</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">trimspaces</span></span>() &#123;</span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"variable\">$1</span> | sed -e <span class=\"string\">&#x27;s/^[[:space:]]*//&#x27;</span> -e <span class=\"string\">&#x27;s/[[:space:]]*$//&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> IFS=<span class=\"string\">&#x27;=&#x27;</span> <span class=\"built_in\">read</span> -r prop value; <span class=\"keyword\">do</span></span><br><span class=\"line\">  config[$(trimspaces <span class=\"variable\">$prop</span>)]=$(trimspaces <span class=\"variable\">$value</span>)</span><br><span class=\"line\"><span class=\"keyword\">done</span> &lt; &lt;(cat config.properties | sed -e <span class=\"string\">&#x27;/^\\s*$/d&#x27;</span> -e <span class=\"string\">&#x27;/^#/d&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;!config[@]&#125;</span></span><br><span class=\"line\"><span class=\"comment\"># 输出结果：installer.git.enabled logging.level setup.hosts.enabled installer.maven.enabled</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;config[@]&#125;</span></span><br><span class=\"line\"><span class=\"comment\"># 输出结果：true info false true</span></span><br></pre></td></tr></table></figure>\n\n<p>至此，所有问题都已解决。在我的项目 <a href=\"https://github/eliu/devbox\">devbox</a> 中，配置管理模块 <code>config.sh</code> 就是使用上面的解决方案读取的配置文件。</p>\n<p><a href=\"https://github.com/eliu/devbox/blob/master/lib/modules/config.sh\">devbox/lib/modules/config.sh at master · eliu/devbox (github.com)</a></p>\n<h2 id=\"鸣谢\"><a href=\"#鸣谢\" class=\"headerlink\" title=\"鸣谢\"></a>鸣谢</h2><p>正则表达式可视化图片由 <a href=\"https://jex.im/regulex/#\">Regulex - JavaScript Regular Expression Visualizer</a> 生成，特此感谢 (R.I.P Jex)！</p>\n<p>End~</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"Properties-文件\"><a href=\"#Properties-文件\" class=\"headerlink\" title=\"Properties 文件\"></a>Properties 文件</h2><p>一种简单的键值对配置文件形式是 properties 文件，可以被 Java 语言原生支持读取。我们可以使用它为项目进行简单的配置管理，典型的 Properties 文件如下所示：</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># config.properties</span></span><br><span class=\"line\"><span class=\"comment\"># Valid values are info, verbose, debug</span></span><br><span class=\"line\"><span class=\"meta\">logging.level</span>=<span class=\"string\">info</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">setup.hosts.enabled</span>=<span class=\"string\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">installer.maven.enabled</span>=<span class=\"string\">true</span></span><br><span class=\"line\"><span class=\"meta\">installer.git.enabled</span>=<span class=\"string\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>那么像这种文件，我们如何在 Bash 环境下进行读取和使用呢？本文接下来将逐步分析实现的过程。</p>","more":"<h2 id=\"思路分析\"><a href=\"#思路分析\" class=\"headerlink\" title=\"思路分析\"></a>思路分析</h2><p>我们以刚刚所展示的 Properties 文件实例来进行分析，不难发现这种文件一般包含以下几个特点：</p>\n<ol>\n<li>允许有注释行，该行以 <code>#</code> 开头且不包含实际的配置项</li>\n<li>允许有空行</li>\n<li>配置项以等号 <code>=</code> 作为分割符，左侧为属性名称，右侧为值</li>\n<li><code>=</code> 两边去除空白字符（可选实现）</li>\n</ol>\n<p>好了，知道所有的特征之后，接下来我们着手进行代码的实现。</p>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><h3 id=\"过滤注释行和空行\"><a href=\"#过滤注释行和空行\" class=\"headerlink\" title=\"过滤注释行和空行\"></a>过滤注释行和空行</h3><p>这两种情况都属于无效行，应该被过滤剔除。由于我们是在 GNU/Linux 和 Bash 环境下进行实现，那么可以想到的方法是先把文件读到内存或者管道中，然后逐层进行过滤。读取文件我们可以使用 <code>cat</code> 命令，而对于过滤无效行这种任务的话，GNU/Linux 下有很多工具可以用，如 <code>grep</code> 和  <code>sed</code> 等等。我们此处选择的是 <code>sed</code> 因为它允许通过 <code>-e</code> 参数来指定多条正则表达式条件进行操作。接下来我们对正则表达式进行逐个击破。</p>\n<p>判断注释行：以 <code>#</code> 开头的全部删除，正则表达式为 <code>/^#/</code></p>\n<div style=\"background-color:#EEE;text-align:center\"><img data-src=\"properties_pattern_01.png\" /></div>\n\n<p>判断空行：仅包含0个或多个空格符的行，正则表达式为 <code>/^\\s*$/</code></p>\n<div style=\"background-color:#EEE;text-align:center\"><img data-src=\"properties_pattern_02.png\" /></div>\n\n<p>最后，在 sed 中剔除命中的行时使用操作符 <code>d</code> ，例如删除注释行，我们可以写成 <code>/^#/d</code>，以下就是我们的最终的命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat config.properties | sed -e <span class=\"string\">&#x27;/^#/d&#x27;</span> -e <span class=\"string\">&#x27;/^\\s*$/d&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>验证结论：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat config.properties | sed -e <span class=\"string\">&#x27;/^#/d&#x27;</span> -e <span class=\"string\">&#x27;/^\\s*$/d&#x27;</span></span><br><span class=\"line\">logging.level=info</span><br><span class=\"line\">setup.hosts.enabled=<span class=\"literal\">false</span></span><br><span class=\"line\">installer.maven.enabled=<span class=\"literal\">true</span></span><br><span class=\"line\">installer.git.enabled=<span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"解析配置项\"><a href=\"#解析配置项\" class=\"headerlink\" title=\"解析配置项\"></a>解析配置项</h3><p>配置项是 <code>key=value</code> 形式，我们可以循环管道中过滤后的结果中的每一行，然后按等号 <code>=</code> 进行分割。我们可以利用 <code>while</code> 和 <code>read</code> 结合起来进行读取，read 命令可以以环境变量 <code>IFS</code> 的值作为分隔符进行拆解和读取到指定的变量中。例如下面的代码：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ IFS=<span class=\"string\">&#x27;=&#x27;</span> <span class=\"built_in\">read</span> -r prop value</span><br><span class=\"line\"><span class=\"comment\"># 输入 a=b 然后回车</span></span><br><span class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$prop</span> -&gt; <span class=\"variable\">$value</span>&quot;</span></span><br><span class=\"line\">a -&gt; b</span><br></pre></td></tr></table></figure>\n\n<p>结合前面的成果和 while 循环，我们目前的解析过程可以写成：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat config.properties \\</span><br><span class=\"line\">| sed -e <span class=\"string\">&#x27;/^#/d&#x27;</span> -e <span class=\"string\">&#x27;/^\\s*$/d&#x27;</span> \\</span><br><span class=\"line\">| <span class=\"keyword\">while</span> IFS=<span class=\"string\">&#x27;=&#x27;</span> <span class=\"built_in\">read</span> -r prop value; <span class=\"keyword\">do</span> <span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$prop</span> -&gt; <span class=\"variable\">$value</span>&quot;</span>; <span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n\n<p>输出结果为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">logging.level -&gt; info</span><br><span class=\"line\">setup.hosts.enabled -&gt; false</span><br><span class=\"line\">installer.maven.enabled -&gt; true</span><br><span class=\"line\">installer.git.enabled -&gt; true</span><br></pre></td></tr></table></figure>\n\n<p>看起来符合我们的预期，因为我们使用 <code>echo</code> 已经输出了我们想要的读取的值，完美！然而，真的是这样么？到目前为止，我们只是解析出来了配置项的值，但是还没有进行存储以备其他过程进一步使用。</p>\n<h3 id=\"值不见了？\"><a href=\"#值不见了？\" class=\"headerlink\" title=\"值不见了？\"></a>值不见了？</h3><p>接下来我们来声明一个关联数组，我们准备用它来存储所有的配置项到内存中，以便随时使用。以下是我们的代码：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"built_in\">declare</span> -A config</span><br><span class=\"line\"></span><br><span class=\"line\">cat config.properties \\</span><br><span class=\"line\">| sed -e <span class=\"string\">&#x27;/^#/d&#x27;</span> -e <span class=\"string\">&#x27;/^\\s*$/d&#x27;</span> \\</span><br><span class=\"line\">| <span class=\"keyword\">while</span> IFS=<span class=\"string\">&#x27;=&#x27;</span> <span class=\"built_in\">read</span> -r prop value; <span class=\"keyword\">do</span></span><br><span class=\"line\">\tconfig[<span class=\"variable\">$prop</span>]=<span class=\"variable\">$value</span></span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;config[@]&#125;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>读者可以实际执行一下，结果竟然是<strong>没有任何信息输出</strong>！这里给出根因：</p>\n<blockquote>\n<p>根因：<code>...| while ... do; ... done</code> 管道命令 <code>|</code> 会调用内核的 fork 产生一个子进程，在子进程中所进行的while 循环中的任何的变量赋值操作的作用域仅在子进程内部，语句执行完之后，子进程也随之被销毁。所以尝试在此处进行的赋值操作没有任何效果。</p>\n</blockquote>\n<p>好了，根因我们知道了，那么我们要如何解决呢？对，我们不用管道，我们要使用 bash 中的“输入转向”功能来实现我们的目的，结构如下所示：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> ...; <span class=\"keyword\">do</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\"><span class=\"keyword\">done</span> &lt; /path/to/file</span><br></pre></td></tr></table></figure>\n\n<p>但是这里 while 循环读取的是输入设备是文件，而我们在读取文件之后是要做系列过滤加工的，上面的这种形式显然不能满足要求。别着急，Bash 还为我们提供了另外一种产生“输入”的方式：<code>&lt;(command)</code>，那么改造后的形式就是：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> ...; <span class=\"keyword\">do</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\"><span class=\"keyword\">done</span> &lt; &lt;(<span class=\"built_in\">command</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"去除等号两边的空白字符\"><a href=\"#去除等号两边的空白字符\" class=\"headerlink\" title=\"去除等号两边的空白字符\"></a>去除等号两边的空白字符</h3><p>这是一个可选需求，因为正常的属性文件格式要求属性名称、等号和值之间不能有空格。不过笔者习惯使用自由度大一点的配置格式，允许有些空白字符来美化一下格式。为了更直观的展示这个场景，我们假设用 <code>#</code> 来表示空白字符话，目标字符串就是 <code>###foo##</code>。如果我们要去除两边的空白字符（此处是符号#）的话，下面的正则表达式可以完成：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 先剔除左边的符号#，再剔除右侧的符号#</span></span><br><span class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"string\">&quot;###foo##&quot;</span> | sed -e <span class=\"string\">&#x27;s/^#*//&#x27;</span> -e <span class=\"string\">&#x27;s/#*$//&#x27;</span></span><br><span class=\"line\">foo</span><br></pre></td></tr></table></figure>\n\n<p>整理成函数的话就是如下形式，函数接受一个带处理的字符串 $1，返回去除空白字符的值。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ----------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\"># Trim both leading and trailing whitespaces</span></span><br><span class=\"line\"><span class=\"comment\"># Parameters</span></span><br><span class=\"line\"><span class=\"comment\"># $1 -&gt; string to be trimmed</span></span><br><span class=\"line\"><span class=\"comment\"># ----------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">trimspaces</span></span>() &#123;</span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"variable\">$1</span> | sed -e <span class=\"string\">&#x27;s/^[[:space:]]*//&#x27;</span> -e <span class=\"string\">&#x27;s/[[:space:]]*$//&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h3><p>套用到我们的需求之后，最终形成的代码如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"built_in\">declare</span> -A config</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">trimspaces</span></span>() &#123;</span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"variable\">$1</span> | sed -e <span class=\"string\">&#x27;s/^[[:space:]]*//&#x27;</span> -e <span class=\"string\">&#x27;s/[[:space:]]*$//&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> IFS=<span class=\"string\">&#x27;=&#x27;</span> <span class=\"built_in\">read</span> -r prop value; <span class=\"keyword\">do</span></span><br><span class=\"line\">  config[$(trimspaces <span class=\"variable\">$prop</span>)]=$(trimspaces <span class=\"variable\">$value</span>)</span><br><span class=\"line\"><span class=\"keyword\">done</span> &lt; &lt;(cat config.properties | sed -e <span class=\"string\">&#x27;/^\\s*$/d&#x27;</span> -e <span class=\"string\">&#x27;/^#/d&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;!config[@]&#125;</span></span><br><span class=\"line\"><span class=\"comment\"># 输出结果：installer.git.enabled logging.level setup.hosts.enabled installer.maven.enabled</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;config[@]&#125;</span></span><br><span class=\"line\"><span class=\"comment\"># 输出结果：true info false true</span></span><br></pre></td></tr></table></figure>\n\n<p>至此，所有问题都已解决。在我的项目 <a href=\"https://github/eliu/devbox\">devbox</a> 中，配置管理模块 <code>config.sh</code> 就是使用上面的解决方案读取的配置文件。</p>\n<p><a href=\"https://github.com/eliu/devbox/blob/master/lib/modules/config.sh\">devbox/lib/modules/config.sh at master · eliu/devbox (github.com)</a></p>\n<h2 id=\"鸣谢\"><a href=\"#鸣谢\" class=\"headerlink\" title=\"鸣谢\"></a>鸣谢</h2><p>正则表达式可视化图片由 <a href=\"https://jex.im/regulex/#\">Regulex - JavaScript Regular Expression Visualizer</a> 生成，特此感谢 (R.I.P Jex)！</p>\n<p>End~</p>"},{"title":"使用 k3d 在本地运行 k8s","date":"2021-03-25T06:09:40.000Z","_content":"\n本文介绍如何使用 k3d 在本地快速启动一个 k8s 集群。k3d 是以容器的方式运行 K3s 集群的工具，K3s 是 Rancher 推出的经过 CNCF 认证的与 K8S 完全兼容的发行版，特点是轻量级，启动快，依赖少，适合边缘计算以及资源能力有限的机器上运行集群。k3d 的这种启动方式对平台依赖少，安装部署比较干净利落，理论上本地只需要一个 Docker 运行环境即可。\n\n<!-- more -->\n\n## 安装过程介绍\n\n### 实验环境\n\n- 操作系统：macOS Catalina (10.15.7)\n- 容器环境：Docker Desktop for Mac 3.2.2\n- 包管理工具：Homebrew\n\n### 设置 Docker 镜像加速\n\n打开 Docker Desktop for Mac 的首选项界面，选择 Docker Engine，加入如下设置：\n\n```json\n{\n  \"registry-mirrors\": [\n    \"https://8km017g6.mirror.aliyuncs.com\"\n  ]\n}\n```\n\n之后点击 `Apply & Restart` 重启 Docker。\n\n### 安装 k3d 和 kubectl\n\nk3d 并不依赖于 kubectl，但是开发人员需要 kubectl 与 k3d 所创建的 k8s 集群进行通讯：\n\n```shell\n$ brew install kubectl\n$ brew install k3d\n```\n\n### 创建 k8s 集群\n\n使用 `k3d cluster create` 命令即可新建集群，同样 k3d 也支持通过命令行选项传入更多的可选参数，此外，也可以经由一个 YAML 配置文件来统一进行配置。下面我们重点介绍以下后者的启动方式。\n\n新建一个 YAML 格式的配置文件 `mycluster.yaml` 如下：\n\n```yaml\napiVersion: k3d.io/v1alpha2\nkind: Simple\nname: mycluster\nservers: 1\nagents: 2\nkubeAPI:\n  hostPort: \"6443\" # same as `--api-port '6443'`\nports:\n  - port: 8080:80  # same as `--port '8080:80@loadbalancer'`\n    nodeFilters:\n      - loadbalancer\n  - port: 8443:443 # same as `--port '8443:443@loadbalancer'`\n    nodeFilters:\n      - loadbalancer\n```\n\n上面的配置文件指定了集群的名称、集群的节点个数（servers, agents) 以及向主机暴露的端口，更多的配置参数介绍请访问 [Config File - k3d](https://k3d.io/usage/configfile/)。\n\n接下来我们使用上面的配置文件 `mycluster.yaml` ，通过向 k3d 传入 `--config` 参数来创建我们的集群：\n\n```shell\n$ k3d cluster create --config /path/to/mycluster.yaml\nINFO[0000] Using config file mycluster.yaml\nINFO[0000] Prep: Network\nINFO[0000] Created network 'k3d-mycluster'\nINFO[0000] Created volume 'k3d-mycluster-images'\nINFO[0001] Creating node 'k3d-mycluster-server-0'\nINFO[0001] Creating node 'k3d-mycluster-agent-0'\nINFO[0001] Creating node 'k3d-mycluster-agent-1'\nINFO[0001] Creating LoadBalancer 'k3d-mycluster-serverlb'\nINFO[0001] Starting cluster 'mycluster'\nINFO[0001] Starting servers...\nINFO[0001] Starting Node 'k3d-mycluster-server-0'\nINFO[0007] Starting agents...\nINFO[0007] Starting Node 'k3d-mycluster-agent-0'\nINFO[0020] Starting Node 'k3d-mycluster-agent-1'\nINFO[0028] Starting helpers...\nINFO[0028] Starting Node 'k3d-mycluster-serverlb'\nINFO[0029] (Optional) Trying to get IP of the docker host and inject it into the cluster as 'host.k3d.internal' for easy access\nINFO[0031] Successfully added host record to /etc/hosts in 4/4 nodes and to the CoreDNS ConfigMap\nINFO[0031] Cluster 'mycluster' created successfully!\nINFO[0031] --kubeconfig-update-default=false --> sets --kubeconfig-switch-context=false\nINFO[0031] You can now use it like this:\nkubectl config use-context k3d-mycluster\nkubectl cluster-info\n```\n\n接下来我们使用 `kubectl` 来查看集群 `mucluster` 中的基本信息：\n\n```shell\n$ kubectl get nodes\nNAME                     STATUS   ROLES                  AGE   VERSION\nk3d-mycluster-server-0   Ready    control-plane,master   29m   v1.20.2+k3s1\nk3d-mycluster-agent-0    Ready    <none>                 29m   v1.20.2+k3s1\nk3d-mycluster-agent-1    Ready    <none>                 29m   v1.20.2+k3s1\n\n$ kubectl get pods -n kube-system\nNAME                                      READY   STATUS      RESTARTS   AGE\nlocal-path-provisioner-7c458769fb-sr8dk   1/1     Running     0          29m\nmetrics-server-86cbb8457f-t6kgk           1/1     Running     0          29m\ncoredns-854c77959c-fnlsh                  1/1     Running     0          29m\nhelm-install-traefik-cbwv7                0/1     Completed   0          29m\nsvclb-traefik-pf5fz                       2/2     Running     0          28m\nsvclb-traefik-5ctqj                       2/2     Running     0          28m\nsvclb-traefik-fqdzl                       2/2     Running     0          28m\ntraefik-6f9cbd9bd4-lpxvw                  1/1     Running     0          28m\n```\n\n至此，一个最基本的 k8s 集群就已经创建好了。\n\n### 删除集群\n\n使用以下命令删除上面已经创建的集群：\n\n```shell\nk3d cluster delete mycluster\n```\n\n### 部署测试应用\n\n此处我们使用 k3d 官网提供的测试应用部署方法来启动一个 nginx：\n\n```shell\n$ kubectl create deployment nginx --image=nginx:alpine\ndeployment.apps/nginx created\n$ kubectl create service clusterip nginx --tcp=80:80\nservice/nginx created\n\n$ cat <<EOF | kubectl apply -f -\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: nginx\n  annotations:\n    ingress.kubernetes.io/ssl-redirect: \"false\"\nspec:\n  rules:\n  - http:\n      paths:\n      - path: /\n        pathType: Prefix\n        backend:\n          service:\n            name: nginx\n            port:\n              number: 80\nEOF\ningress.networking.k8s.io/nginx created\n```\n\n在浏览器打开 http://localhost:8080/ \n\n![localhost-8080](run-local-k8s-using-k3d/localhost-8080.png)\n\n## 参考资料\n\n- [k3d#installation](https://k3d.io/#installation)\n- [Config File - k3d](https://k3d.io/usage/configfile/)\n- [Exposing Services - k3d](https://k3d.io/usage/guides/exposing_services/#1-via-ingress-recommended)\n- [如何在本地快速启动一个 K8S 集群 | xkcoding](https://xkcoding.com/2021/03/15/run-local-k8s-cluster-quickly.html)\n\n","source":"_posts/run-local-k8s-using-k3d.md","raw":"---\ntitle: 使用 k3d 在本地运行 k8s\ndate: 2021-03-25 14:09:40\ncategories:\n- k8s\n- Kubernetes\ntags:\n- k3d\n- k3s\n- docker\n---\n\n本文介绍如何使用 k3d 在本地快速启动一个 k8s 集群。k3d 是以容器的方式运行 K3s 集群的工具，K3s 是 Rancher 推出的经过 CNCF 认证的与 K8S 完全兼容的发行版，特点是轻量级，启动快，依赖少，适合边缘计算以及资源能力有限的机器上运行集群。k3d 的这种启动方式对平台依赖少，安装部署比较干净利落，理论上本地只需要一个 Docker 运行环境即可。\n\n<!-- more -->\n\n## 安装过程介绍\n\n### 实验环境\n\n- 操作系统：macOS Catalina (10.15.7)\n- 容器环境：Docker Desktop for Mac 3.2.2\n- 包管理工具：Homebrew\n\n### 设置 Docker 镜像加速\n\n打开 Docker Desktop for Mac 的首选项界面，选择 Docker Engine，加入如下设置：\n\n```json\n{\n  \"registry-mirrors\": [\n    \"https://8km017g6.mirror.aliyuncs.com\"\n  ]\n}\n```\n\n之后点击 `Apply & Restart` 重启 Docker。\n\n### 安装 k3d 和 kubectl\n\nk3d 并不依赖于 kubectl，但是开发人员需要 kubectl 与 k3d 所创建的 k8s 集群进行通讯：\n\n```shell\n$ brew install kubectl\n$ brew install k3d\n```\n\n### 创建 k8s 集群\n\n使用 `k3d cluster create` 命令即可新建集群，同样 k3d 也支持通过命令行选项传入更多的可选参数，此外，也可以经由一个 YAML 配置文件来统一进行配置。下面我们重点介绍以下后者的启动方式。\n\n新建一个 YAML 格式的配置文件 `mycluster.yaml` 如下：\n\n```yaml\napiVersion: k3d.io/v1alpha2\nkind: Simple\nname: mycluster\nservers: 1\nagents: 2\nkubeAPI:\n  hostPort: \"6443\" # same as `--api-port '6443'`\nports:\n  - port: 8080:80  # same as `--port '8080:80@loadbalancer'`\n    nodeFilters:\n      - loadbalancer\n  - port: 8443:443 # same as `--port '8443:443@loadbalancer'`\n    nodeFilters:\n      - loadbalancer\n```\n\n上面的配置文件指定了集群的名称、集群的节点个数（servers, agents) 以及向主机暴露的端口，更多的配置参数介绍请访问 [Config File - k3d](https://k3d.io/usage/configfile/)。\n\n接下来我们使用上面的配置文件 `mycluster.yaml` ，通过向 k3d 传入 `--config` 参数来创建我们的集群：\n\n```shell\n$ k3d cluster create --config /path/to/mycluster.yaml\nINFO[0000] Using config file mycluster.yaml\nINFO[0000] Prep: Network\nINFO[0000] Created network 'k3d-mycluster'\nINFO[0000] Created volume 'k3d-mycluster-images'\nINFO[0001] Creating node 'k3d-mycluster-server-0'\nINFO[0001] Creating node 'k3d-mycluster-agent-0'\nINFO[0001] Creating node 'k3d-mycluster-agent-1'\nINFO[0001] Creating LoadBalancer 'k3d-mycluster-serverlb'\nINFO[0001] Starting cluster 'mycluster'\nINFO[0001] Starting servers...\nINFO[0001] Starting Node 'k3d-mycluster-server-0'\nINFO[0007] Starting agents...\nINFO[0007] Starting Node 'k3d-mycluster-agent-0'\nINFO[0020] Starting Node 'k3d-mycluster-agent-1'\nINFO[0028] Starting helpers...\nINFO[0028] Starting Node 'k3d-mycluster-serverlb'\nINFO[0029] (Optional) Trying to get IP of the docker host and inject it into the cluster as 'host.k3d.internal' for easy access\nINFO[0031] Successfully added host record to /etc/hosts in 4/4 nodes and to the CoreDNS ConfigMap\nINFO[0031] Cluster 'mycluster' created successfully!\nINFO[0031] --kubeconfig-update-default=false --> sets --kubeconfig-switch-context=false\nINFO[0031] You can now use it like this:\nkubectl config use-context k3d-mycluster\nkubectl cluster-info\n```\n\n接下来我们使用 `kubectl` 来查看集群 `mucluster` 中的基本信息：\n\n```shell\n$ kubectl get nodes\nNAME                     STATUS   ROLES                  AGE   VERSION\nk3d-mycluster-server-0   Ready    control-plane,master   29m   v1.20.2+k3s1\nk3d-mycluster-agent-0    Ready    <none>                 29m   v1.20.2+k3s1\nk3d-mycluster-agent-1    Ready    <none>                 29m   v1.20.2+k3s1\n\n$ kubectl get pods -n kube-system\nNAME                                      READY   STATUS      RESTARTS   AGE\nlocal-path-provisioner-7c458769fb-sr8dk   1/1     Running     0          29m\nmetrics-server-86cbb8457f-t6kgk           1/1     Running     0          29m\ncoredns-854c77959c-fnlsh                  1/1     Running     0          29m\nhelm-install-traefik-cbwv7                0/1     Completed   0          29m\nsvclb-traefik-pf5fz                       2/2     Running     0          28m\nsvclb-traefik-5ctqj                       2/2     Running     0          28m\nsvclb-traefik-fqdzl                       2/2     Running     0          28m\ntraefik-6f9cbd9bd4-lpxvw                  1/1     Running     0          28m\n```\n\n至此，一个最基本的 k8s 集群就已经创建好了。\n\n### 删除集群\n\n使用以下命令删除上面已经创建的集群：\n\n```shell\nk3d cluster delete mycluster\n```\n\n### 部署测试应用\n\n此处我们使用 k3d 官网提供的测试应用部署方法来启动一个 nginx：\n\n```shell\n$ kubectl create deployment nginx --image=nginx:alpine\ndeployment.apps/nginx created\n$ kubectl create service clusterip nginx --tcp=80:80\nservice/nginx created\n\n$ cat <<EOF | kubectl apply -f -\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: nginx\n  annotations:\n    ingress.kubernetes.io/ssl-redirect: \"false\"\nspec:\n  rules:\n  - http:\n      paths:\n      - path: /\n        pathType: Prefix\n        backend:\n          service:\n            name: nginx\n            port:\n              number: 80\nEOF\ningress.networking.k8s.io/nginx created\n```\n\n在浏览器打开 http://localhost:8080/ \n\n![localhost-8080](run-local-k8s-using-k3d/localhost-8080.png)\n\n## 参考资料\n\n- [k3d#installation](https://k3d.io/#installation)\n- [Config File - k3d](https://k3d.io/usage/configfile/)\n- [Exposing Services - k3d](https://k3d.io/usage/guides/exposing_services/#1-via-ingress-recommended)\n- [如何在本地快速启动一个 K8S 集群 | xkcoding](https://xkcoding.com/2021/03/15/run-local-k8s-cluster-quickly.html)\n\n","slug":"run-local-k8s-using-k3d","published":1,"updated":"2021-03-25T06:43:14.697Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmasb6npy001e7sos2nja182o","content":"<p>本文介绍如何使用 k3d 在本地快速启动一个 k8s 集群。k3d 是以容器的方式运行 K3s 集群的工具，K3s 是 Rancher 推出的经过 CNCF 认证的与 K8S 完全兼容的发行版，特点是轻量级，启动快，依赖少，适合边缘计算以及资源能力有限的机器上运行集群。k3d 的这种启动方式对平台依赖少，安装部署比较干净利落，理论上本地只需要一个 Docker 运行环境即可。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"安装过程介绍\"><a href=\"#安装过程介绍\" class=\"headerlink\" title=\"安装过程介绍\"></a>安装过程介绍</h2><h3 id=\"实验环境\"><a href=\"#实验环境\" class=\"headerlink\" title=\"实验环境\"></a>实验环境</h3><ul>\n<li>操作系统：macOS Catalina (10.15.7)</li>\n<li>容器环境：Docker Desktop for Mac 3.2.2</li>\n<li>包管理工具：Homebrew</li>\n</ul>\n<h3 id=\"设置-Docker-镜像加速\"><a href=\"#设置-Docker-镜像加速\" class=\"headerlink\" title=\"设置 Docker 镜像加速\"></a>设置 Docker 镜像加速</h3><p>打开 Docker Desktop for Mac 的首选项界面，选择 Docker Engine，加入如下设置：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">&quot;registry-mirrors&quot;</span>: [</span><br><span class=\"line\">    <span class=\"string\">&quot;https://8km017g6.mirror.aliyuncs.com&quot;</span></span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>之后点击 <code>Apply &amp; Restart</code> 重启 Docker。</p>\n<h3 id=\"安装-k3d-和-kubectl\"><a href=\"#安装-k3d-和-kubectl\" class=\"headerlink\" title=\"安装 k3d 和 kubectl\"></a>安装 k3d 和 kubectl</h3><p>k3d 并不依赖于 kubectl，但是开发人员需要 kubectl 与 k3d 所创建的 k8s 集群进行通讯：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> brew install kubectl</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> brew install k3d</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建-k8s-集群\"><a href=\"#创建-k8s-集群\" class=\"headerlink\" title=\"创建 k8s 集群\"></a>创建 k8s 集群</h3><p>使用 <code>k3d cluster create</code> 命令即可新建集群，同样 k3d 也支持通过命令行选项传入更多的可选参数，此外，也可以经由一个 YAML 配置文件来统一进行配置。下面我们重点介绍以下后者的启动方式。</p>\n<p>新建一个 YAML 格式的配置文件 <code>mycluster.yaml</code> 如下：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">k3d.io/v1alpha2</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Simple</span></span><br><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">mycluster</span></span><br><span class=\"line\"><span class=\"attr\">servers:</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"attr\">agents:</span> <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"attr\">kubeAPI:</span></span><br><span class=\"line\">  <span class=\"attr\">hostPort:</span> <span class=\"string\">&quot;6443&quot;</span> <span class=\"comment\"># same as `--api-port &#x27;6443&#x27;`</span></span><br><span class=\"line\"><span class=\"attr\">ports:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">port:</span> <span class=\"number\">8080</span><span class=\"string\">:80</span>  <span class=\"comment\"># same as `--port &#x27;8080:80@loadbalancer&#x27;`</span></span><br><span class=\"line\">    <span class=\"attr\">nodeFilters:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">loadbalancer</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">port:</span> <span class=\"number\">8443</span><span class=\"string\">:443</span> <span class=\"comment\"># same as `--port &#x27;8443:443@loadbalancer&#x27;`</span></span><br><span class=\"line\">    <span class=\"attr\">nodeFilters:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">loadbalancer</span></span><br></pre></td></tr></table></figure>\n\n<p>上面的配置文件指定了集群的名称、集群的节点个数（servers, agents) 以及向主机暴露的端口，更多的配置参数介绍请访问 <a href=\"https://k3d.io/usage/configfile/\">Config File - k3d</a>。</p>\n<p>接下来我们使用上面的配置文件 <code>mycluster.yaml</code> ，通过向 k3d 传入 <code>--config</code> 参数来创建我们的集群：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> k3d cluster create --config /path/to/mycluster.yaml</span></span><br><span class=\"line\">INFO[0000] Using config file mycluster.yaml</span><br><span class=\"line\">INFO[0000] Prep: Network</span><br><span class=\"line\">INFO[0000] Created network &#x27;k3d-mycluster&#x27;</span><br><span class=\"line\">INFO[0000] Created volume &#x27;k3d-mycluster-images&#x27;</span><br><span class=\"line\">INFO[0001] Creating node &#x27;k3d-mycluster-server-0&#x27;</span><br><span class=\"line\">INFO[0001] Creating node &#x27;k3d-mycluster-agent-0&#x27;</span><br><span class=\"line\">INFO[0001] Creating node &#x27;k3d-mycluster-agent-1&#x27;</span><br><span class=\"line\">INFO[0001] Creating LoadBalancer &#x27;k3d-mycluster-serverlb&#x27;</span><br><span class=\"line\">INFO[0001] Starting cluster &#x27;mycluster&#x27;</span><br><span class=\"line\">INFO[0001] Starting servers...</span><br><span class=\"line\">INFO[0001] Starting Node &#x27;k3d-mycluster-server-0&#x27;</span><br><span class=\"line\">INFO[0007] Starting agents...</span><br><span class=\"line\">INFO[0007] Starting Node &#x27;k3d-mycluster-agent-0&#x27;</span><br><span class=\"line\">INFO[0020] Starting Node &#x27;k3d-mycluster-agent-1&#x27;</span><br><span class=\"line\">INFO[0028] Starting helpers...</span><br><span class=\"line\">INFO[0028] Starting Node &#x27;k3d-mycluster-serverlb&#x27;</span><br><span class=\"line\">INFO[0029] (Optional) Trying to get IP of the docker host and inject it into the cluster as &#x27;host.k3d.internal&#x27; for easy access</span><br><span class=\"line\">INFO[0031] Successfully added host record to /etc/hosts in 4/4 nodes and to the CoreDNS ConfigMap</span><br><span class=\"line\">INFO[0031] Cluster &#x27;mycluster&#x27; created successfully!</span><br><span class=\"line\">INFO[0031] --kubeconfig-update-default=false --&gt; sets --kubeconfig-switch-context=false</span><br><span class=\"line\">INFO[0031] You can now use it like this:</span><br><span class=\"line\">kubectl config use-context k3d-mycluster</span><br><span class=\"line\">kubectl cluster-info</span><br></pre></td></tr></table></figure>\n\n<p>接下来我们使用 <code>kubectl</code> 来查看集群 <code>mucluster</code> 中的基本信息：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> kubectl get nodes</span></span><br><span class=\"line\">NAME                     STATUS   ROLES                  AGE   VERSION</span><br><span class=\"line\">k3d-mycluster-server-0   Ready    control-plane,master   29m   v1.20.2+k3s1</span><br><span class=\"line\">k3d-mycluster-agent-0    Ready    &lt;none&gt;                 29m   v1.20.2+k3s1</span><br><span class=\"line\">k3d-mycluster-agent-1    Ready    &lt;none&gt;                 29m   v1.20.2+k3s1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> kubectl get pods -n kube-system</span></span><br><span class=\"line\">NAME                                      READY   STATUS      RESTARTS   AGE</span><br><span class=\"line\">local-path-provisioner-7c458769fb-sr8dk   1/1     Running     0          29m</span><br><span class=\"line\">metrics-server-86cbb8457f-t6kgk           1/1     Running     0          29m</span><br><span class=\"line\">coredns-854c77959c-fnlsh                  1/1     Running     0          29m</span><br><span class=\"line\">helm-install-traefik-cbwv7                0/1     Completed   0          29m</span><br><span class=\"line\">svclb-traefik-pf5fz                       2/2     Running     0          28m</span><br><span class=\"line\">svclb-traefik-5ctqj                       2/2     Running     0          28m</span><br><span class=\"line\">svclb-traefik-fqdzl                       2/2     Running     0          28m</span><br><span class=\"line\">traefik-6f9cbd9bd4-lpxvw                  1/1     Running     0          28m</span><br></pre></td></tr></table></figure>\n\n<p>至此，一个最基本的 k8s 集群就已经创建好了。</p>\n<h3 id=\"删除集群\"><a href=\"#删除集群\" class=\"headerlink\" title=\"删除集群\"></a>删除集群</h3><p>使用以下命令删除上面已经创建的集群：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">k3d cluster delete mycluster</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"部署测试应用\"><a href=\"#部署测试应用\" class=\"headerlink\" title=\"部署测试应用\"></a>部署测试应用</h3><p>此处我们使用 k3d 官网提供的测试应用部署方法来启动一个 nginx：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> kubectl create deployment nginx --image=nginx:alpine</span></span><br><span class=\"line\">deployment.apps/nginx created</span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> kubectl create service clusterip nginx --tcp=80:80</span></span><br><span class=\"line\">service/nginx created</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> cat &lt;&lt;<span class=\"string\">EOF | kubectl apply -f -</span></span></span><br><span class=\"line\">apiVersion: networking.k8s.io/v1</span><br><span class=\"line\">kind: Ingress</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: nginx</span><br><span class=\"line\">  annotations:</span><br><span class=\"line\">    ingress.kubernetes.io/ssl-redirect: &quot;false&quot;</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  rules:</span><br><span class=\"line\">  - http:</span><br><span class=\"line\">      paths:</span><br><span class=\"line\">      - path: /</span><br><span class=\"line\">        pathType: Prefix</span><br><span class=\"line\">        backend:</span><br><span class=\"line\">          service:</span><br><span class=\"line\">            name: nginx</span><br><span class=\"line\">            port:</span><br><span class=\"line\">              number: 80</span><br><span class=\"line\">EOF</span><br><span class=\"line\">ingress.networking.k8s.io/nginx created</span><br></pre></td></tr></table></figure>\n\n<p>在浏览器打开 <a href=\"http://localhost:8080/\">http://localhost:8080/</a> </p>\n<p><img data-src=\"/2021/03/25/run-local-k8s-using-k3d/localhost-8080.png\" alt=\"localhost-8080\"></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://k3d.io/#installation\">k3d#installation</a></li>\n<li><a href=\"https://k3d.io/usage/configfile/\">Config File - k3d</a></li>\n<li><a href=\"https://k3d.io/usage/guides/exposing_services/#1-via-ingress-recommended\">Exposing Services - k3d</a></li>\n<li><a href=\"https://xkcoding.com/2021/03/15/run-local-k8s-cluster-quickly.html\">如何在本地快速启动一个 K8S 集群 | xkcoding</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>本文介绍如何使用 k3d 在本地快速启动一个 k8s 集群。k3d 是以容器的方式运行 K3s 集群的工具，K3s 是 Rancher 推出的经过 CNCF 认证的与 K8S 完全兼容的发行版，特点是轻量级，启动快，依赖少，适合边缘计算以及资源能力有限的机器上运行集群。k3d 的这种启动方式对平台依赖少，安装部署比较干净利落，理论上本地只需要一个 Docker 运行环境即可。</p>","more":"<h2 id=\"安装过程介绍\"><a href=\"#安装过程介绍\" class=\"headerlink\" title=\"安装过程介绍\"></a>安装过程介绍</h2><h3 id=\"实验环境\"><a href=\"#实验环境\" class=\"headerlink\" title=\"实验环境\"></a>实验环境</h3><ul>\n<li>操作系统：macOS Catalina (10.15.7)</li>\n<li>容器环境：Docker Desktop for Mac 3.2.2</li>\n<li>包管理工具：Homebrew</li>\n</ul>\n<h3 id=\"设置-Docker-镜像加速\"><a href=\"#设置-Docker-镜像加速\" class=\"headerlink\" title=\"设置 Docker 镜像加速\"></a>设置 Docker 镜像加速</h3><p>打开 Docker Desktop for Mac 的首选项界面，选择 Docker Engine，加入如下设置：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">&quot;registry-mirrors&quot;</span>: [</span><br><span class=\"line\">    <span class=\"string\">&quot;https://8km017g6.mirror.aliyuncs.com&quot;</span></span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>之后点击 <code>Apply &amp; Restart</code> 重启 Docker。</p>\n<h3 id=\"安装-k3d-和-kubectl\"><a href=\"#安装-k3d-和-kubectl\" class=\"headerlink\" title=\"安装 k3d 和 kubectl\"></a>安装 k3d 和 kubectl</h3><p>k3d 并不依赖于 kubectl，但是开发人员需要 kubectl 与 k3d 所创建的 k8s 集群进行通讯：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> brew install kubectl</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> brew install k3d</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建-k8s-集群\"><a href=\"#创建-k8s-集群\" class=\"headerlink\" title=\"创建 k8s 集群\"></a>创建 k8s 集群</h3><p>使用 <code>k3d cluster create</code> 命令即可新建集群，同样 k3d 也支持通过命令行选项传入更多的可选参数，此外，也可以经由一个 YAML 配置文件来统一进行配置。下面我们重点介绍以下后者的启动方式。</p>\n<p>新建一个 YAML 格式的配置文件 <code>mycluster.yaml</code> 如下：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">k3d.io/v1alpha2</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Simple</span></span><br><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">mycluster</span></span><br><span class=\"line\"><span class=\"attr\">servers:</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"attr\">agents:</span> <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"attr\">kubeAPI:</span></span><br><span class=\"line\">  <span class=\"attr\">hostPort:</span> <span class=\"string\">&quot;6443&quot;</span> <span class=\"comment\"># same as `--api-port &#x27;6443&#x27;`</span></span><br><span class=\"line\"><span class=\"attr\">ports:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">port:</span> <span class=\"number\">8080</span><span class=\"string\">:80</span>  <span class=\"comment\"># same as `--port &#x27;8080:80@loadbalancer&#x27;`</span></span><br><span class=\"line\">    <span class=\"attr\">nodeFilters:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">loadbalancer</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">port:</span> <span class=\"number\">8443</span><span class=\"string\">:443</span> <span class=\"comment\"># same as `--port &#x27;8443:443@loadbalancer&#x27;`</span></span><br><span class=\"line\">    <span class=\"attr\">nodeFilters:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">loadbalancer</span></span><br></pre></td></tr></table></figure>\n\n<p>上面的配置文件指定了集群的名称、集群的节点个数（servers, agents) 以及向主机暴露的端口，更多的配置参数介绍请访问 <a href=\"https://k3d.io/usage/configfile/\">Config File - k3d</a>。</p>\n<p>接下来我们使用上面的配置文件 <code>mycluster.yaml</code> ，通过向 k3d 传入 <code>--config</code> 参数来创建我们的集群：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> k3d cluster create --config /path/to/mycluster.yaml</span></span><br><span class=\"line\">INFO[0000] Using config file mycluster.yaml</span><br><span class=\"line\">INFO[0000] Prep: Network</span><br><span class=\"line\">INFO[0000] Created network &#x27;k3d-mycluster&#x27;</span><br><span class=\"line\">INFO[0000] Created volume &#x27;k3d-mycluster-images&#x27;</span><br><span class=\"line\">INFO[0001] Creating node &#x27;k3d-mycluster-server-0&#x27;</span><br><span class=\"line\">INFO[0001] Creating node &#x27;k3d-mycluster-agent-0&#x27;</span><br><span class=\"line\">INFO[0001] Creating node &#x27;k3d-mycluster-agent-1&#x27;</span><br><span class=\"line\">INFO[0001] Creating LoadBalancer &#x27;k3d-mycluster-serverlb&#x27;</span><br><span class=\"line\">INFO[0001] Starting cluster &#x27;mycluster&#x27;</span><br><span class=\"line\">INFO[0001] Starting servers...</span><br><span class=\"line\">INFO[0001] Starting Node &#x27;k3d-mycluster-server-0&#x27;</span><br><span class=\"line\">INFO[0007] Starting agents...</span><br><span class=\"line\">INFO[0007] Starting Node &#x27;k3d-mycluster-agent-0&#x27;</span><br><span class=\"line\">INFO[0020] Starting Node &#x27;k3d-mycluster-agent-1&#x27;</span><br><span class=\"line\">INFO[0028] Starting helpers...</span><br><span class=\"line\">INFO[0028] Starting Node &#x27;k3d-mycluster-serverlb&#x27;</span><br><span class=\"line\">INFO[0029] (Optional) Trying to get IP of the docker host and inject it into the cluster as &#x27;host.k3d.internal&#x27; for easy access</span><br><span class=\"line\">INFO[0031] Successfully added host record to /etc/hosts in 4/4 nodes and to the CoreDNS ConfigMap</span><br><span class=\"line\">INFO[0031] Cluster &#x27;mycluster&#x27; created successfully!</span><br><span class=\"line\">INFO[0031] --kubeconfig-update-default=false --&gt; sets --kubeconfig-switch-context=false</span><br><span class=\"line\">INFO[0031] You can now use it like this:</span><br><span class=\"line\">kubectl config use-context k3d-mycluster</span><br><span class=\"line\">kubectl cluster-info</span><br></pre></td></tr></table></figure>\n\n<p>接下来我们使用 <code>kubectl</code> 来查看集群 <code>mucluster</code> 中的基本信息：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> kubectl get nodes</span></span><br><span class=\"line\">NAME                     STATUS   ROLES                  AGE   VERSION</span><br><span class=\"line\">k3d-mycluster-server-0   Ready    control-plane,master   29m   v1.20.2+k3s1</span><br><span class=\"line\">k3d-mycluster-agent-0    Ready    &lt;none&gt;                 29m   v1.20.2+k3s1</span><br><span class=\"line\">k3d-mycluster-agent-1    Ready    &lt;none&gt;                 29m   v1.20.2+k3s1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> kubectl get pods -n kube-system</span></span><br><span class=\"line\">NAME                                      READY   STATUS      RESTARTS   AGE</span><br><span class=\"line\">local-path-provisioner-7c458769fb-sr8dk   1/1     Running     0          29m</span><br><span class=\"line\">metrics-server-86cbb8457f-t6kgk           1/1     Running     0          29m</span><br><span class=\"line\">coredns-854c77959c-fnlsh                  1/1     Running     0          29m</span><br><span class=\"line\">helm-install-traefik-cbwv7                0/1     Completed   0          29m</span><br><span class=\"line\">svclb-traefik-pf5fz                       2/2     Running     0          28m</span><br><span class=\"line\">svclb-traefik-5ctqj                       2/2     Running     0          28m</span><br><span class=\"line\">svclb-traefik-fqdzl                       2/2     Running     0          28m</span><br><span class=\"line\">traefik-6f9cbd9bd4-lpxvw                  1/1     Running     0          28m</span><br></pre></td></tr></table></figure>\n\n<p>至此，一个最基本的 k8s 集群就已经创建好了。</p>\n<h3 id=\"删除集群\"><a href=\"#删除集群\" class=\"headerlink\" title=\"删除集群\"></a>删除集群</h3><p>使用以下命令删除上面已经创建的集群：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">k3d cluster delete mycluster</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"部署测试应用\"><a href=\"#部署测试应用\" class=\"headerlink\" title=\"部署测试应用\"></a>部署测试应用</h3><p>此处我们使用 k3d 官网提供的测试应用部署方法来启动一个 nginx：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> kubectl create deployment nginx --image=nginx:alpine</span></span><br><span class=\"line\">deployment.apps/nginx created</span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> kubectl create service clusterip nginx --tcp=80:80</span></span><br><span class=\"line\">service/nginx created</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> cat &lt;&lt;<span class=\"string\">EOF | kubectl apply -f -</span></span></span><br><span class=\"line\">apiVersion: networking.k8s.io/v1</span><br><span class=\"line\">kind: Ingress</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: nginx</span><br><span class=\"line\">  annotations:</span><br><span class=\"line\">    ingress.kubernetes.io/ssl-redirect: &quot;false&quot;</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  rules:</span><br><span class=\"line\">  - http:</span><br><span class=\"line\">      paths:</span><br><span class=\"line\">      - path: /</span><br><span class=\"line\">        pathType: Prefix</span><br><span class=\"line\">        backend:</span><br><span class=\"line\">          service:</span><br><span class=\"line\">            name: nginx</span><br><span class=\"line\">            port:</span><br><span class=\"line\">              number: 80</span><br><span class=\"line\">EOF</span><br><span class=\"line\">ingress.networking.k8s.io/nginx created</span><br></pre></td></tr></table></figure>\n\n<p>在浏览器打开 <a href=\"http://localhost:8080/\">http://localhost:8080/</a> </p>\n<p><img data-src=\"/2021/03/25/run-local-k8s-using-k3d/localhost-8080.png\" alt=\"localhost-8080\"></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://k3d.io/#installation\">k3d#installation</a></li>\n<li><a href=\"https://k3d.io/usage/configfile/\">Config File - k3d</a></li>\n<li><a href=\"https://k3d.io/usage/guides/exposing_services/#1-via-ingress-recommended\">Exposing Services - k3d</a></li>\n<li><a href=\"https://xkcoding.com/2021/03/15/run-local-k8s-cluster-quickly.html\">如何在本地快速启动一个 K8S 集群 | xkcoding</a></li>\n</ul>"},{"title":"使用 kind 在本地运行 k8s","date":"2021-03-24T13:30:26.000Z","_content":"\n本文介绍如何使用 kind 在本地快速启动一个 k8s 集群。kind 是 Kubernetes in Docker 的简写，从名字上看很容易猜出 kind 的目标是将一个 k8s 集群以容器的方式部署在本机电脑上。这种方式对平台依赖少，安装部署比较干净利落，理论上本地只需要一个 Docker 运行环境即可。\n\n<!-- more -->\n\n## 安装过程介绍\n\n### 实验环境\n\n- 操作系统：macOS Catalina (10.15.7)\n- 容器环境：Docker Desktop for Mac 3.2.2\n- 包管理工具：Homebrew\n\n### 设置 Docker 镜像加速\n\n打开 Docker Desktop for Mac 的首选项界面，选择 Docker Engine，加入如下设置：\n\n```json\n{\n  \"registry-mirrors\": [\n    \"https://8km017g6.mirror.aliyuncs.com\"\n  ]\n}\n```\n\n之后点击 `Apply & Restart` 重启 Docker。\n\n### 安装 kind 和 kubectl\n\nkind 并不依赖于 kubectl，但是开发人员需要 kubectl 与 kind 所创建的 k8s 集群进行通讯：\n\n```shell\n$ brew install kubectl\n$ brew install kind\n```\n\n### 创建 k8s 集群\n\n使用 `kind create cluster` 命令新建集群，注意 `--name` 选项指定集群的名称，若未指定该参数，`kind` 将会是默认的集群名称。 \n\n```shell\n$ kind create cluster --name demo\nCreating cluster \"demo\" ...\n ✓ Ensuring node image (kindest/node:v1.20.2) 🖼\n ✓ Preparing nodes 📦\n ✓ Writing configuration 📜\n ✓ Starting control-plane 🕹️\n ✓ Installing CNI 🔌\n ✓ Installing StorageClass 💾\nSet kubectl context to \"kind-demo\"\nYou can now use your cluster with:\n\nkubectl cluster-info --context kind-demo\n\nThanks for using kind! 😊\n```\n\n此时根据提示输入 `kubectl cluster-info --context kind-demo` 会显示集群当前的基本信息：\n\n```shell\n$ kubectl cluster-info --context kind-demo\nKubernetes control plane is running at https://127.0.0.1:56770\nKubeDNS is running at https://127.0.0.1:56770/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy\n\nTo further debug and diagnose cluster problems, use 'kubectl cluster-info dump'.\n```\n\n查看集群 demo 中的节点信息：\n\n```shell\n$ kubectl get node\nNAME                 STATUS   ROLES                  AGE     VERSION\ndemo-control-plane   Ready    control-plane,master   4m46s   v1.20.2\n\n$ kubectl get pods -n kube-system\nNAME                                         READY   STATUS    RESTARTS   AGE\ncoredns-74ff55c5b-9gdc5                      1/1     Running   0          6m24s\ncoredns-74ff55c5b-tnb5w                      1/1     Running   0          6m24s\netcd-demo-control-plane                      1/1     Running   0          6m38s\nkindnet-4fmq9                                1/1     Running   0          6m24s\nkube-apiserver-demo-control-plane            1/1     Running   0          6m38s\nkube-controller-manager-demo-control-plane   1/1     Running   0          6m38s\nkube-proxy-6wrdz                             1/1     Running   0          6m24s\nkube-scheduler-demo-control-plane            1/1     Running   0          6m38s\n```\n\n至此，一个最基本的 k8s 集群就已经创建好了。\n\n### 删除集群\n\n使用以下命令删除上面已经创建的集群 demo：\n\n```shell\n$ kind delete cluster --name demo\nDeleting cluster \"demo\" ...\n```\n\n## 支持 Ingress 控制器的集群\n\n带有 Ingress Controller 的集群则需要向主机暴露 80 和 443 端口以便于主机可以通过域名进行访问。kind 除了可以支持通过命令行选项的方式创建集群，也支持使用配置文件的方式对集群进行更细致的配置，创建命令如下：\n\n```shell\ncat <<EOF | kind create cluster --config=-\nkind: Cluster\napiVersion: kind.x-k8s.io/v1alpha4\nnodes:\n- role: control-plane\n  kubeadmConfigPatches:\n  - |\n    kind: InitConfiguration\n    nodeRegistration:\n      kubeletExtraArgs:\n        node-labels: \"ingress-ready=true\"\n  extraPortMappings:\n  - containerPort: 80\n    hostPort: 80\n    protocol: TCP\n  - containerPort: 443\n    hostPort: 443\n    protocol: TCP\nEOF\n```\n\n当然你也可以把这个配置信息以文件的形式保存，比如叫 `kind.yaml` ，那么创建命令就是：\n\n```shell\nkind create cluster --config=kind.yaml\n```\n\n### 部署 NGINX Ingress 控制器\n\n国内对于 GitHub 和 k8s.gcr.io 镜像仓库的访问速度不太理想，因此此处我们需要做一些针对于国内网络的准备工作。\n\n#### 拉取镜像\n\n```shell\n# 从阿里云镜像仓库拉取镜像\n$ docker pull registry.aliyuncs.com/kubeadm-ha/ingress-nginx_controller:v0.43.0\n# 重命名为官方镜像名称\n$ docker tag registry.aliyuncs.com/kubeadm-ha/ingress-nginx_controller:v0.43.0 k8s.gcr.io/ingress-nginx/controller:v0.43.0\n```\n\n#### 将镜像导入到 kind\n\nkind 的 `load` 命令可以帮助我们将 Docker 中的镜像导入到由 kind 创建的集群中，命令如下：\n\n```shell\n$ kind load docker-image k8s.gcr.io/ingress-nginx/controller:v0.43.0\nImage: \"k8s.gcr.io/ingress-nginx/controller:v0.43.0\" with ID \"sha256:38dca1cbd23197f591e58fc6c949110b53f7a003e15f6d4974d86e7f7a00815d\" not yet present on node \"kind-control-plane\", loading...\n```\n\n#### 部署 Ingress 控制器\n\n我们使用 Gitee 的镜像仓库地址来加速资源的下载：\n\n```shell\n$ kubectl apply -f https://gitee.com/mirrors/ingress-nginx/raw/controller-v0.43.0/deploy/static/provider/kind/deploy.yaml\n```\n\nIngress 控制器的部署和启动需要等待一会，可以使用以下命令来查看运行情况：\n\n```shell\n$ kubectl get pod -n ingress-nginx\nNAME                                        READY   STATUS      RESTARTS   AGE\ningress-nginx-admission-create-ktp2g        0/1     Completed   0          7h4m\ningress-nginx-admission-patch-q4vmb         0/1     Completed   2          7h4m\ningress-nginx-controller-55bc59c885-mcp25   1/1     Running     0          7h4m\n```\n\n如果 ingress-nginx-controller-xxx 的状态的是 Running，说明已经成功运行。\n\n### 部署测试应用\n\n此处我们使用 kind 官网提供的测试应用：\n\n```shell\nkubectl apply -f https://kind.sigs.k8s.io/examples/ingress/usage.yaml\n```\n\n测试 Ingress 的连通性：\n\n```shell\n$ curl localhost/foo\nfoo\n$ curl localhost/bar\nbar\n```\n\n## 参考资料\n\n- [kind – Quick Start (k8s.io)](https://kind.sigs.k8s.io/docs/user/quick-start/)\n- [kind – Ingress (k8s.io)](https://kind.sigs.k8s.io/docs/user/ingress/)\n\n","source":"_posts/run-local-k8s-using-kind.md","raw":"---\ntitle: 使用 kind 在本地运行 k8s\ndate: 2021-03-24 21:30:26\ncategories:\n- k8s\ntags:\n- kind\n- docker\n---\n\n本文介绍如何使用 kind 在本地快速启动一个 k8s 集群。kind 是 Kubernetes in Docker 的简写，从名字上看很容易猜出 kind 的目标是将一个 k8s 集群以容器的方式部署在本机电脑上。这种方式对平台依赖少，安装部署比较干净利落，理论上本地只需要一个 Docker 运行环境即可。\n\n<!-- more -->\n\n## 安装过程介绍\n\n### 实验环境\n\n- 操作系统：macOS Catalina (10.15.7)\n- 容器环境：Docker Desktop for Mac 3.2.2\n- 包管理工具：Homebrew\n\n### 设置 Docker 镜像加速\n\n打开 Docker Desktop for Mac 的首选项界面，选择 Docker Engine，加入如下设置：\n\n```json\n{\n  \"registry-mirrors\": [\n    \"https://8km017g6.mirror.aliyuncs.com\"\n  ]\n}\n```\n\n之后点击 `Apply & Restart` 重启 Docker。\n\n### 安装 kind 和 kubectl\n\nkind 并不依赖于 kubectl，但是开发人员需要 kubectl 与 kind 所创建的 k8s 集群进行通讯：\n\n```shell\n$ brew install kubectl\n$ brew install kind\n```\n\n### 创建 k8s 集群\n\n使用 `kind create cluster` 命令新建集群，注意 `--name` 选项指定集群的名称，若未指定该参数，`kind` 将会是默认的集群名称。 \n\n```shell\n$ kind create cluster --name demo\nCreating cluster \"demo\" ...\n ✓ Ensuring node image (kindest/node:v1.20.2) 🖼\n ✓ Preparing nodes 📦\n ✓ Writing configuration 📜\n ✓ Starting control-plane 🕹️\n ✓ Installing CNI 🔌\n ✓ Installing StorageClass 💾\nSet kubectl context to \"kind-demo\"\nYou can now use your cluster with:\n\nkubectl cluster-info --context kind-demo\n\nThanks for using kind! 😊\n```\n\n此时根据提示输入 `kubectl cluster-info --context kind-demo` 会显示集群当前的基本信息：\n\n```shell\n$ kubectl cluster-info --context kind-demo\nKubernetes control plane is running at https://127.0.0.1:56770\nKubeDNS is running at https://127.0.0.1:56770/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy\n\nTo further debug and diagnose cluster problems, use 'kubectl cluster-info dump'.\n```\n\n查看集群 demo 中的节点信息：\n\n```shell\n$ kubectl get node\nNAME                 STATUS   ROLES                  AGE     VERSION\ndemo-control-plane   Ready    control-plane,master   4m46s   v1.20.2\n\n$ kubectl get pods -n kube-system\nNAME                                         READY   STATUS    RESTARTS   AGE\ncoredns-74ff55c5b-9gdc5                      1/1     Running   0          6m24s\ncoredns-74ff55c5b-tnb5w                      1/1     Running   0          6m24s\netcd-demo-control-plane                      1/1     Running   0          6m38s\nkindnet-4fmq9                                1/1     Running   0          6m24s\nkube-apiserver-demo-control-plane            1/1     Running   0          6m38s\nkube-controller-manager-demo-control-plane   1/1     Running   0          6m38s\nkube-proxy-6wrdz                             1/1     Running   0          6m24s\nkube-scheduler-demo-control-plane            1/1     Running   0          6m38s\n```\n\n至此，一个最基本的 k8s 集群就已经创建好了。\n\n### 删除集群\n\n使用以下命令删除上面已经创建的集群 demo：\n\n```shell\n$ kind delete cluster --name demo\nDeleting cluster \"demo\" ...\n```\n\n## 支持 Ingress 控制器的集群\n\n带有 Ingress Controller 的集群则需要向主机暴露 80 和 443 端口以便于主机可以通过域名进行访问。kind 除了可以支持通过命令行选项的方式创建集群，也支持使用配置文件的方式对集群进行更细致的配置，创建命令如下：\n\n```shell\ncat <<EOF | kind create cluster --config=-\nkind: Cluster\napiVersion: kind.x-k8s.io/v1alpha4\nnodes:\n- role: control-plane\n  kubeadmConfigPatches:\n  - |\n    kind: InitConfiguration\n    nodeRegistration:\n      kubeletExtraArgs:\n        node-labels: \"ingress-ready=true\"\n  extraPortMappings:\n  - containerPort: 80\n    hostPort: 80\n    protocol: TCP\n  - containerPort: 443\n    hostPort: 443\n    protocol: TCP\nEOF\n```\n\n当然你也可以把这个配置信息以文件的形式保存，比如叫 `kind.yaml` ，那么创建命令就是：\n\n```shell\nkind create cluster --config=kind.yaml\n```\n\n### 部署 NGINX Ingress 控制器\n\n国内对于 GitHub 和 k8s.gcr.io 镜像仓库的访问速度不太理想，因此此处我们需要做一些针对于国内网络的准备工作。\n\n#### 拉取镜像\n\n```shell\n# 从阿里云镜像仓库拉取镜像\n$ docker pull registry.aliyuncs.com/kubeadm-ha/ingress-nginx_controller:v0.43.0\n# 重命名为官方镜像名称\n$ docker tag registry.aliyuncs.com/kubeadm-ha/ingress-nginx_controller:v0.43.0 k8s.gcr.io/ingress-nginx/controller:v0.43.0\n```\n\n#### 将镜像导入到 kind\n\nkind 的 `load` 命令可以帮助我们将 Docker 中的镜像导入到由 kind 创建的集群中，命令如下：\n\n```shell\n$ kind load docker-image k8s.gcr.io/ingress-nginx/controller:v0.43.0\nImage: \"k8s.gcr.io/ingress-nginx/controller:v0.43.0\" with ID \"sha256:38dca1cbd23197f591e58fc6c949110b53f7a003e15f6d4974d86e7f7a00815d\" not yet present on node \"kind-control-plane\", loading...\n```\n\n#### 部署 Ingress 控制器\n\n我们使用 Gitee 的镜像仓库地址来加速资源的下载：\n\n```shell\n$ kubectl apply -f https://gitee.com/mirrors/ingress-nginx/raw/controller-v0.43.0/deploy/static/provider/kind/deploy.yaml\n```\n\nIngress 控制器的部署和启动需要等待一会，可以使用以下命令来查看运行情况：\n\n```shell\n$ kubectl get pod -n ingress-nginx\nNAME                                        READY   STATUS      RESTARTS   AGE\ningress-nginx-admission-create-ktp2g        0/1     Completed   0          7h4m\ningress-nginx-admission-patch-q4vmb         0/1     Completed   2          7h4m\ningress-nginx-controller-55bc59c885-mcp25   1/1     Running     0          7h4m\n```\n\n如果 ingress-nginx-controller-xxx 的状态的是 Running，说明已经成功运行。\n\n### 部署测试应用\n\n此处我们使用 kind 官网提供的测试应用：\n\n```shell\nkubectl apply -f https://kind.sigs.k8s.io/examples/ingress/usage.yaml\n```\n\n测试 Ingress 的连通性：\n\n```shell\n$ curl localhost/foo\nfoo\n$ curl localhost/bar\nbar\n```\n\n## 参考资料\n\n- [kind – Quick Start (k8s.io)](https://kind.sigs.k8s.io/docs/user/quick-start/)\n- [kind – Ingress (k8s.io)](https://kind.sigs.k8s.io/docs/user/ingress/)\n\n","slug":"run-local-k8s-using-kind","published":1,"updated":"2021-03-24T14:43:59.234Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmasb6npz001j7sos9vhebqq6","content":"<p>本文介绍如何使用 kind 在本地快速启动一个 k8s 集群。kind 是 Kubernetes in Docker 的简写，从名字上看很容易猜出 kind 的目标是将一个 k8s 集群以容器的方式部署在本机电脑上。这种方式对平台依赖少，安装部署比较干净利落，理论上本地只需要一个 Docker 运行环境即可。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"安装过程介绍\"><a href=\"#安装过程介绍\" class=\"headerlink\" title=\"安装过程介绍\"></a>安装过程介绍</h2><h3 id=\"实验环境\"><a href=\"#实验环境\" class=\"headerlink\" title=\"实验环境\"></a>实验环境</h3><ul>\n<li>操作系统：macOS Catalina (10.15.7)</li>\n<li>容器环境：Docker Desktop for Mac 3.2.2</li>\n<li>包管理工具：Homebrew</li>\n</ul>\n<h3 id=\"设置-Docker-镜像加速\"><a href=\"#设置-Docker-镜像加速\" class=\"headerlink\" title=\"设置 Docker 镜像加速\"></a>设置 Docker 镜像加速</h3><p>打开 Docker Desktop for Mac 的首选项界面，选择 Docker Engine，加入如下设置：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">&quot;registry-mirrors&quot;</span>: [</span><br><span class=\"line\">    <span class=\"string\">&quot;https://8km017g6.mirror.aliyuncs.com&quot;</span></span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>之后点击 <code>Apply &amp; Restart</code> 重启 Docker。</p>\n<h3 id=\"安装-kind-和-kubectl\"><a href=\"#安装-kind-和-kubectl\" class=\"headerlink\" title=\"安装 kind 和 kubectl\"></a>安装 kind 和 kubectl</h3><p>kind 并不依赖于 kubectl，但是开发人员需要 kubectl 与 kind 所创建的 k8s 集群进行通讯：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> brew install kubectl</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> brew install kind</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建-k8s-集群\"><a href=\"#创建-k8s-集群\" class=\"headerlink\" title=\"创建 k8s 集群\"></a>创建 k8s 集群</h3><p>使用 <code>kind create cluster</code> 命令新建集群，注意 <code>--name</code> 选项指定集群的名称，若未指定该参数，<code>kind</code> 将会是默认的集群名称。 </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> kind create cluster --name demo</span></span><br><span class=\"line\">Creating cluster &quot;demo&quot; ...</span><br><span class=\"line\"> ✓ Ensuring node image (kindest/node:v1.20.2) 🖼</span><br><span class=\"line\"> ✓ Preparing nodes 📦</span><br><span class=\"line\"> ✓ Writing configuration 📜</span><br><span class=\"line\"> ✓ Starting control-plane 🕹️</span><br><span class=\"line\"> ✓ Installing CNI 🔌</span><br><span class=\"line\"> ✓ Installing StorageClass 💾</span><br><span class=\"line\">Set kubectl context to &quot;kind-demo&quot;</span><br><span class=\"line\">You can now use your cluster with:</span><br><span class=\"line\"></span><br><span class=\"line\">kubectl cluster-info --context kind-demo</span><br><span class=\"line\"></span><br><span class=\"line\">Thanks for using kind! 😊</span><br></pre></td></tr></table></figure>\n\n<p>此时根据提示输入 <code>kubectl cluster-info --context kind-demo</code> 会显示集群当前的基本信息：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> kubectl cluster-info --context kind-demo</span></span><br><span class=\"line\">Kubernetes control plane is running at https://127.0.0.1:56770</span><br><span class=\"line\">KubeDNS is running at https://127.0.0.1:56770/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy</span><br><span class=\"line\"></span><br><span class=\"line\">To further debug and diagnose cluster problems, use &#x27;kubectl cluster-info dump&#x27;.</span><br></pre></td></tr></table></figure>\n\n<p>查看集群 demo 中的节点信息：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> kubectl get node</span></span><br><span class=\"line\">NAME                 STATUS   ROLES                  AGE     VERSION</span><br><span class=\"line\">demo-control-plane   Ready    control-plane,master   4m46s   v1.20.2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> kubectl get pods -n kube-system</span></span><br><span class=\"line\">NAME                                         READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">coredns-74ff55c5b-9gdc5                      1/1     Running   0          6m24s</span><br><span class=\"line\">coredns-74ff55c5b-tnb5w                      1/1     Running   0          6m24s</span><br><span class=\"line\">etcd-demo-control-plane                      1/1     Running   0          6m38s</span><br><span class=\"line\">kindnet-4fmq9                                1/1     Running   0          6m24s</span><br><span class=\"line\">kube-apiserver-demo-control-plane            1/1     Running   0          6m38s</span><br><span class=\"line\">kube-controller-manager-demo-control-plane   1/1     Running   0          6m38s</span><br><span class=\"line\">kube-proxy-6wrdz                             1/1     Running   0          6m24s</span><br><span class=\"line\">kube-scheduler-demo-control-plane            1/1     Running   0          6m38s</span><br></pre></td></tr></table></figure>\n\n<p>至此，一个最基本的 k8s 集群就已经创建好了。</p>\n<h3 id=\"删除集群\"><a href=\"#删除集群\" class=\"headerlink\" title=\"删除集群\"></a>删除集群</h3><p>使用以下命令删除上面已经创建的集群 demo：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> kind delete cluster --name demo</span></span><br><span class=\"line\">Deleting cluster &quot;demo&quot; ...</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"支持-Ingress-控制器的集群\"><a href=\"#支持-Ingress-控制器的集群\" class=\"headerlink\" title=\"支持 Ingress 控制器的集群\"></a>支持 Ingress 控制器的集群</h2><p>带有 Ingress Controller 的集群则需要向主机暴露 80 和 443 端口以便于主机可以通过域名进行访问。kind 除了可以支持通过命令行选项的方式创建集群，也支持使用配置文件的方式对集群进行更细致的配置，创建命令如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &lt;&lt;EOF | kind create cluster --config=-</span><br><span class=\"line\">kind: Cluster</span><br><span class=\"line\">apiVersion: kind.x-k8s.io/v1alpha4</span><br><span class=\"line\">nodes:</span><br><span class=\"line\">- role: control-plane</span><br><span class=\"line\">  kubeadmConfigPatches:</span><br><span class=\"line\">  - |</span><br><span class=\"line\">    kind: InitConfiguration</span><br><span class=\"line\">    nodeRegistration:</span><br><span class=\"line\">      kubeletExtraArgs:</span><br><span class=\"line\">        node-labels: &quot;ingress-ready=true&quot;</span><br><span class=\"line\">  extraPortMappings:</span><br><span class=\"line\">  - containerPort: 80</span><br><span class=\"line\">    hostPort: 80</span><br><span class=\"line\">    protocol: TCP</span><br><span class=\"line\">  - containerPort: 443</span><br><span class=\"line\">    hostPort: 443</span><br><span class=\"line\">    protocol: TCP</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n\n<p>当然你也可以把这个配置信息以文件的形式保存，比如叫 <code>kind.yaml</code> ，那么创建命令就是：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kind create cluster --config=kind.yaml</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"部署-NGINX-Ingress-控制器\"><a href=\"#部署-NGINX-Ingress-控制器\" class=\"headerlink\" title=\"部署 NGINX Ingress 控制器\"></a>部署 NGINX Ingress 控制器</h3><p>国内对于 GitHub 和 k8s.gcr.io 镜像仓库的访问速度不太理想，因此此处我们需要做一些针对于国内网络的准备工作。</p>\n<h4 id=\"拉取镜像\"><a href=\"#拉取镜像\" class=\"headerlink\" title=\"拉取镜像\"></a>拉取镜像</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 从阿里云镜像仓库拉取镜像</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> docker pull registry.aliyuncs.com/kubeadm-ha/ingress-nginx_controller:v0.43.0</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 重命名为官方镜像名称</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> docker tag registry.aliyuncs.com/kubeadm-ha/ingress-nginx_controller:v0.43.0 k8s.gcr.io/ingress-nginx/controller:v0.43.0</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"将镜像导入到-kind\"><a href=\"#将镜像导入到-kind\" class=\"headerlink\" title=\"将镜像导入到 kind\"></a>将镜像导入到 kind</h4><p>kind 的 <code>load</code> 命令可以帮助我们将 Docker 中的镜像导入到由 kind 创建的集群中，命令如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> kind load docker-image k8s.gcr.io/ingress-nginx/controller:v0.43.0</span></span><br><span class=\"line\">Image: &quot;k8s.gcr.io/ingress-nginx/controller:v0.43.0&quot; with ID &quot;sha256:38dca1cbd23197f591e58fc6c949110b53f7a003e15f6d4974d86e7f7a00815d&quot; not yet present on node &quot;kind-control-plane&quot;, loading...</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"部署-Ingress-控制器\"><a href=\"#部署-Ingress-控制器\" class=\"headerlink\" title=\"部署 Ingress 控制器\"></a>部署 Ingress 控制器</h4><p>我们使用 Gitee 的镜像仓库地址来加速资源的下载：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> kubectl apply -f https://gitee.com/mirrors/ingress-nginx/raw/controller-v0.43.0/deploy/static/provider/kind/deploy.yaml</span></span><br></pre></td></tr></table></figure>\n\n<p>Ingress 控制器的部署和启动需要等待一会，可以使用以下命令来查看运行情况：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> kubectl get pod -n ingress-nginx</span></span><br><span class=\"line\">NAME                                        READY   STATUS      RESTARTS   AGE</span><br><span class=\"line\">ingress-nginx-admission-create-ktp2g        0/1     Completed   0          7h4m</span><br><span class=\"line\">ingress-nginx-admission-patch-q4vmb         0/1     Completed   2          7h4m</span><br><span class=\"line\">ingress-nginx-controller-55bc59c885-mcp25   1/1     Running     0          7h4m</span><br></pre></td></tr></table></figure>\n\n<p>如果 ingress-nginx-controller-xxx 的状态的是 Running，说明已经成功运行。</p>\n<h3 id=\"部署测试应用\"><a href=\"#部署测试应用\" class=\"headerlink\" title=\"部署测试应用\"></a>部署测试应用</h3><p>此处我们使用 kind 官网提供的测试应用：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl apply -f https://kind.sigs.k8s.io/examples/ingress/usage.yaml</span><br></pre></td></tr></table></figure>\n\n<p>测试 Ingress 的连通性：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> curl localhost/foo</span></span><br><span class=\"line\">foo</span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> curl localhost/bar</span></span><br><span class=\"line\">bar</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://kind.sigs.k8s.io/docs/user/quick-start/\">kind – Quick Start (k8s.io)</a></li>\n<li><a href=\"https://kind.sigs.k8s.io/docs/user/ingress/\">kind – Ingress (k8s.io)</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>本文介绍如何使用 kind 在本地快速启动一个 k8s 集群。kind 是 Kubernetes in Docker 的简写，从名字上看很容易猜出 kind 的目标是将一个 k8s 集群以容器的方式部署在本机电脑上。这种方式对平台依赖少，安装部署比较干净利落，理论上本地只需要一个 Docker 运行环境即可。</p>","more":"<h2 id=\"安装过程介绍\"><a href=\"#安装过程介绍\" class=\"headerlink\" title=\"安装过程介绍\"></a>安装过程介绍</h2><h3 id=\"实验环境\"><a href=\"#实验环境\" class=\"headerlink\" title=\"实验环境\"></a>实验环境</h3><ul>\n<li>操作系统：macOS Catalina (10.15.7)</li>\n<li>容器环境：Docker Desktop for Mac 3.2.2</li>\n<li>包管理工具：Homebrew</li>\n</ul>\n<h3 id=\"设置-Docker-镜像加速\"><a href=\"#设置-Docker-镜像加速\" class=\"headerlink\" title=\"设置 Docker 镜像加速\"></a>设置 Docker 镜像加速</h3><p>打开 Docker Desktop for Mac 的首选项界面，选择 Docker Engine，加入如下设置：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">&quot;registry-mirrors&quot;</span>: [</span><br><span class=\"line\">    <span class=\"string\">&quot;https://8km017g6.mirror.aliyuncs.com&quot;</span></span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>之后点击 <code>Apply &amp; Restart</code> 重启 Docker。</p>\n<h3 id=\"安装-kind-和-kubectl\"><a href=\"#安装-kind-和-kubectl\" class=\"headerlink\" title=\"安装 kind 和 kubectl\"></a>安装 kind 和 kubectl</h3><p>kind 并不依赖于 kubectl，但是开发人员需要 kubectl 与 kind 所创建的 k8s 集群进行通讯：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> brew install kubectl</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> brew install kind</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建-k8s-集群\"><a href=\"#创建-k8s-集群\" class=\"headerlink\" title=\"创建 k8s 集群\"></a>创建 k8s 集群</h3><p>使用 <code>kind create cluster</code> 命令新建集群，注意 <code>--name</code> 选项指定集群的名称，若未指定该参数，<code>kind</code> 将会是默认的集群名称。 </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> kind create cluster --name demo</span></span><br><span class=\"line\">Creating cluster &quot;demo&quot; ...</span><br><span class=\"line\"> ✓ Ensuring node image (kindest/node:v1.20.2) 🖼</span><br><span class=\"line\"> ✓ Preparing nodes 📦</span><br><span class=\"line\"> ✓ Writing configuration 📜</span><br><span class=\"line\"> ✓ Starting control-plane 🕹️</span><br><span class=\"line\"> ✓ Installing CNI 🔌</span><br><span class=\"line\"> ✓ Installing StorageClass 💾</span><br><span class=\"line\">Set kubectl context to &quot;kind-demo&quot;</span><br><span class=\"line\">You can now use your cluster with:</span><br><span class=\"line\"></span><br><span class=\"line\">kubectl cluster-info --context kind-demo</span><br><span class=\"line\"></span><br><span class=\"line\">Thanks for using kind! 😊</span><br></pre></td></tr></table></figure>\n\n<p>此时根据提示输入 <code>kubectl cluster-info --context kind-demo</code> 会显示集群当前的基本信息：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> kubectl cluster-info --context kind-demo</span></span><br><span class=\"line\">Kubernetes control plane is running at https://127.0.0.1:56770</span><br><span class=\"line\">KubeDNS is running at https://127.0.0.1:56770/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy</span><br><span class=\"line\"></span><br><span class=\"line\">To further debug and diagnose cluster problems, use &#x27;kubectl cluster-info dump&#x27;.</span><br></pre></td></tr></table></figure>\n\n<p>查看集群 demo 中的节点信息：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> kubectl get node</span></span><br><span class=\"line\">NAME                 STATUS   ROLES                  AGE     VERSION</span><br><span class=\"line\">demo-control-plane   Ready    control-plane,master   4m46s   v1.20.2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> kubectl get pods -n kube-system</span></span><br><span class=\"line\">NAME                                         READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">coredns-74ff55c5b-9gdc5                      1/1     Running   0          6m24s</span><br><span class=\"line\">coredns-74ff55c5b-tnb5w                      1/1     Running   0          6m24s</span><br><span class=\"line\">etcd-demo-control-plane                      1/1     Running   0          6m38s</span><br><span class=\"line\">kindnet-4fmq9                                1/1     Running   0          6m24s</span><br><span class=\"line\">kube-apiserver-demo-control-plane            1/1     Running   0          6m38s</span><br><span class=\"line\">kube-controller-manager-demo-control-plane   1/1     Running   0          6m38s</span><br><span class=\"line\">kube-proxy-6wrdz                             1/1     Running   0          6m24s</span><br><span class=\"line\">kube-scheduler-demo-control-plane            1/1     Running   0          6m38s</span><br></pre></td></tr></table></figure>\n\n<p>至此，一个最基本的 k8s 集群就已经创建好了。</p>\n<h3 id=\"删除集群\"><a href=\"#删除集群\" class=\"headerlink\" title=\"删除集群\"></a>删除集群</h3><p>使用以下命令删除上面已经创建的集群 demo：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> kind delete cluster --name demo</span></span><br><span class=\"line\">Deleting cluster &quot;demo&quot; ...</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"支持-Ingress-控制器的集群\"><a href=\"#支持-Ingress-控制器的集群\" class=\"headerlink\" title=\"支持 Ingress 控制器的集群\"></a>支持 Ingress 控制器的集群</h2><p>带有 Ingress Controller 的集群则需要向主机暴露 80 和 443 端口以便于主机可以通过域名进行访问。kind 除了可以支持通过命令行选项的方式创建集群，也支持使用配置文件的方式对集群进行更细致的配置，创建命令如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &lt;&lt;EOF | kind create cluster --config=-</span><br><span class=\"line\">kind: Cluster</span><br><span class=\"line\">apiVersion: kind.x-k8s.io/v1alpha4</span><br><span class=\"line\">nodes:</span><br><span class=\"line\">- role: control-plane</span><br><span class=\"line\">  kubeadmConfigPatches:</span><br><span class=\"line\">  - |</span><br><span class=\"line\">    kind: InitConfiguration</span><br><span class=\"line\">    nodeRegistration:</span><br><span class=\"line\">      kubeletExtraArgs:</span><br><span class=\"line\">        node-labels: &quot;ingress-ready=true&quot;</span><br><span class=\"line\">  extraPortMappings:</span><br><span class=\"line\">  - containerPort: 80</span><br><span class=\"line\">    hostPort: 80</span><br><span class=\"line\">    protocol: TCP</span><br><span class=\"line\">  - containerPort: 443</span><br><span class=\"line\">    hostPort: 443</span><br><span class=\"line\">    protocol: TCP</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n\n<p>当然你也可以把这个配置信息以文件的形式保存，比如叫 <code>kind.yaml</code> ，那么创建命令就是：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kind create cluster --config=kind.yaml</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"部署-NGINX-Ingress-控制器\"><a href=\"#部署-NGINX-Ingress-控制器\" class=\"headerlink\" title=\"部署 NGINX Ingress 控制器\"></a>部署 NGINX Ingress 控制器</h3><p>国内对于 GitHub 和 k8s.gcr.io 镜像仓库的访问速度不太理想，因此此处我们需要做一些针对于国内网络的准备工作。</p>\n<h4 id=\"拉取镜像\"><a href=\"#拉取镜像\" class=\"headerlink\" title=\"拉取镜像\"></a>拉取镜像</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 从阿里云镜像仓库拉取镜像</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> docker pull registry.aliyuncs.com/kubeadm-ha/ingress-nginx_controller:v0.43.0</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 重命名为官方镜像名称</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> docker tag registry.aliyuncs.com/kubeadm-ha/ingress-nginx_controller:v0.43.0 k8s.gcr.io/ingress-nginx/controller:v0.43.0</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"将镜像导入到-kind\"><a href=\"#将镜像导入到-kind\" class=\"headerlink\" title=\"将镜像导入到 kind\"></a>将镜像导入到 kind</h4><p>kind 的 <code>load</code> 命令可以帮助我们将 Docker 中的镜像导入到由 kind 创建的集群中，命令如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> kind load docker-image k8s.gcr.io/ingress-nginx/controller:v0.43.0</span></span><br><span class=\"line\">Image: &quot;k8s.gcr.io/ingress-nginx/controller:v0.43.0&quot; with ID &quot;sha256:38dca1cbd23197f591e58fc6c949110b53f7a003e15f6d4974d86e7f7a00815d&quot; not yet present on node &quot;kind-control-plane&quot;, loading...</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"部署-Ingress-控制器\"><a href=\"#部署-Ingress-控制器\" class=\"headerlink\" title=\"部署 Ingress 控制器\"></a>部署 Ingress 控制器</h4><p>我们使用 Gitee 的镜像仓库地址来加速资源的下载：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> kubectl apply -f https://gitee.com/mirrors/ingress-nginx/raw/controller-v0.43.0/deploy/static/provider/kind/deploy.yaml</span></span><br></pre></td></tr></table></figure>\n\n<p>Ingress 控制器的部署和启动需要等待一会，可以使用以下命令来查看运行情况：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> kubectl get pod -n ingress-nginx</span></span><br><span class=\"line\">NAME                                        READY   STATUS      RESTARTS   AGE</span><br><span class=\"line\">ingress-nginx-admission-create-ktp2g        0/1     Completed   0          7h4m</span><br><span class=\"line\">ingress-nginx-admission-patch-q4vmb         0/1     Completed   2          7h4m</span><br><span class=\"line\">ingress-nginx-controller-55bc59c885-mcp25   1/1     Running     0          7h4m</span><br></pre></td></tr></table></figure>\n\n<p>如果 ingress-nginx-controller-xxx 的状态的是 Running，说明已经成功运行。</p>\n<h3 id=\"部署测试应用\"><a href=\"#部署测试应用\" class=\"headerlink\" title=\"部署测试应用\"></a>部署测试应用</h3><p>此处我们使用 kind 官网提供的测试应用：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl apply -f https://kind.sigs.k8s.io/examples/ingress/usage.yaml</span><br></pre></td></tr></table></figure>\n\n<p>测试 Ingress 的连通性：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> curl localhost/foo</span></span><br><span class=\"line\">foo</span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> curl localhost/bar</span></span><br><span class=\"line\">bar</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://kind.sigs.k8s.io/docs/user/quick-start/\">kind – Quick Start (k8s.io)</a></li>\n<li><a href=\"https://kind.sigs.k8s.io/docs/user/ingress/\">kind – Ingress (k8s.io)</a></li>\n</ul>"},{"title":"为域名快速生成自签名证书","date":"2020-05-18T19:53:18.000Z","_content":"\n本文在文章 [Configure HTTPS Access to Harbor](https://goharbor.io/docs/2.0.0/install-config/configure-https/) 的基础上使用 Bash 进行了简单的封装，可以为指定的域名一键生成自签名证书。例如域名 example.com 生成的自签名证书将匹配以下地址：\n\n- example.com\n- *.example.com\n\n\n\n<!-- more -->\n\n新建文件 `gencert.sh` ，编辑并加入以下内容：\n\n```shell\n#!/usr/bin/env bash\n#\n# Copyright 2020 Liu Hongyu (eliuhy@163.com)\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\nset -e\n\nDOMAIN=\"$1\"\nWORK_DIR=\"$(mktemp -d)\"\n\nif [ -z \"$DOMAIN\" ]; then\n  echo \"Domain name needed.\"\n  exit 1\nfi\n\necho \"Temporary working dir is $WORK_DIR \"\necho \"Gernerating cert for $DOMAIN ...\"\n\n#\n# Fix the following error:\n# --------------------------\n# Cannot write random bytes:\n# 139695180550592:error:24070079:random number generator:RAND_write_file:Cannot open file:../crypto/rand/randfile.c:213:Filename=/home/eliu/.rnd\n#\n[ -f $HOME/.rnd ] || dd if=/dev/urandom of=$HOME/.rnd bs=256 count=1\n\nopenssl genrsa -out $WORK_DIR/ca.key 4096\n\nopenssl req -x509 -new -nodes -sha512 -days 3650 \\\n  -subj \"/C=CN/ST=Beijing/L=Beijing/O=example/OU=Personal/CN=$DOMAIN\" \\\n  -key $WORK_DIR/ca.key \\\n  -out $WORK_DIR/ca.crt\n\nopenssl genrsa -out $WORK_DIR/server.key 4096\n\nopenssl req -sha512 -new \\\n  -subj \"/C=CN/ST=Beijing/L=Beijing/O=example/OU=Personal/CN=$DOMAIN\" \\\n  -key $WORK_DIR/server.key \\\n  -out $WORK_DIR/server.csr\n\ncat > $WORK_DIR/v3.ext <<-EOF\nauthorityKeyIdentifier=keyid,issuer\nbasicConstraints=CA:FALSE\nkeyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment\nextendedKeyUsage = serverAuth\nsubjectAltName = @alt_names\n\n[alt_names]\nDNS.1=$DOMAIN\nDNS.2=*.$DOMAIN\nEOF\n\nopenssl x509 -req -sha512 -days 3650 \\\n  -extfile $WORK_DIR/v3.ext \\\n  -CA $WORK_DIR/ca.crt -CAkey $WORK_DIR/ca.key -CAcreateserial \\\n  -in $WORK_DIR/server.csr \\\n  -out $WORK_DIR/server.crt\n\nopenssl x509 -inform PEM -in $WORK_DIR/server.crt -out $WORK_DIR/$DOMAIN.cert\n\nmkdir -p ./$DOMAIN\ncp $WORK_DIR/server.key $WORK_DIR/server.crt ./$DOMAIN\n\n```\n\n假设我们要为 example.com 生成证书，执行如下命令：\n\n```shell\n./gencert.sh example.com\n```\n\n生成的后的目录结构如下：\n\n```\n.\n├── example.com\n│   ├── server.crt\n│   └── server.key\n└── gencert.sh\n```\n\n","source":"_posts/self-signed-cert-for-domain.md","raw":"---\ntitle: 为域名快速生成自签名证书\ndate: 2020-05-19 03:53:18\ncategories: \n- DevOps\ntags:\n- self-signed certificate\n- 自签名证书\n---\n\n本文在文章 [Configure HTTPS Access to Harbor](https://goharbor.io/docs/2.0.0/install-config/configure-https/) 的基础上使用 Bash 进行了简单的封装，可以为指定的域名一键生成自签名证书。例如域名 example.com 生成的自签名证书将匹配以下地址：\n\n- example.com\n- *.example.com\n\n\n\n<!-- more -->\n\n新建文件 `gencert.sh` ，编辑并加入以下内容：\n\n```shell\n#!/usr/bin/env bash\n#\n# Copyright 2020 Liu Hongyu (eliuhy@163.com)\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\nset -e\n\nDOMAIN=\"$1\"\nWORK_DIR=\"$(mktemp -d)\"\n\nif [ -z \"$DOMAIN\" ]; then\n  echo \"Domain name needed.\"\n  exit 1\nfi\n\necho \"Temporary working dir is $WORK_DIR \"\necho \"Gernerating cert for $DOMAIN ...\"\n\n#\n# Fix the following error:\n# --------------------------\n# Cannot write random bytes:\n# 139695180550592:error:24070079:random number generator:RAND_write_file:Cannot open file:../crypto/rand/randfile.c:213:Filename=/home/eliu/.rnd\n#\n[ -f $HOME/.rnd ] || dd if=/dev/urandom of=$HOME/.rnd bs=256 count=1\n\nopenssl genrsa -out $WORK_DIR/ca.key 4096\n\nopenssl req -x509 -new -nodes -sha512 -days 3650 \\\n  -subj \"/C=CN/ST=Beijing/L=Beijing/O=example/OU=Personal/CN=$DOMAIN\" \\\n  -key $WORK_DIR/ca.key \\\n  -out $WORK_DIR/ca.crt\n\nopenssl genrsa -out $WORK_DIR/server.key 4096\n\nopenssl req -sha512 -new \\\n  -subj \"/C=CN/ST=Beijing/L=Beijing/O=example/OU=Personal/CN=$DOMAIN\" \\\n  -key $WORK_DIR/server.key \\\n  -out $WORK_DIR/server.csr\n\ncat > $WORK_DIR/v3.ext <<-EOF\nauthorityKeyIdentifier=keyid,issuer\nbasicConstraints=CA:FALSE\nkeyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment\nextendedKeyUsage = serverAuth\nsubjectAltName = @alt_names\n\n[alt_names]\nDNS.1=$DOMAIN\nDNS.2=*.$DOMAIN\nEOF\n\nopenssl x509 -req -sha512 -days 3650 \\\n  -extfile $WORK_DIR/v3.ext \\\n  -CA $WORK_DIR/ca.crt -CAkey $WORK_DIR/ca.key -CAcreateserial \\\n  -in $WORK_DIR/server.csr \\\n  -out $WORK_DIR/server.crt\n\nopenssl x509 -inform PEM -in $WORK_DIR/server.crt -out $WORK_DIR/$DOMAIN.cert\n\nmkdir -p ./$DOMAIN\ncp $WORK_DIR/server.key $WORK_DIR/server.crt ./$DOMAIN\n\n```\n\n假设我们要为 example.com 生成证书，执行如下命令：\n\n```shell\n./gencert.sh example.com\n```\n\n生成的后的目录结构如下：\n\n```\n.\n├── example.com\n│   ├── server.crt\n│   └── server.key\n└── gencert.sh\n```\n\n","slug":"self-signed-cert-for-domain","published":1,"updated":"2020-05-18T20:45:37.398Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmasb6npz001l7sos71ujdpit","content":"<p>本文在文章 <a href=\"https://goharbor.io/docs/2.0.0/install-config/configure-https/\">Configure HTTPS Access to Harbor</a> 的基础上使用 Bash 进行了简单的封装，可以为指定的域名一键生成自签名证书。例如域名 example.com 生成的自签名证书将匹配以下地址：</p>\n<ul>\n<li>example.com</li>\n<li>*.example.com</li>\n</ul>\n<span id=\"more\"></span>\n\n<p>新建文件 <code>gencert.sh</code> ，编辑并加入以下内容：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/usr/bin/env bash</span></span><br><span class=\"line\"><span class=\"meta\">#</span></span><br><span class=\"line\"><span class=\"bash\"><span class=\"comment\"># Copyright 2020 Liu Hongyu (eliuhy@163.com)</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span></span><br><span class=\"line\"><span class=\"bash\"><span class=\"comment\"># Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> you may not use this file except <span class=\"keyword\">in</span> compliance with the License.</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> You may obtain a copy of the License at</span></span><br><span class=\"line\"><span class=\"meta\">#</span></span><br><span class=\"line\"><span class=\"bash\"><span class=\"comment\">#     http://www.apache.org/licenses/LICENSE-2.0</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span></span><br><span class=\"line\"><span class=\"bash\"><span class=\"comment\"># Unless required by applicable law or agreed to in writing, software</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> distributed under the License is distributed on an <span class=\"string\">&quot;AS IS&quot;</span> BASIS,</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> See the License <span class=\"keyword\">for</span> the specific language governing permissions and</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> limitations under the License.</span></span><br><span class=\"line\"><span class=\"meta\">#</span></span><br><span class=\"line\"><span class=\"bash\"><span class=\"built_in\">set</span> -e</span></span><br><span class=\"line\"></span><br><span class=\"line\">DOMAIN=&quot;$1&quot;</span><br><span class=\"line\">WORK_DIR=&quot;$(mktemp -d)&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">if [ -z &quot;$DOMAIN&quot; ]; then</span><br><span class=\"line\">  echo &quot;Domain name needed.&quot;</span><br><span class=\"line\">  exit 1</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;Temporary working dir is $WORK_DIR &quot;</span><br><span class=\"line\">echo &quot;Gernerating cert for $DOMAIN ...&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span></span><br><span class=\"line\"><span class=\"bash\"><span class=\"comment\"># Fix the following error:</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> --------------------------</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Cannot write random bytes:</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 139695180550592:error:24070079:random number generator:RAND_write_file:Cannot open file:../crypto/rand/randfile.c:213:Filename=/home/eliu/.rnd</span></span><br><span class=\"line\"><span class=\"meta\">#</span></span><br><span class=\"line\"><span class=\"bash\">[ -f <span class=\"variable\">$HOME</span>/.rnd ] || dd <span class=\"keyword\">if</span>=/dev/urandom of=<span class=\"variable\">$HOME</span>/.rnd bs=256 count=1</span></span><br><span class=\"line\"></span><br><span class=\"line\">openssl genrsa -out $WORK_DIR/ca.key 4096</span><br><span class=\"line\"></span><br><span class=\"line\">openssl req -x509 -new -nodes -sha512 -days 3650 \\</span><br><span class=\"line\">  -subj &quot;/C=CN/ST=Beijing/L=Beijing/O=example/OU=Personal/CN=$DOMAIN&quot; \\</span><br><span class=\"line\">  -key $WORK_DIR/ca.key \\</span><br><span class=\"line\">  -out $WORK_DIR/ca.crt</span><br><span class=\"line\"></span><br><span class=\"line\">openssl genrsa -out $WORK_DIR/server.key 4096</span><br><span class=\"line\"></span><br><span class=\"line\">openssl req -sha512 -new \\</span><br><span class=\"line\">  -subj &quot;/C=CN/ST=Beijing/L=Beijing/O=example/OU=Personal/CN=$DOMAIN&quot; \\</span><br><span class=\"line\">  -key $WORK_DIR/server.key \\</span><br><span class=\"line\">  -out $WORK_DIR/server.csr</span><br><span class=\"line\"></span><br><span class=\"line\">cat &gt; $WORK_DIR/v3.ext &lt;&lt;-EOF</span><br><span class=\"line\">authorityKeyIdentifier=keyid,issuer</span><br><span class=\"line\">basicConstraints=CA:FALSE</span><br><span class=\"line\">keyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment</span><br><span class=\"line\">extendedKeyUsage = serverAuth</span><br><span class=\"line\">subjectAltName = @alt_names</span><br><span class=\"line\"></span><br><span class=\"line\">[alt_names]</span><br><span class=\"line\">DNS.1=$DOMAIN</span><br><span class=\"line\">DNS.2=*.$DOMAIN</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">openssl x509 -req -sha512 -days 3650 \\</span><br><span class=\"line\">  -extfile $WORK_DIR/v3.ext \\</span><br><span class=\"line\">  -CA $WORK_DIR/ca.crt -CAkey $WORK_DIR/ca.key -CAcreateserial \\</span><br><span class=\"line\">  -in $WORK_DIR/server.csr \\</span><br><span class=\"line\">  -out $WORK_DIR/server.crt</span><br><span class=\"line\"></span><br><span class=\"line\">openssl x509 -inform PEM -in $WORK_DIR/server.crt -out $WORK_DIR/$DOMAIN.cert</span><br><span class=\"line\"></span><br><span class=\"line\">mkdir -p ./$DOMAIN</span><br><span class=\"line\">cp $WORK_DIR/server.key $WORK_DIR/server.crt ./$DOMAIN</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>假设我们要为 example.com 生成证书，执行如下命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./gencert.sh example.com</span><br></pre></td></tr></table></figure>\n\n<p>生成的后的目录结构如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── example.com</span><br><span class=\"line\">│   ├── server.crt</span><br><span class=\"line\">│   └── server.key</span><br><span class=\"line\">└── gencert.sh</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<p>本文在文章 <a href=\"https://goharbor.io/docs/2.0.0/install-config/configure-https/\">Configure HTTPS Access to Harbor</a> 的基础上使用 Bash 进行了简单的封装，可以为指定的域名一键生成自签名证书。例如域名 example.com 生成的自签名证书将匹配以下地址：</p>\n<ul>\n<li>example.com</li>\n<li>*.example.com</li>\n</ul>","more":"<p>新建文件 <code>gencert.sh</code> ，编辑并加入以下内容：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/usr/bin/env bash</span></span><br><span class=\"line\"><span class=\"meta\">#</span></span><br><span class=\"line\"><span class=\"bash\"><span class=\"comment\"># Copyright 2020 Liu Hongyu (eliuhy@163.com)</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span></span><br><span class=\"line\"><span class=\"bash\"><span class=\"comment\"># Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> you may not use this file except <span class=\"keyword\">in</span> compliance with the License.</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> You may obtain a copy of the License at</span></span><br><span class=\"line\"><span class=\"meta\">#</span></span><br><span class=\"line\"><span class=\"bash\"><span class=\"comment\">#     http://www.apache.org/licenses/LICENSE-2.0</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span></span><br><span class=\"line\"><span class=\"bash\"><span class=\"comment\"># Unless required by applicable law or agreed to in writing, software</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> distributed under the License is distributed on an <span class=\"string\">&quot;AS IS&quot;</span> BASIS,</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> See the License <span class=\"keyword\">for</span> the specific language governing permissions and</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> limitations under the License.</span></span><br><span class=\"line\"><span class=\"meta\">#</span></span><br><span class=\"line\"><span class=\"bash\"><span class=\"built_in\">set</span> -e</span></span><br><span class=\"line\"></span><br><span class=\"line\">DOMAIN=&quot;$1&quot;</span><br><span class=\"line\">WORK_DIR=&quot;$(mktemp -d)&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">if [ -z &quot;$DOMAIN&quot; ]; then</span><br><span class=\"line\">  echo &quot;Domain name needed.&quot;</span><br><span class=\"line\">  exit 1</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;Temporary working dir is $WORK_DIR &quot;</span><br><span class=\"line\">echo &quot;Gernerating cert for $DOMAIN ...&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span></span><br><span class=\"line\"><span class=\"bash\"><span class=\"comment\"># Fix the following error:</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> --------------------------</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Cannot write random bytes:</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 139695180550592:error:24070079:random number generator:RAND_write_file:Cannot open file:../crypto/rand/randfile.c:213:Filename=/home/eliu/.rnd</span></span><br><span class=\"line\"><span class=\"meta\">#</span></span><br><span class=\"line\"><span class=\"bash\">[ -f <span class=\"variable\">$HOME</span>/.rnd ] || dd <span class=\"keyword\">if</span>=/dev/urandom of=<span class=\"variable\">$HOME</span>/.rnd bs=256 count=1</span></span><br><span class=\"line\"></span><br><span class=\"line\">openssl genrsa -out $WORK_DIR/ca.key 4096</span><br><span class=\"line\"></span><br><span class=\"line\">openssl req -x509 -new -nodes -sha512 -days 3650 \\</span><br><span class=\"line\">  -subj &quot;/C=CN/ST=Beijing/L=Beijing/O=example/OU=Personal/CN=$DOMAIN&quot; \\</span><br><span class=\"line\">  -key $WORK_DIR/ca.key \\</span><br><span class=\"line\">  -out $WORK_DIR/ca.crt</span><br><span class=\"line\"></span><br><span class=\"line\">openssl genrsa -out $WORK_DIR/server.key 4096</span><br><span class=\"line\"></span><br><span class=\"line\">openssl req -sha512 -new \\</span><br><span class=\"line\">  -subj &quot;/C=CN/ST=Beijing/L=Beijing/O=example/OU=Personal/CN=$DOMAIN&quot; \\</span><br><span class=\"line\">  -key $WORK_DIR/server.key \\</span><br><span class=\"line\">  -out $WORK_DIR/server.csr</span><br><span class=\"line\"></span><br><span class=\"line\">cat &gt; $WORK_DIR/v3.ext &lt;&lt;-EOF</span><br><span class=\"line\">authorityKeyIdentifier=keyid,issuer</span><br><span class=\"line\">basicConstraints=CA:FALSE</span><br><span class=\"line\">keyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment</span><br><span class=\"line\">extendedKeyUsage = serverAuth</span><br><span class=\"line\">subjectAltName = @alt_names</span><br><span class=\"line\"></span><br><span class=\"line\">[alt_names]</span><br><span class=\"line\">DNS.1=$DOMAIN</span><br><span class=\"line\">DNS.2=*.$DOMAIN</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">openssl x509 -req -sha512 -days 3650 \\</span><br><span class=\"line\">  -extfile $WORK_DIR/v3.ext \\</span><br><span class=\"line\">  -CA $WORK_DIR/ca.crt -CAkey $WORK_DIR/ca.key -CAcreateserial \\</span><br><span class=\"line\">  -in $WORK_DIR/server.csr \\</span><br><span class=\"line\">  -out $WORK_DIR/server.crt</span><br><span class=\"line\"></span><br><span class=\"line\">openssl x509 -inform PEM -in $WORK_DIR/server.crt -out $WORK_DIR/$DOMAIN.cert</span><br><span class=\"line\"></span><br><span class=\"line\">mkdir -p ./$DOMAIN</span><br><span class=\"line\">cp $WORK_DIR/server.key $WORK_DIR/server.crt ./$DOMAIN</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>假设我们要为 example.com 生成证书，执行如下命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./gencert.sh example.com</span><br></pre></td></tr></table></figure>\n\n<p>生成的后的目录结构如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── example.com</span><br><span class=\"line\">│   ├── server.crt</span><br><span class=\"line\">│   └── server.key</span><br><span class=\"line\">└── gencert.sh</span><br></pre></td></tr></table></figure>"},{"title":"安装Win11的详细步骤","date":"2025-05-17T12:08:14.000Z","_content":"\n本文介绍如何在非Windows主机环境下虚拟化安装和配置 Windows 11 操作系统。 \n\n## 关键步骤\n\n1. 如何在无激活码的情况下完成系统安装\n\n2. 如何绕过微软账号登陆验证\n\n## 实验环境\n\n- 主机操作系统：macOS Sequoia (15.4.1)\n\n- 虚拟机软件：VMware Fusion 13.6.3\n\n- Windows 安装镜像：Win11_24H2_Chinese_Simplified_x64.iso\n\n## 详细安装步骤\n\n<!-- more -->\n\n### 一、获取 Windows 11 磁盘映像（ISO)\n\n访问以下地址，根据指引从微软官方下载win11镜像文件。\n\nhttps://www.microsoft.com/zh-cn/software-download/windows11\n\n![](win11-install-key-steps/2025-05-17-20-23-44-image.png)\n\n我们选择直接下载 iso 映像文件，所以直接跳转到`下载适用于 x64 设备的 Windows 11 磁盘映像 (ISO)`章节，在下拉框中选择`Windows 11（适用于 x64 设备的多版本 ISO）`。\n\n![](win11-install-key-steps/2025-05-17-20-59-07-image.png)\n\n点击`立即下载`按钮之后，页面会刷新出`选择产品语言`选项，选择`简体中文`，点击`确定`按钮完成下载。\n\n![](win11-install-key-steps/2025-05-17-21-03-19-image.png)\n\n最终下载的文件名类似于 `Win11_24H2_Chinese_Simplified_x64.iso`，有了系统映像文件，接下来我们开始执行安装过程。\n\n### 二、创建虚拟机\n\n启动 `VMware Fusion`，如图所示，点选`新建`：\n\n![](win11-install-key-steps/2025-05-17-21-08-24-image.png)\n\n之后选择`从光盘或映像中安装`，点击`继续`按钮。\n\n![](win11-install-key-steps/2025-05-17-21-10-39-image.png)\n\n选择我们刚刚下载的映像文件之后，点击`继续`按钮\n\n![](win11-install-key-steps/2025-05-17-21-11-37-image.png)\n\n固件类型保持默认选项，即 UEFI，点击`继续`按钮\n\n![](win11-install-key-steps/2025-05-17-21-12-35-image.png)\n\n此处选择`Partial Encryption`，点击`Auto Generate Password`按钮将会自动生成加密密码，密码我们不需要刻意去记录，直接勾选`Remember Password and store it in Mac's Keychain` 选项即可，最后点击`继续`按钮。\n\n![](win11-install-key-steps/2025-05-17-21-15-22-image.png)\n\n下图是我根据向导默认生成的虚拟机配置汇总，如果想要调整，可以继续点击`自定设置`按钮进行配置，最后点击`完成`按钮。\n\n![](win11-install-key-steps/2025-05-17-21-17-04-image.png)\n\n### 三、安装Windows 11\n\n双击刚刚我们创建的虚拟机之后，会显示如下信息，此时要快速点击回车按钮进入光驱引导，否则会显示timeout超时。\n\n![](win11-install-key-steps/2025-05-17-21-19-21-image.png)\n\n语言设置保持默认，点击下一步：\n\n![](win11-install-key-steps/2025-05-17-21-22-18-image.png)\n\n键盘设置默认，点击下一步：\n\n![](win11-install-key-steps/2025-05-17-21-22-57-image.png)\n\n选择`安装 Windows11`，勾选 I agree....，点击下一步：\n\n![](win11-install-key-steps/2025-05-17-21-23-55-image.png)\n\n#### 产品秘钥步骤\n\n这个步骤比较重要，如果手上暂时没有可用的产品秘钥，就在左下角勾选`我没有产品秘钥`。\n\n![](win11-install-key-steps/2025-05-17-21-25-38-image.png)\n\n接下来选择安装的 Windows 版本，此处选择`Windows 11 专业版`，点击下一步。\n\n![](win11-install-key-steps/2025-05-17-21-27-15-image.png)\n\n接受条款，点击下一步。\n\n![](win11-install-key-steps/2025-05-17-21-28-06-image.png)\n\n在Windows的安装位置步骤中，全部保持默认即可，稍后会自动格式化磁盘，点击下一步。\n\n![](win11-install-key-steps/2025-05-17-21-30-08-image.png)\n\n此处已准备就绪，我们点击`安装`按钮开始执行安装。\n\n![](win11-install-key-steps/2025-05-17-21-31-57-image.png)\n\n执行安装过程略。\n\n![](win11-install-key-steps/2025-05-17-21-33-07-image.png)\n\n### 四、配置Windows 11\n\n#### 绕过微软账号登陆验证\n\n在安装完成之后就到了配置Windows 11的配置向导，首先弹出的国家（地区）的设置向导\n\n![](win11-install-key-steps/2025-05-17-21-51-10-image.png)\n\n从现在开始，我们就可以实施`绕过微软账号登陆`的步骤了，具体如下：\n\n1. 断开网络连接（可直接禁掉主机的wifi）\n\n2. 按 `CTRL` + `F10` 调出终端窗口\n\n3. 输入命令：`oobe\\bypassnro.cmd`\n\n4. 重启虚拟机（第3步执行完应该会自动重启）\n\n之后正常配置到网络连接步骤后，在此处要点击`我没有 Internet 连接`，之后就可以设置本地账号了！\n\n![](win11-install-key-steps/2025-05-17-21-59-59-image.png)\n\n此时输入你的本地账号名称：\n\n![](win11-install-key-steps/2025-05-17-22-01-32-image.png)\n\n再输入本地账户的密码：\n\n![](win11-install-key-steps/2025-05-17-22-02-06-image.png)\n\n三个安全问题：\n\n![](win11-install-key-steps/2025-05-17-22-02-52-image.png)\n\n隐私设置，全部不勾选，之后点击接受：\n\n![](win11-install-key-steps/2025-05-17-22-04-18-image.png)\n\n#### 同意个人数据跨境传输\n\n这个选项一般点击`下一步`按钮即可，但是如果你不想同意这么做，可以参考下面的指引进行操作：\n\n[跳过电脑个人数据跨境传输提示的方法](https://baijiahao.baidu.com/s?id=1828346126065690979&wfr=spider&for=pc)\n\n![](win11-install-key-steps/2025-05-17-22-09-46-image.png)\n\n好了，一个完整的 Windows 11操作系统就已经安装完成了！至于产品激活码之类的事情，就不过多讲了，大家自行发挥。\n\n![](win11-install-key-steps/2025-05-17-22-11-25-image.png)\n","source":"_posts/win11-install-key-steps.md","raw":"---\ntitle: 安装Win11的详细步骤\ndate: 2025-05-17 20:08:14\ncategories:\ntags:\n---\n\n本文介绍如何在非Windows主机环境下虚拟化安装和配置 Windows 11 操作系统。 \n\n## 关键步骤\n\n1. 如何在无激活码的情况下完成系统安装\n\n2. 如何绕过微软账号登陆验证\n\n## 实验环境\n\n- 主机操作系统：macOS Sequoia (15.4.1)\n\n- 虚拟机软件：VMware Fusion 13.6.3\n\n- Windows 安装镜像：Win11_24H2_Chinese_Simplified_x64.iso\n\n## 详细安装步骤\n\n<!-- more -->\n\n### 一、获取 Windows 11 磁盘映像（ISO)\n\n访问以下地址，根据指引从微软官方下载win11镜像文件。\n\nhttps://www.microsoft.com/zh-cn/software-download/windows11\n\n![](win11-install-key-steps/2025-05-17-20-23-44-image.png)\n\n我们选择直接下载 iso 映像文件，所以直接跳转到`下载适用于 x64 设备的 Windows 11 磁盘映像 (ISO)`章节，在下拉框中选择`Windows 11（适用于 x64 设备的多版本 ISO）`。\n\n![](win11-install-key-steps/2025-05-17-20-59-07-image.png)\n\n点击`立即下载`按钮之后，页面会刷新出`选择产品语言`选项，选择`简体中文`，点击`确定`按钮完成下载。\n\n![](win11-install-key-steps/2025-05-17-21-03-19-image.png)\n\n最终下载的文件名类似于 `Win11_24H2_Chinese_Simplified_x64.iso`，有了系统映像文件，接下来我们开始执行安装过程。\n\n### 二、创建虚拟机\n\n启动 `VMware Fusion`，如图所示，点选`新建`：\n\n![](win11-install-key-steps/2025-05-17-21-08-24-image.png)\n\n之后选择`从光盘或映像中安装`，点击`继续`按钮。\n\n![](win11-install-key-steps/2025-05-17-21-10-39-image.png)\n\n选择我们刚刚下载的映像文件之后，点击`继续`按钮\n\n![](win11-install-key-steps/2025-05-17-21-11-37-image.png)\n\n固件类型保持默认选项，即 UEFI，点击`继续`按钮\n\n![](win11-install-key-steps/2025-05-17-21-12-35-image.png)\n\n此处选择`Partial Encryption`，点击`Auto Generate Password`按钮将会自动生成加密密码，密码我们不需要刻意去记录，直接勾选`Remember Password and store it in Mac's Keychain` 选项即可，最后点击`继续`按钮。\n\n![](win11-install-key-steps/2025-05-17-21-15-22-image.png)\n\n下图是我根据向导默认生成的虚拟机配置汇总，如果想要调整，可以继续点击`自定设置`按钮进行配置，最后点击`完成`按钮。\n\n![](win11-install-key-steps/2025-05-17-21-17-04-image.png)\n\n### 三、安装Windows 11\n\n双击刚刚我们创建的虚拟机之后，会显示如下信息，此时要快速点击回车按钮进入光驱引导，否则会显示timeout超时。\n\n![](win11-install-key-steps/2025-05-17-21-19-21-image.png)\n\n语言设置保持默认，点击下一步：\n\n![](win11-install-key-steps/2025-05-17-21-22-18-image.png)\n\n键盘设置默认，点击下一步：\n\n![](win11-install-key-steps/2025-05-17-21-22-57-image.png)\n\n选择`安装 Windows11`，勾选 I agree....，点击下一步：\n\n![](win11-install-key-steps/2025-05-17-21-23-55-image.png)\n\n#### 产品秘钥步骤\n\n这个步骤比较重要，如果手上暂时没有可用的产品秘钥，就在左下角勾选`我没有产品秘钥`。\n\n![](win11-install-key-steps/2025-05-17-21-25-38-image.png)\n\n接下来选择安装的 Windows 版本，此处选择`Windows 11 专业版`，点击下一步。\n\n![](win11-install-key-steps/2025-05-17-21-27-15-image.png)\n\n接受条款，点击下一步。\n\n![](win11-install-key-steps/2025-05-17-21-28-06-image.png)\n\n在Windows的安装位置步骤中，全部保持默认即可，稍后会自动格式化磁盘，点击下一步。\n\n![](win11-install-key-steps/2025-05-17-21-30-08-image.png)\n\n此处已准备就绪，我们点击`安装`按钮开始执行安装。\n\n![](win11-install-key-steps/2025-05-17-21-31-57-image.png)\n\n执行安装过程略。\n\n![](win11-install-key-steps/2025-05-17-21-33-07-image.png)\n\n### 四、配置Windows 11\n\n#### 绕过微软账号登陆验证\n\n在安装完成之后就到了配置Windows 11的配置向导，首先弹出的国家（地区）的设置向导\n\n![](win11-install-key-steps/2025-05-17-21-51-10-image.png)\n\n从现在开始，我们就可以实施`绕过微软账号登陆`的步骤了，具体如下：\n\n1. 断开网络连接（可直接禁掉主机的wifi）\n\n2. 按 `CTRL` + `F10` 调出终端窗口\n\n3. 输入命令：`oobe\\bypassnro.cmd`\n\n4. 重启虚拟机（第3步执行完应该会自动重启）\n\n之后正常配置到网络连接步骤后，在此处要点击`我没有 Internet 连接`，之后就可以设置本地账号了！\n\n![](win11-install-key-steps/2025-05-17-21-59-59-image.png)\n\n此时输入你的本地账号名称：\n\n![](win11-install-key-steps/2025-05-17-22-01-32-image.png)\n\n再输入本地账户的密码：\n\n![](win11-install-key-steps/2025-05-17-22-02-06-image.png)\n\n三个安全问题：\n\n![](win11-install-key-steps/2025-05-17-22-02-52-image.png)\n\n隐私设置，全部不勾选，之后点击接受：\n\n![](win11-install-key-steps/2025-05-17-22-04-18-image.png)\n\n#### 同意个人数据跨境传输\n\n这个选项一般点击`下一步`按钮即可，但是如果你不想同意这么做，可以参考下面的指引进行操作：\n\n[跳过电脑个人数据跨境传输提示的方法](https://baijiahao.baidu.com/s?id=1828346126065690979&wfr=spider&for=pc)\n\n![](win11-install-key-steps/2025-05-17-22-09-46-image.png)\n\n好了，一个完整的 Windows 11操作系统就已经安装完成了！至于产品激活码之类的事情，就不过多讲了，大家自行发挥。\n\n![](win11-install-key-steps/2025-05-17-22-11-25-image.png)\n","slug":"win11-install-key-steps","published":1,"updated":"2025-05-17T14:36:00.085Z","_id":"cmasb6nqb00467sosfjwrhav7","comments":1,"layout":"post","photos":[],"link":"","content":"<p>本文介绍如何在非Windows主机环境下虚拟化安装和配置 Windows 11 操作系统。 </p>\n<h2 id=\"关键步骤\"><a href=\"#关键步骤\" class=\"headerlink\" title=\"关键步骤\"></a>关键步骤</h2><ol>\n<li><p>如何在无激活码的情况下完成系统安装</p>\n</li>\n<li><p>如何绕过微软账号登陆验证</p>\n</li>\n</ol>\n<h2 id=\"实验环境\"><a href=\"#实验环境\" class=\"headerlink\" title=\"实验环境\"></a>实验环境</h2><ul>\n<li><p>主机操作系统：macOS Sequoia (15.4.1)</p>\n</li>\n<li><p>虚拟机软件：VMware Fusion 13.6.3</p>\n</li>\n<li><p>Windows 安装镜像：Win11_24H2_Chinese_Simplified_x64.iso</p>\n</li>\n</ul>\n<h2 id=\"详细安装步骤\"><a href=\"#详细安装步骤\" class=\"headerlink\" title=\"详细安装步骤\"></a>详细安装步骤</h2><span id=\"more\"></span>\n\n<h3 id=\"一、获取-Windows-11-磁盘映像（ISO\"><a href=\"#一、获取-Windows-11-磁盘映像（ISO\" class=\"headerlink\" title=\"一、获取 Windows 11 磁盘映像（ISO)\"></a>一、获取 Windows 11 磁盘映像（ISO)</h3><p>访问以下地址，根据指引从微软官方下载win11镜像文件。</p>\n<p><a href=\"https://www.microsoft.com/zh-cn/software-download/windows11\">https://www.microsoft.com/zh-cn/software-download/windows11</a></p>\n<p><img data-src=\"/2025/05/17/win11-install-key-steps/2025-05-17-20-23-44-image.png\"></p>\n<p>我们选择直接下载 iso 映像文件，所以直接跳转到<code>下载适用于 x64 设备的 Windows 11 磁盘映像 (ISO)</code>章节，在下拉框中选择<code>Windows 11（适用于 x64 设备的多版本 ISO）</code>。</p>\n<p><img data-src=\"/2025/05/17/win11-install-key-steps/2025-05-17-20-59-07-image.png\"></p>\n<p>点击<code>立即下载</code>按钮之后，页面会刷新出<code>选择产品语言</code>选项，选择<code>简体中文</code>，点击<code>确定</code>按钮完成下载。</p>\n<p><img data-src=\"/2025/05/17/win11-install-key-steps/2025-05-17-21-03-19-image.png\"></p>\n<p>最终下载的文件名类似于 <code>Win11_24H2_Chinese_Simplified_x64.iso</code>，有了系统映像文件，接下来我们开始执行安装过程。</p>\n<h3 id=\"二、创建虚拟机\"><a href=\"#二、创建虚拟机\" class=\"headerlink\" title=\"二、创建虚拟机\"></a>二、创建虚拟机</h3><p>启动 <code>VMware Fusion</code>，如图所示，点选<code>新建</code>：</p>\n<p><img data-src=\"/2025/05/17/win11-install-key-steps/2025-05-17-21-08-24-image.png\"></p>\n<p>之后选择<code>从光盘或映像中安装</code>，点击<code>继续</code>按钮。</p>\n<p><img data-src=\"/2025/05/17/win11-install-key-steps/2025-05-17-21-10-39-image.png\"></p>\n<p>选择我们刚刚下载的映像文件之后，点击<code>继续</code>按钮</p>\n<p><img data-src=\"/2025/05/17/win11-install-key-steps/2025-05-17-21-11-37-image.png\"></p>\n<p>固件类型保持默认选项，即 UEFI，点击<code>继续</code>按钮</p>\n<p><img data-src=\"/2025/05/17/win11-install-key-steps/2025-05-17-21-12-35-image.png\"></p>\n<p>此处选择<code>Partial Encryption</code>，点击<code>Auto Generate Password</code>按钮将会自动生成加密密码，密码我们不需要刻意去记录，直接勾选<code>Remember Password and store it in Mac&#39;s Keychain</code> 选项即可，最后点击<code>继续</code>按钮。</p>\n<p><img data-src=\"/2025/05/17/win11-install-key-steps/2025-05-17-21-15-22-image.png\"></p>\n<p>下图是我根据向导默认生成的虚拟机配置汇总，如果想要调整，可以继续点击<code>自定设置</code>按钮进行配置，最后点击<code>完成</code>按钮。</p>\n<p><img data-src=\"/2025/05/17/win11-install-key-steps/2025-05-17-21-17-04-image.png\"></p>\n<h3 id=\"三、安装Windows-11\"><a href=\"#三、安装Windows-11\" class=\"headerlink\" title=\"三、安装Windows 11\"></a>三、安装Windows 11</h3><p>双击刚刚我们创建的虚拟机之后，会显示如下信息，此时要快速点击回车按钮进入光驱引导，否则会显示timeout超时。</p>\n<p><img data-src=\"/2025/05/17/win11-install-key-steps/2025-05-17-21-19-21-image.png\"></p>\n<p>语言设置保持默认，点击下一步：</p>\n<p><img data-src=\"/2025/05/17/win11-install-key-steps/2025-05-17-21-22-18-image.png\"></p>\n<p>键盘设置默认，点击下一步：</p>\n<p><img data-src=\"/2025/05/17/win11-install-key-steps/2025-05-17-21-22-57-image.png\"></p>\n<p>选择<code>安装 Windows11</code>，勾选 I agree….，点击下一步：</p>\n<p><img data-src=\"/2025/05/17/win11-install-key-steps/2025-05-17-21-23-55-image.png\"></p>\n<h4 id=\"产品秘钥步骤\"><a href=\"#产品秘钥步骤\" class=\"headerlink\" title=\"产品秘钥步骤\"></a>产品秘钥步骤</h4><p>这个步骤比较重要，如果手上暂时没有可用的产品秘钥，就在左下角勾选<code>我没有产品秘钥</code>。</p>\n<p><img data-src=\"/2025/05/17/win11-install-key-steps/2025-05-17-21-25-38-image.png\"></p>\n<p>接下来选择安装的 Windows 版本，此处选择<code>Windows 11 专业版</code>，点击下一步。</p>\n<p><img data-src=\"/2025/05/17/win11-install-key-steps/2025-05-17-21-27-15-image.png\"></p>\n<p>接受条款，点击下一步。</p>\n<p><img data-src=\"/2025/05/17/win11-install-key-steps/2025-05-17-21-28-06-image.png\"></p>\n<p>在Windows的安装位置步骤中，全部保持默认即可，稍后会自动格式化磁盘，点击下一步。</p>\n<p><img data-src=\"/2025/05/17/win11-install-key-steps/2025-05-17-21-30-08-image.png\"></p>\n<p>此处已准备就绪，我们点击<code>安装</code>按钮开始执行安装。</p>\n<p><img data-src=\"/2025/05/17/win11-install-key-steps/2025-05-17-21-31-57-image.png\"></p>\n<p>执行安装过程略。</p>\n<p><img data-src=\"/2025/05/17/win11-install-key-steps/2025-05-17-21-33-07-image.png\"></p>\n<h3 id=\"四、配置Windows-11\"><a href=\"#四、配置Windows-11\" class=\"headerlink\" title=\"四、配置Windows 11\"></a>四、配置Windows 11</h3><h4 id=\"绕过微软账号登陆验证\"><a href=\"#绕过微软账号登陆验证\" class=\"headerlink\" title=\"绕过微软账号登陆验证\"></a>绕过微软账号登陆验证</h4><p>在安装完成之后就到了配置Windows 11的配置向导，首先弹出的国家（地区）的设置向导</p>\n<p><img data-src=\"/2025/05/17/win11-install-key-steps/2025-05-17-21-51-10-image.png\"></p>\n<p>从现在开始，我们就可以实施<code>绕过微软账号登陆</code>的步骤了，具体如下：</p>\n<ol>\n<li><p>断开网络连接（可直接禁掉主机的wifi）</p>\n</li>\n<li><p>按 <code>CTRL</code> + <code>F10</code> 调出终端窗口</p>\n</li>\n<li><p>输入命令：<code>oobe\\bypassnro.cmd</code></p>\n</li>\n<li><p>重启虚拟机（第3步执行完应该会自动重启）</p>\n</li>\n</ol>\n<p>之后正常配置到网络连接步骤后，在此处要点击<code>我没有 Internet 连接</code>，之后就可以设置本地账号了！</p>\n<p><img data-src=\"/2025/05/17/win11-install-key-steps/2025-05-17-21-59-59-image.png\"></p>\n<p>此时输入你的本地账号名称：</p>\n<p><img data-src=\"/2025/05/17/win11-install-key-steps/2025-05-17-22-01-32-image.png\"></p>\n<p>再输入本地账户的密码：</p>\n<p><img data-src=\"/2025/05/17/win11-install-key-steps/2025-05-17-22-02-06-image.png\"></p>\n<p>三个安全问题：</p>\n<p><img data-src=\"/2025/05/17/win11-install-key-steps/2025-05-17-22-02-52-image.png\"></p>\n<p>隐私设置，全部不勾选，之后点击接受：</p>\n<p><img data-src=\"/2025/05/17/win11-install-key-steps/2025-05-17-22-04-18-image.png\"></p>\n<h4 id=\"同意个人数据跨境传输\"><a href=\"#同意个人数据跨境传输\" class=\"headerlink\" title=\"同意个人数据跨境传输\"></a>同意个人数据跨境传输</h4><p>这个选项一般点击<code>下一步</code>按钮即可，但是如果你不想同意这么做，可以参考下面的指引进行操作：</p>\n<p><a href=\"https://baijiahao.baidu.com/s?id=1828346126065690979&wfr=spider&for=pc\">跳过电脑个人数据跨境传输提示的方法</a></p>\n<p><img data-src=\"/2025/05/17/win11-install-key-steps/2025-05-17-22-09-46-image.png\"></p>\n<p>好了，一个完整的 Windows 11操作系统就已经安装完成了！至于产品激活码之类的事情，就不过多讲了，大家自行发挥。</p>\n<p><img data-src=\"/2025/05/17/win11-install-key-steps/2025-05-17-22-11-25-image.png\"></p>\n","site":{"data":{}},"excerpt":"<p>本文介绍如何在非Windows主机环境下虚拟化安装和配置 Windows 11 操作系统。 </p>\n<h2 id=\"关键步骤\"><a href=\"#关键步骤\" class=\"headerlink\" title=\"关键步骤\"></a>关键步骤</h2><ol>\n<li><p>如何在无激活码的情况下完成系统安装</p>\n</li>\n<li><p>如何绕过微软账号登陆验证</p>\n</li>\n</ol>\n<h2 id=\"实验环境\"><a href=\"#实验环境\" class=\"headerlink\" title=\"实验环境\"></a>实验环境</h2><ul>\n<li><p>主机操作系统：macOS Sequoia (15.4.1)</p>\n</li>\n<li><p>虚拟机软件：VMware Fusion 13.6.3</p>\n</li>\n<li><p>Windows 安装镜像：Win11_24H2_Chinese_Simplified_x64.iso</p>\n</li>\n</ul>\n<h2 id=\"详细安装步骤\"><a href=\"#详细安装步骤\" class=\"headerlink\" title=\"详细安装步骤\"></a>详细安装步骤</h2>","more":"<h3 id=\"一、获取-Windows-11-磁盘映像（ISO\"><a href=\"#一、获取-Windows-11-磁盘映像（ISO\" class=\"headerlink\" title=\"一、获取 Windows 11 磁盘映像（ISO)\"></a>一、获取 Windows 11 磁盘映像（ISO)</h3><p>访问以下地址，根据指引从微软官方下载win11镜像文件。</p>\n<p><a href=\"https://www.microsoft.com/zh-cn/software-download/windows11\">https://www.microsoft.com/zh-cn/software-download/windows11</a></p>\n<p><img data-src=\"/2025/05/17/win11-install-key-steps/2025-05-17-20-23-44-image.png\"></p>\n<p>我们选择直接下载 iso 映像文件，所以直接跳转到<code>下载适用于 x64 设备的 Windows 11 磁盘映像 (ISO)</code>章节，在下拉框中选择<code>Windows 11（适用于 x64 设备的多版本 ISO）</code>。</p>\n<p><img data-src=\"/2025/05/17/win11-install-key-steps/2025-05-17-20-59-07-image.png\"></p>\n<p>点击<code>立即下载</code>按钮之后，页面会刷新出<code>选择产品语言</code>选项，选择<code>简体中文</code>，点击<code>确定</code>按钮完成下载。</p>\n<p><img data-src=\"/2025/05/17/win11-install-key-steps/2025-05-17-21-03-19-image.png\"></p>\n<p>最终下载的文件名类似于 <code>Win11_24H2_Chinese_Simplified_x64.iso</code>，有了系统映像文件，接下来我们开始执行安装过程。</p>\n<h3 id=\"二、创建虚拟机\"><a href=\"#二、创建虚拟机\" class=\"headerlink\" title=\"二、创建虚拟机\"></a>二、创建虚拟机</h3><p>启动 <code>VMware Fusion</code>，如图所示，点选<code>新建</code>：</p>\n<p><img data-src=\"/2025/05/17/win11-install-key-steps/2025-05-17-21-08-24-image.png\"></p>\n<p>之后选择<code>从光盘或映像中安装</code>，点击<code>继续</code>按钮。</p>\n<p><img data-src=\"/2025/05/17/win11-install-key-steps/2025-05-17-21-10-39-image.png\"></p>\n<p>选择我们刚刚下载的映像文件之后，点击<code>继续</code>按钮</p>\n<p><img data-src=\"/2025/05/17/win11-install-key-steps/2025-05-17-21-11-37-image.png\"></p>\n<p>固件类型保持默认选项，即 UEFI，点击<code>继续</code>按钮</p>\n<p><img data-src=\"/2025/05/17/win11-install-key-steps/2025-05-17-21-12-35-image.png\"></p>\n<p>此处选择<code>Partial Encryption</code>，点击<code>Auto Generate Password</code>按钮将会自动生成加密密码，密码我们不需要刻意去记录，直接勾选<code>Remember Password and store it in Mac&#39;s Keychain</code> 选项即可，最后点击<code>继续</code>按钮。</p>\n<p><img data-src=\"/2025/05/17/win11-install-key-steps/2025-05-17-21-15-22-image.png\"></p>\n<p>下图是我根据向导默认生成的虚拟机配置汇总，如果想要调整，可以继续点击<code>自定设置</code>按钮进行配置，最后点击<code>完成</code>按钮。</p>\n<p><img data-src=\"/2025/05/17/win11-install-key-steps/2025-05-17-21-17-04-image.png\"></p>\n<h3 id=\"三、安装Windows-11\"><a href=\"#三、安装Windows-11\" class=\"headerlink\" title=\"三、安装Windows 11\"></a>三、安装Windows 11</h3><p>双击刚刚我们创建的虚拟机之后，会显示如下信息，此时要快速点击回车按钮进入光驱引导，否则会显示timeout超时。</p>\n<p><img data-src=\"/2025/05/17/win11-install-key-steps/2025-05-17-21-19-21-image.png\"></p>\n<p>语言设置保持默认，点击下一步：</p>\n<p><img data-src=\"/2025/05/17/win11-install-key-steps/2025-05-17-21-22-18-image.png\"></p>\n<p>键盘设置默认，点击下一步：</p>\n<p><img data-src=\"/2025/05/17/win11-install-key-steps/2025-05-17-21-22-57-image.png\"></p>\n<p>选择<code>安装 Windows11</code>，勾选 I agree….，点击下一步：</p>\n<p><img data-src=\"/2025/05/17/win11-install-key-steps/2025-05-17-21-23-55-image.png\"></p>\n<h4 id=\"产品秘钥步骤\"><a href=\"#产品秘钥步骤\" class=\"headerlink\" title=\"产品秘钥步骤\"></a>产品秘钥步骤</h4><p>这个步骤比较重要，如果手上暂时没有可用的产品秘钥，就在左下角勾选<code>我没有产品秘钥</code>。</p>\n<p><img data-src=\"/2025/05/17/win11-install-key-steps/2025-05-17-21-25-38-image.png\"></p>\n<p>接下来选择安装的 Windows 版本，此处选择<code>Windows 11 专业版</code>，点击下一步。</p>\n<p><img data-src=\"/2025/05/17/win11-install-key-steps/2025-05-17-21-27-15-image.png\"></p>\n<p>接受条款，点击下一步。</p>\n<p><img data-src=\"/2025/05/17/win11-install-key-steps/2025-05-17-21-28-06-image.png\"></p>\n<p>在Windows的安装位置步骤中，全部保持默认即可，稍后会自动格式化磁盘，点击下一步。</p>\n<p><img data-src=\"/2025/05/17/win11-install-key-steps/2025-05-17-21-30-08-image.png\"></p>\n<p>此处已准备就绪，我们点击<code>安装</code>按钮开始执行安装。</p>\n<p><img data-src=\"/2025/05/17/win11-install-key-steps/2025-05-17-21-31-57-image.png\"></p>\n<p>执行安装过程略。</p>\n<p><img data-src=\"/2025/05/17/win11-install-key-steps/2025-05-17-21-33-07-image.png\"></p>\n<h3 id=\"四、配置Windows-11\"><a href=\"#四、配置Windows-11\" class=\"headerlink\" title=\"四、配置Windows 11\"></a>四、配置Windows 11</h3><h4 id=\"绕过微软账号登陆验证\"><a href=\"#绕过微软账号登陆验证\" class=\"headerlink\" title=\"绕过微软账号登陆验证\"></a>绕过微软账号登陆验证</h4><p>在安装完成之后就到了配置Windows 11的配置向导，首先弹出的国家（地区）的设置向导</p>\n<p><img data-src=\"/2025/05/17/win11-install-key-steps/2025-05-17-21-51-10-image.png\"></p>\n<p>从现在开始，我们就可以实施<code>绕过微软账号登陆</code>的步骤了，具体如下：</p>\n<ol>\n<li><p>断开网络连接（可直接禁掉主机的wifi）</p>\n</li>\n<li><p>按 <code>CTRL</code> + <code>F10</code> 调出终端窗口</p>\n</li>\n<li><p>输入命令：<code>oobe\\bypassnro.cmd</code></p>\n</li>\n<li><p>重启虚拟机（第3步执行完应该会自动重启）</p>\n</li>\n</ol>\n<p>之后正常配置到网络连接步骤后，在此处要点击<code>我没有 Internet 连接</code>，之后就可以设置本地账号了！</p>\n<p><img data-src=\"/2025/05/17/win11-install-key-steps/2025-05-17-21-59-59-image.png\"></p>\n<p>此时输入你的本地账号名称：</p>\n<p><img data-src=\"/2025/05/17/win11-install-key-steps/2025-05-17-22-01-32-image.png\"></p>\n<p>再输入本地账户的密码：</p>\n<p><img data-src=\"/2025/05/17/win11-install-key-steps/2025-05-17-22-02-06-image.png\"></p>\n<p>三个安全问题：</p>\n<p><img data-src=\"/2025/05/17/win11-install-key-steps/2025-05-17-22-02-52-image.png\"></p>\n<p>隐私设置，全部不勾选，之后点击接受：</p>\n<p><img data-src=\"/2025/05/17/win11-install-key-steps/2025-05-17-22-04-18-image.png\"></p>\n<h4 id=\"同意个人数据跨境传输\"><a href=\"#同意个人数据跨境传输\" class=\"headerlink\" title=\"同意个人数据跨境传输\"></a>同意个人数据跨境传输</h4><p>这个选项一般点击<code>下一步</code>按钮即可，但是如果你不想同意这么做，可以参考下面的指引进行操作：</p>\n<p><a href=\"https://baijiahao.baidu.com/s?id=1828346126065690979&wfr=spider&for=pc\">跳过电脑个人数据跨境传输提示的方法</a></p>\n<p><img data-src=\"/2025/05/17/win11-install-key-steps/2025-05-17-22-09-46-image.png\"></p>\n<p>好了，一个完整的 Windows 11操作系统就已经安装完成了！至于产品激活码之类的事情，就不过多讲了，大家自行发挥。</p>\n<p><img data-src=\"/2025/05/17/win11-install-key-steps/2025-05-17-22-11-25-image.png\"></p>"}],"PostAsset":[{"_id":"source/_posts/git-log-to-markdown/changelog-v1.0.3.sh","slug":"changelog-v1.0.3.sh","post":"cmasb6npg00037sos2l9123jo","modified":0,"renderable":0},{"_id":"source/_posts/git-log-to-markdown/sample.png","slug":"sample.png","post":"cmasb6npg00037sos2l9123jo","modified":0,"renderable":0},{"_id":"source/_posts/Play-Windows-Classic-Games-on-macOS/d2.png","slug":"d2.png","post":"cmasb6npe00017sos9e90b6ox","modified":0,"renderable":0},{"_id":"source/_posts/Play-Windows-Classic-Games-on-macOS/regedit.png","slug":"regedit.png","post":"cmasb6npe00017sos9e90b6ox","modified":0,"renderable":0},{"_id":"source/_posts/Play-Windows-Classic-Games-on-macOS/winecfg.png","slug":"winecfg.png","post":"cmasb6npe00017sos9e90b6ox","modified":0,"renderable":0},{"_id":"source/_posts/hap-enable-new-language/image-20181009103555564.png","slug":"image-20181009103555564.png","post":"cmasb6npl00087sos20a931h0","modified":0,"renderable":0},{"_id":"source/_posts/hap-email-account-ssl-setup/image-20181017162319708.png","slug":"image-20181017162319708.png","post":"cmasb6npl00097sosdea5900m","modified":0,"renderable":0},{"_id":"source/_posts/hexo-quickstart/image-20210311114700121.png","slug":"image-20210311114700121.png","post":"cmasb6npo000h7soscn0zcv2w","modified":0,"renderable":0},{"_id":"source/_posts/install-k8s-using-kubeadm/dashboard-home.png","slug":"dashboard-home.png","post":"cmasb6npp000i7sosh2ew3xt2","modified":0,"renderable":0},{"_id":"source/_posts/install-k8s-using-kubeadm/dashboard-login.png","slug":"dashboard-login.png","post":"cmasb6npp000i7sosh2ew3xt2","modified":0,"renderable":0},{"_id":"source/_posts/install-k8s-using-kubeadm/demo.png","slug":"demo.png","post":"cmasb6npp000i7sosh2ew3xt2","modified":0,"renderable":0},{"_id":"source/_posts/install-k8s-using-kubeadm/rc.key","slug":"rc.key","post":"cmasb6npp000i7sosh2ew3xt2","modified":0,"renderable":0},{"_id":"source/_posts/install-k8s-using-kubeadm/rc.png","slug":"rc.png","post":"cmasb6npp000i7sosh2ew3xt2","modified":0,"renderable":0},{"_id":"source/_posts/hzero-service-match/2025-05-15-22-36-39-image.png","slug":"2025-05-15-22-36-39-image.png","post":"cmasb6npq000m7sos0670ar63","modified":0,"renderable":0},{"_id":"source/_posts/iterm2-omz-style-guide/image-20200322200414320.png","slug":"image-20200322200414320.png","post":"cmasb6npq000o7sosdfyq2idg","modified":0,"renderable":0},{"_id":"source/_posts/iterm2-omz-style-guide/image-20200322231555092.png","slug":"image-20200322231555092.png","post":"cmasb6npq000o7sosdfyq2idg","modified":0,"renderable":0},{"_id":"source/_posts/manage-kubeconfig/kubeconfig-structure.png","slug":"kubeconfig-structure.png","post":"cmasb6npt000v7sosfzctdlcv","modified":0,"renderable":0},{"_id":"source/_posts/read-property-file-in-bash/properties_pattern_01.png","slug":"properties_pattern_01.png","post":"cmasb6npx001c7sos0mcw528c","modified":0,"renderable":0},{"_id":"source/_posts/read-property-file-in-bash/properties_pattern_02.png","slug":"properties_pattern_02.png","post":"cmasb6npx001c7sos0mcw528c","modified":0,"renderable":0},{"_id":"source/_posts/run-local-k8s-using-k3d/localhost-8080.png","slug":"localhost-8080.png","post":"cmasb6npy001e7sos2nja182o","modified":0,"renderable":0},{"_id":"source/_posts/win11-install-key-steps/2025-05-17-20-23-44-image.png","slug":"2025-05-17-20-23-44-image.png","post":"cmasb6nqb00467sosfjwrhav7","modified":0,"renderable":0},{"_id":"source/_posts/win11-install-key-steps/2025-05-17-20-59-07-image.png","slug":"2025-05-17-20-59-07-image.png","post":"cmasb6nqb00467sosfjwrhav7","modified":0,"renderable":0},{"_id":"source/_posts/win11-install-key-steps/2025-05-17-21-03-19-image.png","slug":"2025-05-17-21-03-19-image.png","post":"cmasb6nqb00467sosfjwrhav7","modified":0,"renderable":0},{"_id":"source/_posts/win11-install-key-steps/2025-05-17-21-08-24-image.png","slug":"2025-05-17-21-08-24-image.png","post":"cmasb6nqb00467sosfjwrhav7","modified":0,"renderable":0},{"_id":"source/_posts/win11-install-key-steps/2025-05-17-21-10-39-image.png","slug":"2025-05-17-21-10-39-image.png","post":"cmasb6nqb00467sosfjwrhav7","modified":0,"renderable":0},{"_id":"source/_posts/win11-install-key-steps/2025-05-17-21-11-37-image.png","slug":"2025-05-17-21-11-37-image.png","post":"cmasb6nqb00467sosfjwrhav7","modified":0,"renderable":0},{"_id":"source/_posts/win11-install-key-steps/2025-05-17-21-12-35-image.png","slug":"2025-05-17-21-12-35-image.png","post":"cmasb6nqb00467sosfjwrhav7","modified":0,"renderable":0},{"_id":"source/_posts/win11-install-key-steps/2025-05-17-21-15-22-image.png","slug":"2025-05-17-21-15-22-image.png","post":"cmasb6nqb00467sosfjwrhav7","modified":0,"renderable":0},{"_id":"source/_posts/win11-install-key-steps/2025-05-17-21-17-04-image.png","slug":"2025-05-17-21-17-04-image.png","post":"cmasb6nqb00467sosfjwrhav7","modified":0,"renderable":0},{"_id":"source/_posts/win11-install-key-steps/2025-05-17-21-19-21-image.png","slug":"2025-05-17-21-19-21-image.png","post":"cmasb6nqb00467sosfjwrhav7","modified":0,"renderable":0},{"_id":"source/_posts/win11-install-key-steps/2025-05-17-21-22-18-image.png","slug":"2025-05-17-21-22-18-image.png","post":"cmasb6nqb00467sosfjwrhav7","modified":0,"renderable":0},{"_id":"source/_posts/win11-install-key-steps/2025-05-17-21-22-57-image.png","slug":"2025-05-17-21-22-57-image.png","post":"cmasb6nqb00467sosfjwrhav7","modified":0,"renderable":0},{"_id":"source/_posts/win11-install-key-steps/2025-05-17-21-23-55-image.png","slug":"2025-05-17-21-23-55-image.png","post":"cmasb6nqb00467sosfjwrhav7","modified":0,"renderable":0},{"_id":"source/_posts/win11-install-key-steps/2025-05-17-21-25-38-image.png","slug":"2025-05-17-21-25-38-image.png","post":"cmasb6nqb00467sosfjwrhav7","modified":0,"renderable":0},{"_id":"source/_posts/win11-install-key-steps/2025-05-17-21-27-15-image.png","slug":"2025-05-17-21-27-15-image.png","post":"cmasb6nqb00467sosfjwrhav7","modified":0,"renderable":0},{"_id":"source/_posts/win11-install-key-steps/2025-05-17-21-28-06-image.png","slug":"2025-05-17-21-28-06-image.png","post":"cmasb6nqb00467sosfjwrhav7","modified":0,"renderable":0},{"_id":"source/_posts/win11-install-key-steps/2025-05-17-21-30-08-image.png","slug":"2025-05-17-21-30-08-image.png","post":"cmasb6nqb00467sosfjwrhav7","modified":0,"renderable":0},{"_id":"source/_posts/win11-install-key-steps/2025-05-17-21-31-57-image.png","slug":"2025-05-17-21-31-57-image.png","post":"cmasb6nqb00467sosfjwrhav7","modified":0,"renderable":0},{"_id":"source/_posts/win11-install-key-steps/2025-05-17-21-33-07-image.png","slug":"2025-05-17-21-33-07-image.png","post":"cmasb6nqb00467sosfjwrhav7","modified":0,"renderable":0},{"_id":"source/_posts/win11-install-key-steps/2025-05-17-21-51-10-image.png","slug":"2025-05-17-21-51-10-image.png","post":"cmasb6nqb00467sosfjwrhav7","modified":0,"renderable":0},{"_id":"source/_posts/win11-install-key-steps/2025-05-17-21-59-59-image.png","slug":"2025-05-17-21-59-59-image.png","post":"cmasb6nqb00467sosfjwrhav7","modified":0,"renderable":0},{"_id":"source/_posts/win11-install-key-steps/2025-05-17-22-01-32-image.png","slug":"2025-05-17-22-01-32-image.png","post":"cmasb6nqb00467sosfjwrhav7","modified":0,"renderable":0},{"_id":"source/_posts/win11-install-key-steps/2025-05-17-22-02-06-image.png","slug":"2025-05-17-22-02-06-image.png","post":"cmasb6nqb00467sosfjwrhav7","modified":0,"renderable":0},{"_id":"source/_posts/win11-install-key-steps/2025-05-17-22-02-52-image.png","slug":"2025-05-17-22-02-52-image.png","post":"cmasb6nqb00467sosfjwrhav7","modified":0,"renderable":0},{"_id":"source/_posts/win11-install-key-steps/2025-05-17-22-04-18-image.png","slug":"2025-05-17-22-04-18-image.png","post":"cmasb6nqb00467sosfjwrhav7","modified":0,"renderable":0},{"_id":"source/_posts/win11-install-key-steps/2025-05-17-22-09-46-image.png","slug":"2025-05-17-22-09-46-image.png","post":"cmasb6nqb00467sosfjwrhav7","modified":0,"renderable":0},{"_id":"source/_posts/win11-install-key-steps/2025-05-17-22-11-25-image.png","slug":"2025-05-17-22-11-25-image.png","post":"cmasb6nqb00467sosfjwrhav7","modified":0,"renderable":0}],"PostCategory":[{"post_id":"cmasb6npe00017sos9e90b6ox","category_id":"cmasb6npi00047sos3ur9dxrt","_id":"cmasb6npo000e7soshqjmbb4i"},{"post_id":"cmasb6npg00037sos2l9123jo","category_id":"cmasb6npm000a7sos1ya3gcu8","_id":"cmasb6npp000j7sosf3416why"},{"post_id":"cmasb6npk00077sos7ef1g1sz","category_id":"cmasb6npo000f7sos3o3c322t","_id":"cmasb6npr000q7sos7c7khznu"},{"post_id":"cmasb6npl00087sos20a931h0","category_id":"cmasb6npp000k7soshoyffu0e","_id":"cmasb6npu000x7sos7vidfqtb"},{"post_id":"cmasb6npl00097sosdea5900m","category_id":"cmasb6npp000k7soshoyffu0e","_id":"cmasb6npv00137sosbpce3gm8"},{"post_id":"cmasb6npm000c7sos8a1v390e","category_id":"cmasb6npp000k7soshoyffu0e","_id":"cmasb6npx00187sosgpa6fkyr"},{"post_id":"cmasb6npo000h7soscn0zcv2w","category_id":"cmasb6npv00127sos41yw8tlv","_id":"cmasb6npy001f7sos4dde1w13"},{"post_id":"cmasb6npp000i7sosh2ew3xt2","category_id":"cmasb6npx001a7sosh1tra16q","_id":"cmasb6nq0001m7sosbnz335r3"},{"post_id":"cmasb6npq000m7sos0670ar63","category_id":"cmasb6npy001h7soshe3sfxs7","_id":"cmasb6nq0001p7sos1id3hsm0"},{"post_id":"cmasb6npz001l7sos71ujdpit","category_id":"cmasb6npx001a7sosh1tra16q","_id":"cmasb6nq1001s7sos28k157w8"},{"post_id":"cmasb6npq000o7sosdfyq2idg","category_id":"cmasb6nq0001n7sos6ecq45kv","_id":"cmasb6nq1001v7sosgua0c6fp"},{"post_id":"cmasb6nps000t7sos1xjfbhg8","category_id":"cmasb6npx001a7sosh1tra16q","_id":"cmasb6nq2001z7sosb4n9hnga"},{"post_id":"cmasb6npt000v7sosfzctdlcv","category_id":"cmasb6npx001a7sosh1tra16q","_id":"cmasb6nq200227soshqzv3nwi"},{"post_id":"cmasb6npu000y7sosg79a1bcj","category_id":"cmasb6npx001a7sosh1tra16q","_id":"cmasb6nq200257sosgw158i8i"},{"post_id":"cmasb6npw00177sosgvl2g2cc","category_id":"cmasb6nq200217sos00i02kde","_id":"cmasb6nq3002a7sos0tov0v5j"},{"post_id":"cmasb6npx001c7sos0mcw528c","category_id":"cmasb6nq3002b7sosa0wjapeb","_id":"cmasb6nq4002h7sos5s9y7k09"},{"post_id":"cmasb6npz001j7sos9vhebqq6","category_id":"cmasb6nq3002e7sos67i1a4pw","_id":"cmasb6nq4002o7soscvml1t29"},{"post_id":"cmasb6npx00197sos7ayaf199","category_id":"cmasb6nq200267soscerz62ws","_id":"cmasb6nq5002s7sosg02zhpww"},{"post_id":"cmasb6npx00197sos7ayaf199","category_id":"cmasb6nq4002l7soshcbuegq4","_id":"cmasb6nq5002u7soscxh35hnk"},{"post_id":"cmasb6npy001e7sos2nja182o","category_id":"cmasb6nq3002e7sos67i1a4pw","_id":"cmasb6nq5002w7soshkpx9mvj"},{"post_id":"cmasb6npy001e7sos2nja182o","category_id":"cmasb6nq4002p7sos8g440avf","_id":"cmasb6nq5002x7sosed7n34lg"}],"PostTag":[{"post_id":"cmasb6npe00017sos9e90b6ox","tag_id":"cmasb6npj00057sos0zylc81a","_id":"cmasb6npq000n7sos53xqbt44"},{"post_id":"cmasb6npe00017sos9e90b6ox","tag_id":"cmasb6npm000b7sos4c9sfsba","_id":"cmasb6npr000p7sosh8t0gp8o"},{"post_id":"cmasb6npe00017sos9e90b6ox","tag_id":"cmasb6npo000g7sos90wm2heg","_id":"cmasb6npt000u7sos59ei23fa"},{"post_id":"cmasb6npg00037sos2l9123jo","tag_id":"cmasb6npp000l7sosaaq63m7v","_id":"cmasb6npv00107sosgjuv4alx"},{"post_id":"cmasb6npg00037sos2l9123jo","tag_id":"cmasb6npr000s7sos1xbwdqap","_id":"cmasb6npv00147sos3zx9dcxf"},{"post_id":"cmasb6npk00077sos7ef1g1sz","tag_id":"cmasb6npu000z7sosd7rtc35o","_id":"cmasb6npy001d7sos435j78gt"},{"post_id":"cmasb6npk00077sos7ef1g1sz","tag_id":"cmasb6npp000l7sosaaq63m7v","_id":"cmasb6npy001g7sosakr917me"},{"post_id":"cmasb6npl00087sos20a931h0","tag_id":"cmasb6npx001b7sosbxqn06h9","_id":"cmasb6npz001k7sosc1t9drln"},{"post_id":"cmasb6npl00097sosdea5900m","tag_id":"cmasb6npz001i7sosbe50drgv","_id":"cmasb6nq1001t7sosbsy34oug"},{"post_id":"cmasb6npl00097sosdea5900m","tag_id":"cmasb6nq0001o7sos3ahoepx4","_id":"cmasb6nq1001w7sos694gdb28"},{"post_id":"cmasb6npm000c7sos8a1v390e","tag_id":"cmasb6npx001b7sosbxqn06h9","_id":"cmasb6nq200247sos492ig09s"},{"post_id":"cmasb6npm000c7sos8a1v390e","tag_id":"cmasb6nq1001x7sos5ywv06ko","_id":"cmasb6nq300277sos5pgaf1lp"},{"post_id":"cmasb6npm000c7sos8a1v390e","tag_id":"cmasb6nq200207sos3oxhbpqs","_id":"cmasb6nq300297sosgkj78bod"},{"post_id":"cmasb6npo000h7soscn0zcv2w","tag_id":"cmasb6nq200237sos754o7i44","_id":"cmasb6nq3002d7sos4tjw1ggr"},{"post_id":"cmasb6npo000h7soscn0zcv2w","tag_id":"cmasb6nq300287sos7qmg8okr","_id":"cmasb6nq3002f7soscgtie4c5"},{"post_id":"cmasb6npp000i7sosh2ew3xt2","tag_id":"cmasb6nq3002c7soscz65bsch","_id":"cmasb6nq4002k7sos7ejk25ys"},{"post_id":"cmasb6npp000i7sosh2ew3xt2","tag_id":"cmasb6nq3002g7soscvvo4h3u","_id":"cmasb6nq4002m7sos6qbc3u5j"},{"post_id":"cmasb6npq000o7sosdfyq2idg","tag_id":"cmasb6nq4002j7sos0awrfva1","_id":"cmasb6nq5002r7sos8gko9rd5"},{"post_id":"cmasb6npq000o7sosdfyq2idg","tag_id":"cmasb6nq4002n7sos5auf195d","_id":"cmasb6nq5002t7sos076r3pfj"},{"post_id":"cmasb6nps000t7sos1xjfbhg8","tag_id":"cmasb6nq5002q7sos422wgys2","_id":"cmasb6nq600317sos856qcrl1"},{"post_id":"cmasb6nps000t7sos1xjfbhg8","tag_id":"cmasb6nq5002v7sosdy9p1cx5","_id":"cmasb6nq600327sos0byteawk"},{"post_id":"cmasb6nps000t7sos1xjfbhg8","tag_id":"cmasb6nq5002y7sos3vu798iy","_id":"cmasb6nq600347soshzuhb0w2"},{"post_id":"cmasb6nps000t7sos1xjfbhg8","tag_id":"cmasb6nq6002z7sos3e0remwv","_id":"cmasb6nq600357sosgjm5ezsy"},{"post_id":"cmasb6npt000v7sosfzctdlcv","tag_id":"cmasb6nq3002c7soscz65bsch","_id":"cmasb6nq700397sos9s1hbahc"},{"post_id":"cmasb6npt000v7sosfzctdlcv","tag_id":"cmasb6nq600337sosc9fo35m4","_id":"cmasb6nq7003a7soshoaqdju2"},{"post_id":"cmasb6npt000v7sosfzctdlcv","tag_id":"cmasb6nq600367sosdqjjhffl","_id":"cmasb6nq7003c7sosenjz9bvs"},{"post_id":"cmasb6npt000v7sosfzctdlcv","tag_id":"cmasb6nq600377soshmir3dvx","_id":"cmasb6nq7003d7sos7ag4h4dq"},{"post_id":"cmasb6npu000y7sosg79a1bcj","tag_id":"cmasb6nq600387sos2uu3fhge","_id":"cmasb6nq7003f7sosdjlc2ok3"},{"post_id":"cmasb6npu000y7sosg79a1bcj","tag_id":"cmasb6nq7003b7sosbfqw6w0h","_id":"cmasb6nq7003g7sos4efrc3kj"},{"post_id":"cmasb6npv00157sosbus57o25","tag_id":"cmasb6nq7003e7sos1l4lha3g","_id":"cmasb6nq8003k7sos0omu5vms"},{"post_id":"cmasb6npv00157sosbus57o25","tag_id":"cmasb6nq7003h7soscqe2bhgs","_id":"cmasb6nq8003l7sosebaafyyv"},{"post_id":"cmasb6npv00157sosbus57o25","tag_id":"cmasb6nq7003i7sos6oro6ezp","_id":"cmasb6nq8003n7sos49lj980m"},{"post_id":"cmasb6npw00177sosgvl2g2cc","tag_id":"cmasb6nq8003j7sos5500fl57","_id":"cmasb6nq8003o7sosgqnfc2dd"},{"post_id":"cmasb6npx001c7sos0mcw528c","tag_id":"cmasb6nq8003m7sosesop3nig","_id":"cmasb6nq8003r7sosgij80fod"},{"post_id":"cmasb6npx001c7sos0mcw528c","tag_id":"cmasb6nq8003p7sosffpmfhkj","_id":"cmasb6nq8003s7sos87bp1paa"},{"post_id":"cmasb6npy001e7sos2nja182o","tag_id":"cmasb6nq8003q7sos5pid60ff","_id":"cmasb6nq9003w7sos1mrpdadf"},{"post_id":"cmasb6npy001e7sos2nja182o","tag_id":"cmasb6nq8003t7sosb36f4al4","_id":"cmasb6nq9003x7sos0lfe76dl"},{"post_id":"cmasb6npy001e7sos2nja182o","tag_id":"cmasb6nq8003u7sose33bg5c3","_id":"cmasb6nq9003z7sosdek2ew5k"},{"post_id":"cmasb6npz001j7sos9vhebqq6","tag_id":"cmasb6nq9003v7soscguvdm8c","_id":"cmasb6nq900417sosbliydzk0"},{"post_id":"cmasb6npz001j7sos9vhebqq6","tag_id":"cmasb6nq8003u7sose33bg5c3","_id":"cmasb6nq900427sos0jtw5ba9"},{"post_id":"cmasb6npz001l7sos71ujdpit","tag_id":"cmasb6nq900407sosba534aza","_id":"cmasb6nq900447sos400854v7"},{"post_id":"cmasb6npz001l7sos71ujdpit","tag_id":"cmasb6nq900437sos6tgs9coe","_id":"cmasb6nq900457sosbyfthc93"}],"Tag":[{"name":"wine","_id":"cmasb6npj00057sos0zylc81a"},{"name":"macOS","_id":"cmasb6npm000b7sos4c9sfsba"},{"name":"Diablo II","_id":"cmasb6npo000g7sos90wm2heg"},{"name":"git","_id":"cmasb6npp000l7sosaaq63m7v"},{"name":"小技巧","_id":"cmasb6npr000s7sos1xbwdqap"},{"name":"gitbook","_id":"cmasb6npu000z7sosd7rtc35o"},{"name":"i18n","_id":"cmasb6npx001b7sosbxqn06h9"},{"name":"email","_id":"cmasb6npz001i7sosbe50drgv"},{"name":"SSL","_id":"cmasb6nq0001o7sos3ahoepx4"},{"name":"iRequest","_id":"cmasb6nq1001x7sos5ywv06ko"},{"name":"locale","_id":"cmasb6nq200207sos3oxhbpqs"},{"name":"hexo","_id":"cmasb6nq200237sos754o7i44"},{"name":"nodejs","_id":"cmasb6nq300287sos7qmg8okr"},{"name":"Kubernetes","_id":"cmasb6nq3002c7soscz65bsch"},{"name":"kubeadm","_id":"cmasb6nq3002g7soscvvo4h3u"},{"name":"iterm2","_id":"cmasb6nq4002j7sos0awrfva1"},{"name":"on-my-zsh","_id":"cmasb6nq4002n7sos5auf195d"},{"name":"k8s","_id":"cmasb6nq5002q7sos422wgys2"},{"name":"kubernetes","_id":"cmasb6nq5002v7sosdy9p1cx5"},{"name":"deployment","_id":"cmasb6nq5002y7sos3vu798iy"},{"name":"admin","_id":"cmasb6nq6002z7sos3e0remwv"},{"name":"K8S","_id":"cmasb6nq600337sosc9fo35m4"},{"name":"kubeconfig","_id":"cmasb6nq600367sosdqjjhffl"},{"name":"kubectl config","_id":"cmasb6nq600377soshmir3dvx"},{"name":"国内源","_id":"cmasb6nq600387sos2uu3fhge"},{"name":"镜像源","_id":"cmasb6nq7003b7sosbfqw6w0h"},{"name":"macOS Catalina","_id":"cmasb6nq7003e7sos1l4lha3g"},{"name":"node-gyp rebuild","_id":"cmasb6nq7003h7soscqe2bhgs"},{"name":"No Xcode or CLT version detected","_id":"cmasb6nq7003i7sos6oro6ezp"},{"name":"吐槽","_id":"cmasb6nq8003j7sos5500fl57"},{"name":"Bash","_id":"cmasb6nq8003m7sosesop3nig"},{"name":"Shell","_id":"cmasb6nq8003p7sosffpmfhkj"},{"name":"k3d","_id":"cmasb6nq8003q7sos5pid60ff"},{"name":"k3s","_id":"cmasb6nq8003t7sosb36f4al4"},{"name":"docker","_id":"cmasb6nq8003u7sose33bg5c3"},{"name":"kind","_id":"cmasb6nq9003v7soscguvdm8c"},{"name":"self-signed certificate","_id":"cmasb6nq900407sosba534aza"},{"name":"自签名证书","_id":"cmasb6nq900437sos6tgs9coe"}]}}